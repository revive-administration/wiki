
<h1 class="sectionedit1" id="c01_자료구조와_알고리즘_소개">C01 자료구조와 알고리즘 소개</h1>
<div class="level1">

</div>
<!-- EDIT1 SECTION "C01 자료구조와 알고리즘 소개" [1-54] -->
<h2 class="sectionedit2" id="자료구조와_알고리즘_원리">01 자료구조와 알고리즘 원리</h2>
<div class="level2">

<p>
자료구조는 흩어져 있는 알고리즘 중에서 메모리와 관련된 알고리즘을 모아 놓은 것이다. 저장 알고리즘은 같은 타입의 데이터를 메모리를 어떻게 저장해야 효율적인가 생각하는 것이고, 탐색 알고리즘은 같은 타입의 데이터 중 임의의 정보를 어떻게 빠르게 검색할지 생각하는 것이다. 
</p>

</div>
<!-- EDIT2 SECTION "01 자료구조와 알고리즘 원리" [55-486] -->
<h2 class="sectionedit3" id="알고리즘의_비교기준">02 알고리즘의 비교기준</h2>
<div class="level2">

</div>
<!-- EDIT3 SECTION "02 알고리즘의 비교기준" [487-531] -->
<h2 class="sectionedit4" id="수행_시간_중요성">03 수행 시간 중요성</h2>
<div class="level2">

</div>
<!-- EDIT4 SECTION "03 수행 시간 중요성" [532-571] -->
<h2 class="sectionedit5" id="자료구조_표현">06 자료구조 표현</h2>
<div class="level2">
<ol>
<li class="level1"><div class="li"> 단순구조 : 정수, 실수, 문자, 문자열과 같은 자료형 <br/>
<br/>
</div>
</li>
<li class="level1"><div class="li"> 선형구조 : 리스트, 연결 리스트, 스택, 큐와 같이 자료들 간의 관계가 &#039;1:1&#039;로 고정되어 있는 구조</div>
<ol>
<li class="level2"><div class="li"> 리스트 : 자료의 논리적인 순서와 기억장소에 저장되는 물리적인 순서가 일치하는 구조</div>
</li>
<li class="level2"><div class="li"> 연결 리스트 : 물리적인 순서에 상관없이 포인터를 사용하여 논리적인 순서를 갖는 구조</div>
</li>
<li class="level2"><div class="li"> 스택, 큐 : 자료의 삽입, 삭제와 같은 연산에 있어서 삽입, 삭제 위치에 대해 제한 조건이 있는 구조 <br/>
<br/>
</div>
</li>
</ol>
</li>
<li class="level1"><div class="li"> 비선형구조 : 트리, 그래프 같이 자료들 간의 구조가 &#039;1:다&#039; 관계로 이루어진 구조</div>
<ol>
<li class="level2"><div class="li"> 트리 : 자료 항목이 노드로 표현되어, 계층적으로 배치된 구조</div>
</li>
<li class="level2"><div class="li"> 그래프 : 그물 망 같은 구조 <br/>
<br/>
</div>
</li>
</ol>
</li>
<li class="level1"><div class="li"> 파일구조 : 자료 항목들 간의 관계가 &#039;다:다&#039;의 관계를 가지며, 서로 관련 있는 필드로 구성된 레코드의 집합으로 보조기억장치에 기록되는 구조</div>
<ol>
<li class="level2"><div class="li"> 순차파일 : 레코드들이 하나 또는 그 이상의 키 필드 값에 따라 차례로 연속되게 저장하는 방법</div>
</li>
<li class="level2"><div class="li"> 색인파일 : 각 레코드에 포함되어 있는 키에 따라서 논리적 순서에 의해 나열된 것. 키 순서에 따라 연속적으로 접근되거나 그 시스템에서 생성한 색인을 통하여 직접 접근됨</div>
</li>
<li class="level2"><div class="li"> 직접파일 : 해당하는 데이터 레코드를 직접 액세스하는 파일</div>
</li>
</ol>
</li>
</ol>

<p>
자료구조를 사용하는 목적은 효율성, 추상화, 그리고 재사용성으로 생각할 수 있다.
</p>
<ol>
<li class="level1"><div class="li"> 효율성 : 효율성은 효율적인 알고리즘이 될 수 있도록 자료를 구조화하는 것이다. <br/>
<br/>
</div>
</li>
<li class="level1"><div class="li"> 추상화 : 추상화는 크고 복잡한 문제를 해결하는 데 있어, 핵심적인 개념이나 중요한 특징만을 간추려내고 단순화시키는 작업이다. 추상화 과정을 통해 복잡한 문제를 쉽게 해결할 수 있는 방법을 찾을 수 있다. <br/>
<br/>
</div>
</li>
<li class="level1"><div class="li"> 재사용성 : 자료구조는 모듈화되어 있어서 재사용이 가능하다.</div>
</li>
</ol>

</div>
<!-- EDIT5 SECTION "06 자료구조 표현" [572-] -->