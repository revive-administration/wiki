
<h1 class="sectionedit1" id="restful_서비스">RESTful 서비스</h1>
<div class="level1">

<p>
HTTP 요청의 성격을 그대로 사용해 데이터의 생성, 조회, 수정, 삭제 작업을 수행하는 것
</p>

</div>
<!-- EDIT1 SECTION "RESTful 서비스" [1-149] -->
<h2 class="sectionedit2" id="rest_아키텍처에_적용되는_6가지_제한_조건">REST 아키텍처에 적용되는 6가지 제한 조건</h2>
<div class="level2">

<p>
다음 제한 조건을 준수하는 한 개별 컴포넌트는 자유롭게 구현할 수 있다.
</p>
<ul>
<li class="level1"><div class="li"> 클라이언트/서버 구조 : 일관적인 인터페이스로 분리되어야 한다.</div>
</li>
<li class="level1"><div class="li"> 무상태(Stateless) : 각 요청 간 클라이언트의 콘텍스트가 서버에 저장되어서는 안된다.</div>
</li>
<li class="level1"><div class="li"> 캐시 처리 가능(Cacheable) : WWW에서와 같이 클라이언트는 응답을 캐싱할 수 있어야 한다.</div>
</li>
<li class="level1"><div class="li"> 계층화(Layered System) : 클라이언트는 보통 대상 서버에 직접 연결되었는지, 또는 중간 서버를 통해 연결되었는지를 알 수 없다. 중간 서버는 로드 밸런싱 기능이나 공유 캐시 기능을 제공함으로써 시스템 규모 확장성을 향상시키는 데 유용하다.</div>
</li>
<li class="level1"><div class="li"> Codde on demand(optional) : 자바 애플릿이나 자바스크립트의 제공을 통해 서버가 클라이언트가 실행시킬 수 있는 로직을 전송하여 기능을 확장시킬 수 있다.</div>
</li>
<li class="level1"><div class="li"> 인터페이스 일관성 : 아키텍처를 단순화시키고 작은 단위로 분리함으로써 클라이언트-서버의 각 파트가 독립적으로 개선될 수 있도록 해준다.</div>
</li>
</ul>

</div>
<!-- EDIT2 SECTION "REST 아키텍처에 적용되는 6가지 제한 조건" [150-] -->