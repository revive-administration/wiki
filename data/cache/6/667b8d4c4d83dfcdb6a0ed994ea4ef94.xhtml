
<h1 class="sectionedit1" id="지시자의_모든_것">07 지시자의 모든 것</h1>
<div class="level1">

</div>
<!-- EDIT1 SECTION "07 지시자의 모든 것" [1-42] -->
<h2 class="sectionedit2" id="html에서_지시자를_사용하는_방법">HTML에서 지시자를 사용하는 방법</h2>
<div class="level2">

</div>
<!-- EDIT2 SECTION "HTML에서 지시자를 사용하는 방법" [43-99] -->
<h2 class="sectionedit3" id="사용자_정의_지시자">사용자 정의 지시자</h2>
<div class="level2">

</div>
<!-- EDIT3 SECTION "사용자 정의 지시자" [100-137] -->
<h3 class="sectionedit4" id="지시자_설정_객체">지시자 설정 객체</h3>
<div class="level3">

<p>
지시자 설정 함수에서 반환되는 객체를 지시자 설정 객체라 한다. 이 설정 객체로 AngularJS가 지시자를 만들게 된다
</p>

</div>
<!-- EDIT4 SECTION "지시자 설정 객체" [138-323] -->
<h3 class="sectionedit5" id="자체_템플릿을_가지는_지시자">자체 템플릿을 가지는 지시자</h3>
<div class="level3">

<p>
앞에서 만든 Hello 지시자를 좀 더 업그레이드해보자. 이번에는 링크 함수에서 DOM을 직접 생성하지 않고 template 설정을 이용해 생성하려는 DOM을 템플릿화해보겠다.
</p>

</div>
<!-- EDIT5 SECTION "자체 템플릿을 가지는 지시자" [324-589] -->
<h3 class="sectionedit6" id="scope_설정_완전_정복">scope 설정 완전 정복</h3>
<div class="level3">

</div>

<h4 id="별도의_새로운_scope를_만들지_않는_설정">별도의 새로운 scope를 만들지 않는 설정</h4>
<div class="level4">

</div>

<h4 id="부모_scope를_상속받는_scope_설정">부모 scope를 상속받는 scope 설정</h4>
<div class="level4">

<p>
지시자 설정 객체에 scope 속성에 true 값을 주면 부모 scope를 상속받는 새로운 scope가 생성된다.
</p>

</div>

<h4 id="ngtransclude와_transclude_설정">ngTransclude와 transclude 설정</h4>
<div class="level4">

<p>
AngularJS에서 지시자를 이용하면 ng-click과 같이 특정 DOM에 이벤트를 연결하거나 ng-repeat처럼 DOM을 조작하는 일을 할 수 있다. 하지만 hello 지시자처럼 재사용할 수 있는 기능이 있는 컴포넌트를 만들 수 있다.
</p>

</div>
<!-- EDIT6 SECTION "scope 설정 완전 정복" [590-] -->