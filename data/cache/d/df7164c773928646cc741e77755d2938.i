a:583:{i:0;a:3:{i:0;s:14:"document_start";i:1;a:0:{}i:2;i:0;}i:1;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:9:"Chapter 8";i:1;i:1;i:2;i:1;}i:2;i:1;}i:2;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:1;}i:2;i:1;}i:3;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:25;}i:4;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:32:"8.1 하드웨어와 제어구조";i:1;i:2;i:2;i:25;}i:2;i:25;}i:5;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:25;}i:6;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:25;}i:7;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:309:"단순페이징과 단순 세그먼테이션을 고정분할 혹은 가변분할과 비교해 보면, 메모리 관리에 있어 근본 타개책을 모색하기 위한 기초를 발견하게 된다. 페이징과 세그먼테이션이 갖는 다음의 두가지 특성이 그 타개책의 실마리가 된다.";}i:2;i:70;}i:8;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:380;}i:9;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"ul";i:2;s:16:" class="extlist"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:380;}i:10;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:380;}i:11;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:380;}i:12;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:1;i:3;s:5:"
  * ";}i:2;i:380;}i:13;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:333:"1. 프로세스의 모든 메모리 참조는 논리주소이며, 이 주소는 프로세스 수행 시간에 동적으로 물리주소로 변환된다. 이는 한 프로세스가 그 수행 과정에서 스와핑을 통해 다시 주기억장치에 적재될 때, 그 이전과 다른 위치에 적재될 수 있음을 의미한다.";}i:2;i:385;}i:14;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:333:"1. 프로세스의 모든 메모리 참조는 논리주소이며, 이 주소는 프로세스 수행 시간에 동적으로 물리주소로 변환된다. 이는 한 프로세스가 그 수행 과정에서 스와핑을 통해 다시 주기억장치에 적재될 때, 그 이전과 다른 위치에 적재될 수 있음을 의미한다.";}i:2;i:385;}i:15;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:718;}i:16;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:718;}i:17;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:718;}i:18;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:718;}i:19;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:2;i:3;s:5:"
  * ";}i:2;i:718;}i:20;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:370:"2. 한 프로세스의 주소공간은 여러 블록(페이지 혹은 세그먼트)으로 분할될 수 있고, 프로세스 수행 중 이 블록들은 주기억장치의 연속된 영역에 위치할 필요가 없다. 이는 프로세스가 수행될 때 페이지(혹은 세그먼트) 테이블을 활용해 동적으로 주소를 변환함으로써 가능케 된다.";}i:2;i:723;}i:21;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:370:"2. 한 프로세스의 주소공간은 여러 블록(페이지 혹은 세그먼트)으로 분할될 수 있고, 프로세스 수행 중 이 블록들은 주기억장치의 연속된 영역에 위치할 필요가 없다. 이는 프로세스가 수행될 때 페이지(혹은 세그먼트) 테이블을 활용해 동적으로 주소를 변환함으로써 가능케 된다.";}i:2;i:723;}i:22;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:1093;}i:23;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:1093;}i:24;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"ul";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:1093;}i:25;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:4;i:3;s:1:"
";}i:2;i:1093;}i:26;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"ul";i:2;s:16:" class="extlist"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:1094;}i:27;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:1094;}i:28;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:1094;}i:29;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:1;i:3;s:5:"
  * ";}i:2;i:1094;}i:30;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:41:"<가상 메모리 관련 핵심 용어>  ";}i:2;i:1099;}i:31;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:41:"<가상 메모리 관련 핵심 용어>  ";}i:2;i:1099;}i:32;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"ul";i:2;s:16:" class="extlist"";}i:2;i:1;i:3;s:7:"
    * ";}i:2;i:1140;}i:33;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:7:"
    * ";}i:2;i:1140;}i:34;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:7:"
    * ";}i:2;i:1140;}i:35;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:2;i:3;s:7:"
    * ";}i:2;i:1140;}i:36;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:560:"가상메모리 : 보조기억장치를 주기억장치처럼 주소지정 가능하게 만든 저장공간 할당체제. 프로그램이 메모리를 참조할 때 사용하는 주소는 메모리 시스템이 물리 메모리의 특정 위치를 식별할 때 사용하는 주소와 구별된다. 프로그램이 생성한 주소는 그에 대응된 물리주소로 자동 변환된다. 가상메모리의 크기는 주기억장치의 크기가 아니라 컴퓨터 시스템의 주소지정체제와 보조기억장치의 가용크기에 의해 제한된다.";}i:2;i:1147;}i:37;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:560:"가상메모리 : 보조기억장치를 주기억장치처럼 주소지정 가능하게 만든 저장공간 할당체제. 프로그램이 메모리를 참조할 때 사용하는 주소는 메모리 시스템이 물리 메모리의 특정 위치를 식별할 때 사용하는 주소와 구별된다. 프로그램이 생성한 주소는 그에 대응된 물리주소로 자동 변환된다. 가상메모리의 크기는 주기억장치의 크기가 아니라 컴퓨터 시스템의 주소지정체제와 보조기억장치의 가용크기에 의해 제한된다.";}i:2;i:1147;}i:38;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:7:"
    * ";}i:2;i:1707;}i:39;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:7:"
    * ";}i:2;i:1707;}i:40;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:7:"
    * ";}i:2;i:1707;}i:41;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:7:"
    * ";}i:2;i:1707;}i:42;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:2;i:3;s:7:"
    * ";}i:2;i:1707;}i:43;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:112:"가상주소 : 주기억장치처럼 참조될 수 있도록 가상메모리의 특정위치에 배정된 주소";}i:2;i:1714;}i:44;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:112:"가상주소 : 주기억장치처럼 참조될 수 있도록 가상메모리의 특정위치에 배정된 주소";}i:2;i:1714;}i:45;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:7:"
    * ";}i:2;i:1826;}i:46;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:7:"
    * ";}i:2;i:1826;}i:47;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:7:"
    * ";}i:2;i:1826;}i:48;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:7:"
    * ";}i:2;i:1826;}i:49;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:2;i:3;s:7:"
    * ";}i:2;i:1826;}i:50;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:80:"가상주소공간 : 특정 프로세스에게 할당된 가상 주소의 영역";}i:2;i:1833;}i:51;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:80:"가상주소공간 : 특정 프로세스에게 할당된 가상 주소의 영역";}i:2;i:1833;}i:52;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:7:"
    * ";}i:2;i:1913;}i:53;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:7:"
    * ";}i:2;i:1913;}i:54;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:7:"
    * ";}i:2;i:1913;}i:55;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:7:"
    * ";}i:2;i:1913;}i:56;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:2;i:3;s:7:"
    * ";}i:2;i:1913;}i:57;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:85:"주소공간 : 특정 프로세스가 접근할 수 있는 메모리 주소의 영역";}i:2;i:1920;}i:58;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:85:"주소공간 : 특정 프로세스가 접근할 수 있는 메모리 주소의 영역";}i:2;i:1920;}i:59;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:7:"
    * ";}i:2;i:2005;}i:60;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:7:"
    * ";}i:2;i:2005;}i:61;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:7:"
    * ";}i:2;i:2005;}i:62;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:7:"
    * ";}i:2;i:2005;}i:63;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:2;i:3;s:7:"
    * ";}i:2;i:2005;}i:64;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:64:"실주소 : 주기억장치 상의 특정 저장위치의 주소";}i:2;i:2012;}i:65;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:64:"실주소 : 주기억장치 상의 특정 저장위치의 주소";}i:2;i:2012;}i:66;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:2076;}i:67;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:2076;}i:68;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"ul";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:2076;}i:69;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:2076;}i:70;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"ul";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:2076;}i:71;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:4;i:3;s:1:"
";}i:2;i:2076;}i:72;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2076;}i:73;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:873:"새로운 프로세스가 메모리에 반입되어야 할 상황을 가정해보자. 운영체제는 초기에 수행될 코드와 참조될 데이터가 포함되도록 단지 하나 혹은 몇 개의 블록만 반입한다. 프로세스의 코드나 데이터 중 임의 시점에 주기억장치에 적재되어 있는 부분을 해당 프로세스의 적재집합(resident set)이라 한다. 프로세스가 적재집합에 포함된 주소를 참조하며 수행되는 동안은 그 수행이 순조롭다. 처리기는 세그먼트테이블이나 페이지테이블을 이용하여 프로세스의 참조 주소가 적재집합에 포함되어 있는지를 판단할 수 있다. 만약 주기억장치에 적재되지 않은 논리주소가 참조될 경우, 처리기는 메모리 접근 오류(memory access fault)를 의미하는 인터럽트를 발생시킨다. ";}i:2;i:2078;}i:74;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2951;}i:75;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2951;}i:76;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:711:"운영체제는 인터럽트 당한 프로세스를 블록 상태에 두고 제어를 넘겨받는다. 나중에 그 프로세스의 수행을 재개하려면, 해당 논리주소를 포함한 프로세스의 블록을 주기억장치로 적재해야 한다. 이를 위해 운영체제는 디스크 입출력 요청을 하게 되며, 그 후 다른 프로세스에게 CPU를 넘겨 디스크 입출력이 진행되는 동안 수행될 수 있게 한다. 요청된 디스크 입출력이 끝나면 입출력 인터럽트가 발생하게 되고, 이를 통해 제어를 돌려받은 운영체제는 이전의 메모리 접근오류를 발생시켜 블록되었던 프로세스를 준비상태로 전환시킨다. ";}i:2;i:2953;}i:77;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3664;}i:78;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3664;}i:79;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:300:"프로세스가 일부 블록만을 적재한 채 수행되고, 적재되어 있지 않은 블록들로 인해 반복적으로 인터럽트 당할 것이 명백하다는 점에서, 이 기법의 효율성에 대한 의구심이 생길 수 있다. 이 기법에 함축된 두가지를 생각해보자.";}i:2;i:3666;}i:80;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3966;}i:81;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"ul";i:2;s:16:" class="extlist"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:3966;}i:82;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:3966;}i:83;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:3966;}i:84;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:1;i:3;s:5:"
  * ";}i:2;i:3966;}i:85;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:352:"1. 보다 많은 프로세스를 주기억장치에 유지할 수 있다. : 각 프로세스에 대해 일부 블록들만 적재하기 때문에 보다 많은 프로세스를 적재할 수 있다. 이로 인해 임의 시점에 하나 이상의 프로세스가 준비 상태에 있을 가능성이 커지므로, 처리기의 활용도가 높아진다.";}i:2;i:3971;}i:86;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:352:"1. 보다 많은 프로세스를 주기억장치에 유지할 수 있다. : 각 프로세스에 대해 일부 블록들만 적재하기 때문에 보다 많은 프로세스를 적재할 수 있다. 이로 인해 임의 시점에 하나 이상의 프로세스가 준비 상태에 있을 가능성이 커지므로, 처리기의 활용도가 높아진다.";}i:2;i:3971;}i:87;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:4323;}i:88;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:4323;}i:89;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:4323;}i:90;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:4323;}i:91;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:2;i:3;s:5:"
  * ";}i:2;i:4323;}i:92;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:303:"2. 주기억장치보다 큰 프로세스를 수행할 수 있다. : 프로그래밍에 있어 가장 근본적 제약점 중 하나가 제거된다. 이 기법을 적용하지 않을 경우, 프로그래머는 얼마나 많은 메모리 공간을 사용할 수 있는지 정확히 인식해야 한다. ";}i:2;i:4328;}i:93;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:303:"2. 주기억장치보다 큰 프로세스를 수행할 수 있다. : 프로그래밍에 있어 가장 근본적 제약점 중 하나가 제거된다. 이 기법을 적용하지 않을 경우, 프로그래머는 얼마나 많은 메모리 공간을 사용할 수 있는지 정확히 인식해야 한다. ";}i:2;i:4328;}i:94;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:4631;}i:95;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:4631;}i:96;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"ul";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:4631;}i:97;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:4;i:3;s:1:"
";}i:2;i:4631;}i:98;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4631;}i:99;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:298:"프로세스는 단지 주기억장치에서 수행할 수 있기 때문에, 주기억장치는 실기억장치라 불린다. 그러나 이제 프로그래머나 사용자는 디스크 상에 할당된 훨씬 큰 잠재적 메모리를 갖게 되었으며, 이를 가상 메모리라고 부른다. ";}i:2;i:4633;}i:100;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4932;}i:101;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:4932;}i:102;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:28:"지역성과 가상메모리";i:1;i:3;i:2;i:4932;}i:2;i:4932;}i:103;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:4932;}i:104;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4932;}i:105;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:583:"안정 상태에서는 처리기나 운영체제가 가능한 한 많은 프로세스를 직접 접근할 수 있게 하기 위해, 주기억장치 전체가 프로세스 블록들로 채워져 있게 된다. 따라서 운영체제가 한 블록을 반입하려면 다른 블록 하나를 반출해야 한다. 만약 특정 블록이 사용되기 직전에 반출되었다면 그 불록은 거의 곧바로 반입된다. 이게 과도하면 쓰레싱(thrashing)에 이르게 되어, 시스템은 명령어 수행이 아닌 블록 교체에 대부분의 시간을 소비하게 된다.";}i:2;i:4971;}i:106;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5554;}i:107;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:5557;}i:108;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:9:"페이징";i:1;i:3;i:2;i:5557;}i:2;i:5557;}i:109;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:5557;}i:110;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:5577;}i:111;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:26:"페이지 테이블 구조";i:1;i:4;i:2;i:5577;}i:2;i:5577;}i:112;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:5577;}i:113;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5577;}i:114;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:371:"메모리에서 한 워드를 읽을 때마다 페이지 번호와 오프셋으로 구성된 가상 주소(혹은 논리주소)가 물리주소(프레임 번호와 오프셋으로 구성)로 변환된다. 페이지테이블은 프로세스의 크기에 따라 그 크기가 달라지므로 레지스터에 넣을 수 없으며, 그런 이유로 메모리에 저장된다.";}i:2;i:5612;}i:115;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5983;}i:116;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:5985;}i:117;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:21:"역페이지테이블";i:1;i:4;i:2;i:5985;}i:2;i:5985;}i:118;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:5985;}i:119;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5985;}i:120;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:306:"지금까지 논의된 페이지테이블 타입의 단점은 그 크기가 가상주소공간의 크기에 비례한다는 점이다. 이런 관점에서 1-단계 혹은 다단계 페이지테이블 사용에 대한 대안적 접근은 역페이지테이블(inverted page table)을 사용하는 것이다.";}i:2;i:6015;}i:121;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6321;}i:122;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6321;}i:123;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1111:"이 접근 방법의 경우, 가상 주소 중 페이지번호 부분은 간단한 해시 함수(hash function)를 통해 특정 해시 값(hash value)으로 사상된다. 해시값은 역페이지 테이블에 대한 인덱스로 쓰이고, 역페이지테이블은 페이지테이블 항목들로 구성된다. 페이지테이블 항목이 가상메모리의 페이지 당 하나씩이 아니라 실기억장치의 페이지프레임당 하나씩 설정되기 때문에, 프로세스의 수나 지원되는 가상 페이지 수와 상관없이 주기억장치의 일정 부분만이 테이블 저장에 쓰인다. 하나 이상의 가상주소들이 동일한 해시테이블 항목으로 사상될 수 있기 때문에, 오버플로우를 관리하기 위한 연결(chaining) 기법이 사용되는데, 해싱 기법은 전형저긍로 한두 개의 항목 간에 짧은 체인을 만든다. 이러한 페이지테이블 구조를 명명할때 역의 의미를 포함시킨 것은 가상메모리의 페이지 번호가 아니라 프레임 번호로 페이지테이블 항목을 인덱싱하기 때문이다.";}i:2;i:6323;}i:124;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7434;}i:125;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"ul";i:2;s:16:" class="extlist"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:7434;}i:126;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:7434;}i:127;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:7434;}i:128;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:1;i:3;s:5:"
  * ";}i:2;i:7434;}i:129;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:68:"페이지 번호 : 가상주소의 페이지 번호를 나타낸다.";}i:2;i:7439;}i:130;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:68:"페이지 번호 : 가상주소의 페이지 번호를 나타낸다.";}i:2;i:7439;}i:131;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:7507;}i:132;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:7507;}i:133;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:7507;}i:134;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:7507;}i:135;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:2;i:3;s:5:"
  * ";}i:2;i:7507;}i:136;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:223:"프로세스 식별자 : 해당 페이지를 소유한 프로세스의 식별자로, 페이지 번호와 결합될 경우 해당 프로세스의 가상주소공간에 포함된 특정 페이지를 유일하게 식별한다.";}i:2;i:7512;}i:137;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:223:"프로세스 식별자 : 해당 페이지를 소유한 프로세스의 식별자로, 페이지 번호와 결합될 경우 해당 프로세스의 가상주소공간에 포함된 특정 페이지를 유일하게 식별한다.";}i:2;i:7512;}i:138;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:7735;}i:139;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:7735;}i:140;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:7735;}i:141;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:7735;}i:142;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:2;i:3;s:5:"
  * ";}i:2;i:7735;}i:143;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:166:"제어비트 : 유효(valid), 참조(reference), 변경(modify), 보호(protection), 잠금(locking)등의 정보를 나타내는 플래그 필드들이 포함된다.";}i:2;i:7740;}i:144;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:166:"제어비트 : 유효(valid), 참조(reference), 변경(modify), 보호(protection), 잠금(locking)등의 정보를 나타내는 플래그 필드들이 포함된다.";}i:2;i:7740;}i:145;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:7906;}i:146;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:7906;}i:147;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:7906;}i:148;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:7906;}i:149;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:2;i:3;s:5:"
  * ";}i:2;i:7906;}i:150;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:225:"체인포인터 : 연결된 항목이 없을 경우 null(별개의 비트로 표현될 수 있음), 그렇지 않을 경우 체인 상의 다음 항목을 가리키는 인덱스값(0과 2^m - 1 사이의 수)이 저장된다.";}i:2;i:7911;}i:151;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:225:"체인포인터 : 연결된 항목이 없을 경우 null(별개의 비트로 표현될 수 있음), 그렇지 않을 경우 체인 상의 다음 항목을 가리키는 인덱스값(0과 2^m - 1 사이의 수)이 저장된다.";}i:2;i:7911;}i:152;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:8136;}i:153;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:8136;}i:154;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"ul";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:8136;}i:155;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:4;i:3;s:1:"
";}i:2;i:8136;}i:156;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:8138;}i:157;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:33:"TLB(Translation Lookaside Buffer)";i:1;i:4;i:2;i:8138;}i:2;i:8138;}i:158;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:8138;}i:159;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8138;}i:160;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1673:"원칙적으로 모든 가상메모리 참조는 두 번의 물리메모리 참조를 수반하는데, 한 번은 해당 페이지테이블 항목을 참조하기 위함이고, 다른 한 번은 요구된 데이터를 접근하기 위함이다. 이런 가상메모리 방식은 두 배의 메모리 접근 시간을 갖게 한다. 이 문제를 해결하기 위해 대부분의 가상메모리 방식은 페이지테이블 항목들에 대한 특수 고속 캐시를 사용하는데 이를 Translation Lookaside Buffer라 부른다. 메모리 캐시가 가장 최근에 참조된 데이터나 명령어를 유지하는 것처럼, TLB는 가장 최근에 참조된 페이지테이블 항목들을 유지한다. 가상주소가 주어지면, 처음에 TLB를 살펴보아 그곳에 있으면 바로 프레임 번호가 추출되어 실주소가 구성된다. 만약 해당 페이지테이블 항목이 없으면 페이지 번호로 페이지테이블을 인덱싱하여 페이지테이블 항목을 참조한다. 페이지 테이블 항목의 존재비트가 1일 경우 해당 페이지가 주기억장치에 존재하므로, 페이지테이블 항목에 저장된 프레임 번호를 이용하여 실주소를 구성한다. TLB는 해당 페이지테이블 항목을 포함하도록 갱신된다. 페이지테이블 항목의 존재비트가 0일 경우, 해당 페이지가 주기억장치에 없을을 의미하므로 페이지폴트(page fault)라 불리는 메모리 접근 오류가 발생된다. 이 시점에서 하드웨어의 역할은 끝나고 운영체제가 호출되며, 운영체제는 필요한 페이지를 적재하고 페이지 테이블을 갱신한다.";}i:2;i:8180;}i:161;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:9853;}i:162;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:9853;}i:163;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:584:"TLB의 실제 구성과 관련된 추가적인 세부 사항들이 있다. TLB가 단지 페이지테이블의 일부 항목들만 포함하고 있기 때문에, 페이지 번호를 TLB의 인덱스로 사용할 수 없다. 대신에 TLB의 항목들은 페이지테이블 항목의 내용 뿐만 아니라 페이지 번호를 포함해야 한다. 그리고 처리기에는 특정 페이지 번호와 일치하는 TLB 항목이 있는지 결정하기 위해 다수의 TLB 항목들을 동시에 조사하는 하드웨어가 장착도니다. 이런 기법을 연관사상이라 한다.";}i:2;i:9855;}i:164;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:10439;}i:165;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:10439;}i:166;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:420:"최종적으로 가상메모리 기법은 주기억장치 캐시 시스템과 상호작용해야 한다. 가상주소는 일반적으로 페이지번호와 오프셋으로 구성된다. 태그와 나머지 부분으로 구성된 실주소가 생성되면 해당 워드를 포함한 블록이 캐시 상에 존재하는지 조사한다. 그렇지 않을 경우 해당 워드는 주기억장치로부터 읽히게 된다. ";}i:2;i:10441;}i:167;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:10861;}i:168;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:10863;}i:169;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:16:"페이지 크기";i:1;i:4;i:2;i:10863;}i:2;i:10863;}i:170;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:10863;}i:171;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:10863;}i:172;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:186:"큰 프로그램을 개발할 때 사용되는 현대의 프로그래밍 기술들은 프로세스 내에서의 참조 지역성을 감소시키고 있다. 예를 들면 다음과 같다";}i:2;i:10888;}i:173;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:11074;}i:174;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"ul";i:2;s:16:" class="extlist"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:11074;}i:175;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:11074;}i:176;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:11074;}i:177;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:1;i:3;s:5:"
  * ";}i:2;i:11074;}i:178;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:248:"객체 지향 기술은 다수의 작은 프로그램과 데이터 모듈을 사용하도록 조장함으로써, 상대적으로 잛은 시간 내에 이루어지는 참조들이 상대적으로 많은 객체들을 대상으로 분산되게 한다.";}i:2;i:11079;}i:179;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:248:"객체 지향 기술은 다수의 작은 프로그램과 데이터 모듈을 사용하도록 조장함으로써, 상대적으로 잛은 시간 내에 이루어지는 참조들이 상대적으로 많은 객체들을 대상으로 분산되게 한다.";}i:2;i:11079;}i:180;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:11327;}i:181;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:11327;}i:182;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:11327;}i:183;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:11327;}i:184;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:2;i:3;s:5:"
  * ";}i:2;i:11327;}i:185;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:134:"멀티 쓰레도 응용은 명령어 스트림이나 분산된 메모리 참조에 대해 급작스런 변화를 초래할 수 있다.";}i:2;i:11332;}i:186;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:134:"멀티 쓰레도 응용은 명령어 스트림이나 분산된 메모리 참조에 대해 급작스런 변화를 초래할 수 있다.";}i:2;i:11332;}i:187;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:11466;}i:188;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:11466;}i:189;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"ul";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:11466;}i:190;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:4;i:3;s:1:"
";}i:2;i:11466;}i:191;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:11466;}i:192;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:742:"TLB 크기가 고정되어 있다고 할 때 프로세스의 메모리 크기가 커지면, 지역성을 줄어들고 TLB에 대한 적중률 또한 떨어진다. 이러한 환경의 경우 TLB가 성능의 병목지점이 된다. TLB의 성능 개선 방법 중 하나는 보다 많은 항목을 가진 TLB를 사용하는 것이다. 그러나 TLB의 크기는 주기억장치 캐시나 명령어 수행 사이클 당 메모리 참조 회수 등 하드웨어 설계의 다른 측면들과 관련되어 있다. 요점은 주기억장치 용량이 급속히 커지듯 TLB 크기가 쉽게 커지지 못하단는 것이다. 다수의 페이지 크기가 지원될 경우 TLB를 효과적으로 사용하는데 필요한 유연성이 생긴다. ";}i:2;i:11468;}i:193;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:12210;}i:194;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:12212;}i:195;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:18:"세그먼테이션";i:1;i:3;i:2;i:12212;}i:2;i:12212;}i:196;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:12212;}i:197;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:12241;}i:198;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:25:"가상메모리의 유익";i:1;i:4;i:2;i:12241;}i:2;i:12241;}i:199;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:12241;}i:200;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:12241;}i:201;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:475:"세그먼테이션은 프로그래머가 메모리를 다수의 주소공간들(혹은 세그먼트들)의 조합으로 볼 수 있게 해 준다. 세그먼트들의 크기는 서로 다르게 동적으로 설정될 수 있으며, 메모리 참조는 (세그먼트 번호, 오프셋)의 주소 형식으로 이루어진다. 이러한 구성은 세그먼트로 분할되지 않은 주소공간에 비할 때, 프로그래머에게 다음과 같은 몇 가지 유익을 준다.";}i:2;i:12275;}i:202;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:12750;}i:203;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:12750;}i:204;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:811:"1. 점진적으로 커져가는 자료구조의 처리를 단순화시킨다. 만약 프로그래머가 특정 자료구조가 얼마나 커질 지 미리 알지 못한다면, 세그먼트 크기의 동적 설정이 허용되지 않는 한 그 크기를 추정해야 한다. 세그먼트 기반 가상메모리의 경우 자료구조에 특정 세그먼트를 배정하여, 필요에 따라 운영체제가 그 세그먼트를 확장,축소하게 할 수 있다. 확장할 세그먼트와 인접한 영역에 충분한 메모리 공간이 없을 때, 보다 큰 가용 공간으로 이동시켜, 해당 세그먼트를 확장할 수 있다. 그런 가용공간이 없다면 일단 해당 세그먼트를 스왑-아웃시켜 두었다가 나중에 확장된 형태의 세그먼트를 스왑인 시킬 수 있다.";}i:2;i:12752;}i:205;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:13563;}i:206;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:13563;}i:207;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:225:"2. 프로그램 전체에 대한 재연결이나 재적재없이, 세그먼트 각각을 독립적으로 변경하거나 재컴파일 할 수 있다. 이는 다수의 세그먼트를 사용함으로써 가능해진 것이다.";}i:2;i:13565;}i:208;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:13790;}i:209;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:13790;}i:210;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:226:"3. 프로세스들이 세그먼트를 공유할 수 있다. 프로그래머는 유틸리티 코드나 유용한 데이터 테이블 등을 한 세그먼트로 설정하여 다른 프로세스들이 참조하게 할 수 있다.";}i:2;i:13792;}i:211;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:14018;}i:212;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:14018;}i:213;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:40:"4. 세그먼트를 보호할 수 있다.";}i:2;i:14020;}i:214;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:14060;}i:215;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:14062;}i:216;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:6:"구성";i:1;i:4;i:2;i:14062;}i:2;i:14062;}i:217;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:14062;}i:218;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:14062;}i:219;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:295:"세그먼트 테이블 항목의 또 다른 제어 비트로 변경 비트가 있는데 이는 해당 세그먼트가 적재된 이후 그 내용이 변경되었는지를 나타낸다. 세그먼트 교체 시 변겨오딘 세그먼트만 구별하여 디스크에 기록할 수 있게 해준다.";}i:2;i:14075;}i:220;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:14370;}i:221;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:14372;}i:222;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:41:"페이징과 세그먼테이션의 결합";i:1;i:3;i:2;i:14372;}i:2;i:14372;}i:223;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:14372;}i:224;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:14424;}i:225;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:32:"8.2 운영체제 소프트웨어";i:1;i:2;i:2;i:14424;}i:2;i:14424;}i:226;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:14424;}i:227;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:14424;}i:228;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:103:"운영체제 메모리관리 부분의 설계는 다음 세 가지 기본 선택 영역에 의존한다";}i:2;i:14469;}i:229;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:14572;}i:230;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"ul";i:2;s:16:" class="extlist"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:14572;}i:231;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:14572;}i:232;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:14572;}i:233;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:1;i:3;s:5:"
  * ";}i:2;i:14572;}i:234;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:45:"가상메모리 기술을 사용할지 여부";}i:2;i:14577;}i:235;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:45:"가상메모리 기술을 사용할지 여부";}i:2;i:14577;}i:236;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:14622;}i:237;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:14622;}i:238;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:14622;}i:239;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:14622;}i:240;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:2;i:3;s:5:"
  * ";}i:2;i:14622;}i:241;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:83:"페이징, 세그먼테이션, 혹은 세그먼테이션/페이징 결합의 사용";}i:2;i:14627;}i:242;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:83:"페이징, 세그먼테이션, 혹은 세그먼테이션/페이징 결합의 사용";}i:2;i:14627;}i:243;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:14710;}i:244;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:14710;}i:245;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:14710;}i:246;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:14710;}i:247;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:2;i:3;s:5:"
  * ";}i:2;i:14710;}i:248;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:45:"메모리 관리와 관련된 알고리즘들";}i:2;i:14715;}i:249;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:45:"메모리 관리와 관련된 알고리즘들";}i:2;i:14715;}i:250;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:14760;}i:251;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:14760;}i:252;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"ul";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:14760;}i:253;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:4;i:3;s:1:"
";}i:2;i:14760;}i:254;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:14762;}i:255;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:12:"교체정책";i:1;i:3;i:2;i:14762;}i:2;i:14762;}i:256;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:14762;}i:257;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"ul";i:2;s:16:" class="extlist"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:14784;}i:258;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:14784;}i:259;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:14784;}i:260;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:1;i:3;s:5:"
  * ";}i:2;i:14784;}i:261;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:83:"활동 중인 각 프로세스에 얼마나 많은 프레임을 할당할 것인가";}i:2;i:14789;}i:262;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:83:"활동 중인 각 프로세스에 얼마나 많은 프레임을 할당할 것인가";}i:2;i:14789;}i:263;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:14872;}i:264;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:14872;}i:265;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:14872;}i:266;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:14872;}i:267;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:2;i:3;s:5:"
  * ";}i:2;i:14872;}i:268;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:231:"교체 페이지로 고려될 대상을, 페이지폴트를 발생시켜 페이지를 반입하게 한 프로세스의 페이지들로 한정할 것인가, 아니면 주기억장치 상의 모든 프레임으로 확대할 것인가";}i:2;i:14877;}i:269;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:231:"교체 페이지로 고려될 대상을, 페이지폴트를 발생시켜 페이지를 반입하게 한 프로세스의 페이지들로 한정할 것인가, 아니면 주기억장치 상의 모든 프레임으로 확대할 것인가";}i:2;i:14877;}i:270;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:15108;}i:271;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:15108;}i:272;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:15108;}i:273;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:15108;}i:274;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:2;i:3;s:5:"
  * ";}i:2;i:15108;}i:275;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:93:"고려 대상 페이지들 중에 어떤 페이지를 교체 대상으로 선택할 것인가";}i:2;i:15113;}i:276;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:93:"고려 대상 페이지들 중에 어떤 페이지를 교체 대상으로 선택할 것인가";}i:2;i:15113;}i:277;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:15206;}i:278;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:15206;}i:279;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"ul";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:15206;}i:280;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:4;i:3;s:1:"
";}i:2;i:15206;}i:281;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:15206;}i:282;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:180:"처음 두 개념은 '적재집합 관리'라 명명되어 다음 소절에서 다루고, 세 번째 개념은 교체정책이라는 용어를 사용하여 본 절에서 다룬다.";}i:2;i:15208;}i:283;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:15388;}i:284;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:15390;}i:285;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:31:"프레임 잠금(Frame Locking)";i:1;i:4;i:2;i:15390;}i:2;i:15390;}i:286;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:15390;}i:287;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:15390;}i:288;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:307:"교체 알고리즘들을 살펴보기 이전에 그 제약조건 중 하나인 프레임 잠금 개념이다. 해당 프레임에 적재된 페이지가 교체되지 않도록 표시해 두는 것이다. 입출력 버퍼, 시간임계영역 등도 주기억장치의 프레임들에 잠가 둘 수 있다. ";}i:2;i:15430;}i:289;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:15737;}i:290;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:15739;}i:291;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:19:"기본 알고리즘";i:1;i:4;i:2;i:15739;}i:2;i:15739;}i:292;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:15739;}i:293;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"ul";i:2;s:16:" class="extlist"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:15767;}i:294;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:15767;}i:295;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:15767;}i:296;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:1;i:3;s:5:"
  * ";}i:2;i:15767;}i:297;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"최적";}i:2;i:15772;}i:298;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:6:"최적";}i:2;i:15772;}i:299;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:15778;}i:300;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:15778;}i:301;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:15778;}i:302;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:15778;}i:303;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:2;i:3;s:5:"
  * ";}i:2;i:15778;}i:304;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:"LRU(Least Recently Used)";}i:2;i:15783;}i:305;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:24:"LRU(Least Recently Used)";}i:2;i:15783;}i:306;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:15807;}i:307;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:15807;}i:308;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:15807;}i:309;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:15807;}i:310;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:2;i:3;s:5:"
  * ";}i:2;i:15807;}i:311;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:"FIFO(First-In-First-Out)";}i:2;i:15812;}i:312;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:24:"FIFO(First-In-First-Out)";}i:2;i:15812;}i:313;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:15836;}i:314;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:15836;}i:315;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:15836;}i:316;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:15836;}i:317;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:2;i:3;s:5:"
  * ";}i:2;i:15836;}i:318;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:"클록(Clock)";}i:2;i:15841;}i:319;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:13:"클록(Clock)";}i:2;i:15841;}i:320;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:15854;}i:321;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:15854;}i:322;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"ul";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:15854;}i:323;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:4;i:3;s:1:"
";}i:2;i:15854;}i:324;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:15854;}i:325;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:893:"최적 정책은 미래에 참조될 때까지의 시간이 가장 긴 페이지를 교체 대상으로 선택한다. 실제 구현 가능한 알고리즘들을 평가하는 기준이 된다. LRU 정책은 가장 오랜 동안 참조되지 않은 주기억장치상의 페이지를 교체한다. FIFO 정책은 프로세스에 할당된 페이지프레임들을 순환버퍼처럼 다루어, 라운드로빈 스타일로 프레임 상의 페이지들을 제거한다. 가장 오래 전에 반입된 페이지는 이제 사용되지 않을 것이라는 논리인데, 이는 종종 좋지 않은 결과를 초래하는데, 많은 경우에 프로그램 수행 과정 내내 집중적으로 이용되는 코드나 데이터들이 존재하기 때문이다. 오버헤드가 적은 반면 LRU의 성능에 근접한 알고리즘으로 클록 정책(clock policy)와 같은 변형을 들 수 있다.";}i:2;i:15856;}i:326;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:16749;}i:327;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:16749;}i:328;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:708:"클록 정책의 가장 단순한 형태는 각 프레임에 대해 사용비트(use bit)라 불리는 한 비트를 연계시킨다. 페이지 폴트로 인해 어떤 페이지가 메모리 프레임에 처음 반입될 때, 그 프레임의 사용비트는 1로 설정된다. 하나의 포인터가 있어 첫 교체 후보를 가리킨다. 특정 페이지가 교체될 경우, 포인터는 그 다음 페이지를 가리키게 된다. 교체할 페이지를 찾을 때 운영체제는 포인터가 가리키는 프레임부터 시작하여 순서대로 점검하며 사용비트가 0인 프레임을 찾는데 1인 프레임을 만나면 그 값을 0으로 바꾼 후 다음 프레임으로 진행한다.";}i:2;i:16751;}i:329;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:17459;}i:330;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:17459;}i:331;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:195:"요약하면, 페이지 교체 알고리즘은 반입된 후 변경되지 않고 최근에 참조되지 않은 페이지를 찾아 버퍼 상의 모든 페이지들을 훑어가며 순환한다. ";}i:2;i:17461;}i:332;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:17656;}i:333;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:17658;}i:334;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:19:"페이지 버퍼링";i:1;i:4;i:2;i:17658;}i:2;i:17658;}i:335;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:17658;}i:336;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:17658;}i:337;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:832:"LRU와 클록정책은 복잡성과 오버헤드를 갖고 있다. 페이지 버퍼링은 페이지 성능을 향상시키는 동시에 단순한 페이지 교체정책을 허용하는 흥미있는 전략으로 VAX VMS 접근 방법이 그 대표적 사례다. 단순 FIFO정책을 적용해 교체 대상을 선정하지만, 선정된 페이지를 바로 교체하지 않고 그 페이지가 변경되지 않은 페이지인 경우 가용 페이지 리스트에, 변경된 페이지인 경우 변경 페이지 리스트에 연결시켜 관리한다. 페이지가 주기억장치 상에서 물리적으로 이동되는 것이 아니라, 해당 페이지에 대한 사상정보가 페이지테이블 항목으로부터 제거되고 관련 정보가 가용페이지 리스트나 변경페이지 리스트에 연결된다는 것이다.";}i:2;i:17686;}i:338;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:18518;}i:339;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:18518;}i:340;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:356:"이 전략의 주요 측면은 교체되는 페이지가 메모리에 남아있다는 것이다. 따라서 어떤 프로세스가 그런 페이지를 참조할 경우, 적은 비용으로 그 페이지를 해당 프로세스의 적재집합에 복귀시킬 수 있다. 사실상, 가용/변경페이지 리스트는 페이지들의 캐시 역할을 한다.";}i:2;i:18520;}i:341;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:18876;}i:342;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:18878;}i:343;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:29:"교체정책과 캐시 크기";i:1;i:4;i:2;i:18878;}i:2;i:18878;}i:344;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:18878;}i:345;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:18878;}i:346;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:200:"페이지버퍼링과 유사한 전략을 사용하는 시스템에서 페이지 교체정책을 페이지 버퍼 상에서 배치정책으로 보완함으로써 캐시 성능을 개선할 수 있다.";}i:2;i:18916;}i:347;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:19116;}i:348;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:19118;}i:349;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:19:"적재집합 관리";i:1;i:3;i:2;i:19118;}i:2;i:19118;}i:350;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:19118;}i:351;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:19148;}i:352;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:22:"적재집합의 크기";i:1;i:4;i:2;i:19148;}i:2;i:19148;}i:353;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:19148;}i:354;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:19148;}i:355;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:328:"페이징 기반 가상 메모리의 경우, 수행을 위해 프로세스의 페이지 모두를 주기억장치에 적재하는 것은 불필요하며 가능치 않을 수도 있다. 따라서 운영체제는 얼마나 많은 페이지를 반입할지를 결정해야 한다. 몇가지 인자가 다음과 같이 작용한다.";}i:2;i:19179;}i:356;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:19508;}i:357;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"ul";i:2;s:16:" class="extlist"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:19508;}i:358;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:19508;}i:359;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:19508;}i:360;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:1;i:3;s:5:"
  * ";}i:2;i:19508;}i:361;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:353:"한 프로세스에게 할당된 메모리의 양이 적을수록, 임의 시점에 주기억장치에 존재 가능한 프로세스가 많아진다. 이는 특정 시점에 적어도 하나 이상의 준비 상태 프로세스가 존재할 가능성을 높여, 운영체제가 스와핑으로 인한 시간적 손실을 절감할 수 있게 해 준다.";}i:2;i:19513;}i:362;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:353:"한 프로세스에게 할당된 메모리의 양이 적을수록, 임의 시점에 주기억장치에 존재 가능한 프로세스가 많아진다. 이는 특정 시점에 적어도 하나 이상의 준비 상태 프로세스가 존재할 가능성을 높여, 운영체제가 스와핑으로 인한 시간적 손실을 절감할 수 있게 해 준다.";}i:2;i:19513;}i:363;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:19866;}i:364;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:19866;}i:365;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:19866;}i:366;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:19866;}i:367;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:2;i:3;s:5:"
  * ";}i:2;i:19866;}i:368;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:199:"주기억장치 상에 적재된 한 프로세스의 페이지 수가 상대적으로 작으면, 지역성의 원리에도 불구하고 페이지폴트 발생률이 오히려 더 높아질 것이다.";}i:2;i:19871;}i:369;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:199:"주기억장치 상에 적재된 한 프로세스의 페이지 수가 상대적으로 작으면, 지역성의 원리에도 불구하고 페이지폴트 발생률이 오히려 더 높아질 것이다.";}i:2;i:19871;}i:370;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:20070;}i:371;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:20070;}i:372;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:20070;}i:373;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:20070;}i:374;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:2;i:3;s:5:"
  * ";}i:2;i:20070;}i:375;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:239:"적재된 페이지 수가 어느 정도 이상이면, 해당 프로세스에 대해 주기억장치를 추가할당하더라도 지역성의 원리에 의해 그 프로세스의 페이지폴트 발생률에 큰 영향이 없을 것이다.";}i:2;i:20075;}i:376;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:239:"적재된 페이지 수가 어느 정도 이상이면, 해당 프로세스에 대해 주기억장치를 추가할당하더라도 지역성의 원리에 의해 그 프로세스의 페이지폴트 발생률에 큰 영향이 없을 것이다.";}i:2;i:20075;}i:377;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:20314;}i:378;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:20314;}i:379;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"ul";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:20314;}i:380;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:4;i:3;s:1:"
";}i:2;i:20314;}i:381;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:20314;}i:382;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:509:"고정할당(fixed-allocation) 정책은 각 프로세스에게 고정 개수의 페이지프레임을 주고 수행시킨다. 프레임 수는 초기적재시점(프로세스 생성시점)에 결정되는데, 프로세스이 타입이나 프로그래머 혹은 시스템 관리자의 지침 등이 결정의 근거가 된다. 고정할당 정책에서는 프로세스 수행 중에 페이지폴트가 발생할 경우 그 프로세스에 할당한 페이지 중 하나가 새로운 페이지로 교체된다.";}i:2;i:20316;}i:383;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:20825;}i:384;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:20825;}i:385;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:535:"또 다른 하나인 가변할당(variable-allocation) 정책은 프로세스 생존 기간 동안 각 프로세스에 할당된 페이지프레임 수의 변경을 허용한다. 지속적으로 높은 수준의 페이지폴트 발생률을 보이고 있는 프로세스에게 페이지프레임을 추가 할당하여 페이지폴트 발생률을 줄이고, 현저히 낮은 페이지폴트 발생률을 보이는 프로세스로부터 페이지 폴트 발생률이 그리 크게 증가되지 않을 정도로 할당량을 줄인다. ";}i:2;i:20827;}i:386;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:21362;}i:387;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:21364;}i:388;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:13:"교체 범위";i:1;i:4;i:2;i:21364;}i:2;i:21364;}i:389;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:21364;}i:390;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:21364;}i:391;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:791:"교체 전략의 범위(scope)는 전역과 지역으로 분류될 수 있다. 두 타입의 정책 모두 가용 페이지프레임이 없을 때 발생된 페이지폴트에 의해 활성화된다. 지역교체 정책(local replacement policy)은 페이지폴트를 발생시킨 프로세스의 적재 페이지들 중에서 교체 대상 페이지를 선택한다. 전역교체 정책(global replacement policy)은 어떤 프로세스가 소유한 것인지에 상관없이 주기억장치 상의 잠기지 않은 모든 페이지를 교체 후보로 고려한다. 지역 정책이 분석하기 쉽겠지만 전역 정책에 비해 보다 효과적이라는 확실한 증거는 없으며, 오히려 전역 정책이 구현의 용이함이나 최소 오버헤드 대문에 매력적이다.";}i:2;i:21386;}i:392;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:22177;}i:393;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:22177;}i:394;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:575:"교체범위와 적재집합의 크게 간에는 관련성이 있다. 고정된 적재집합은 지역교체 정책을 함축하는데, 이는 적재집합의 크기를 고정하려면 주기억장치에서 제거되는 페이지를 동일 프로세스의 또 다른 페이지로 교체해야 하기 때문이다. 이에 반해 가변할당 정책은 명확히 전역 정책을 적용하며, 한 프로세스의 페이지를 다른 프로세스의 페이지로 교체할 때 후자의 할당량은 한 페이지 늘어나고 전자의 할당량은 한 페이지 줄어든다.";}i:2;i:22179;}i:395;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:22755;}i:396;a:3:{i:0;s:10:"table_open";i:1;a:3:{i:0;i:3;i:1;i:3;i:2;i:22756;}i:2;i:22755;}i:397;a:3:{i:0;s:15:"tablethead_open";i:1;a:0:{}i:2;i:22755;}i:398;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:22755;}i:399;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:22755;}i:400;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:22757;}i:401;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:22758;}i:402;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:22758;}i:403;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:"지역 교체";}i:2;i:22759;}i:404;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:22772;}i:405;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:22772;}i:406;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:"전역 교체";}i:2;i:22773;}i:407;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:22786;}i:408;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:22787;}i:409;a:3:{i:0;s:16:"tablethead_close";i:1;a:0:{}i:2;i:22787;}i:410;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:22787;}i:411;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:22787;}i:412;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:"고정할당 ";}i:2;i:22789;}i:413;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:22802;}i:414;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:22802;}i:415;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:52:" 프로세스에게 할당된 프레임 수 고정. ";}i:2;i:22803;}i:416;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:22855;}i:417;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:83:"해당 프로세스에게 할당된 프레임 중에서 교체될 페이지 선택 ";}i:2;i:22858;}i:418;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:22941;}i:419;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:22941;}i:420;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:" 불가";}i:2;i:22942;}i:421;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:22949;}i:422;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:22950;}i:423;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:22950;}i:424;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:22950;}i:425;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:" 가변 할당 ";}i:2;i:22952;}i:426;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:22967;}i:427;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:22967;}i:428;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:123:" 프로세스에게 할당된 프레임 수는 프로세스의 작업집합을 유지하기 위해 수시로 변경 가능 ";}i:2;i:22968;}i:429;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:23091;}i:430;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:83:"해당 프로세스에게 할당된 프레임 중에서 교체될 페이지 선택 ";}i:2;i:23094;}i:431;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:23177;}i:432;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:23177;}i:433;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:134:" 주기억장치의 모든 프레임 중에 교체될 페이지 선택. 이로 인해 프로세스의 적재집합 크기가 변경됨";}i:2;i:23178;}i:434;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:23312;}i:435;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:23313;}i:436;a:3:{i:0;s:11:"table_close";i:1;a:1:{i:0;i:23313;}i:2;i:23313;}i:437;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:23315;}i:438;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:27:"가변할당, 전역 범위";i:1;i:4;i:2;i:23315;}i:2;i:23315;}i:439;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:23315;}i:440;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:23315;}i:441;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:425:"이는 많은 운영체제들에 의해 채택된 결합으로 가장 구현하기 쉽다. 임의 시점에 주기억장치에 다수의 프로세스들이 존재하며, 각 프로세스에게 어느 정도의 페이지 프레임들이 할당되어 있다. 페이지 폴트를 발생시키고 있는 프로세스는 그 크기가 점진적으로 증가되고, 전체적으로 시스템의 페이지폴트를 줄이려 한다.";}i:2;i:23351;}i:442;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:23776;}i:443;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:23776;}i:444;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:261:"이 접근방법의 어려움은 교체 대상 선정이다. 페이지버퍼링을 이용하면 페이지가 덮여 쓰이기 전에 참조되면 다시 회수될 수 있기 때문에, 어떤 페이지가 교체 대상으로 선택되는지가 덜 중요하다.";}i:2;i:23778;}i:445;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:24039;}i:446;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:24041;}i:447;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:26:"가변할당, 지역범위";i:1;i:4;i:2;i:24041;}i:2;i:24041;}i:448;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:24041;}i:449;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:24041;}i:450;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:100:"이 전략은 전역범위 전략의 문제점을 극복하기 위해 다음 방식을 사용한다.";}i:2;i:24076;}i:451;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:24176;}i:452;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"ul";i:2;s:16:" class="extlist"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:24176;}i:453;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:24176;}i:454;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:24176;}i:455;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:1;i:3;s:5:"
  * ";}i:2;i:24176;}i:456;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:228:"1. 새로운 프로세스가 주기억장치로 적재될 때, 응용의 타입이나 프로그램의 요구, 혹은 또 다른 척도들에 근거하여 어느 정도의 페이지프레임들을 적재집합으로 할당한다.";}i:2;i:24181;}i:457;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:228:"1. 새로운 프로세스가 주기억장치로 적재될 때, 응용의 타입이나 프로그램의 요구, 혹은 또 다른 척도들에 근거하여 어느 정도의 페이지프레임들을 적재집합으로 할당한다.";}i:2;i:24181;}i:458;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:24409;}i:459;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:24409;}i:460;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:24409;}i:461;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:24409;}i:462;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:2;i:3;s:5:"
  * ";}i:2;i:24409;}i:463;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:138:"2. 페이지폴트가 발생할 경우, 그것을 발생시킨 프로세스의 적재집합 중에서 교체할 페이지를 선택한다.";}i:2;i:24414;}i:464;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:138:"2. 페이지폴트가 발생할 경우, 그것을 발생시킨 프로세스의 적재집합 중에서 교체할 페이지를 선택한다.";}i:2;i:24414;}i:465;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:24552;}i:466;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:24552;}i:467;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:24552;}i:468;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:24552;}i:469;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:2;i:3;s:5:"
  * ";}i:2;i:24552;}i:470;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:140:"3. 수시로 프로세스에 대한 할당량을 재평가하고 전체적 성능 개선이라는 측면에서 할당량을 증감시킨다.";}i:2;i:24557;}i:471;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:140:"3. 수시로 프로세스에 대한 할당량을 재평가하고 전체적 성능 개선이라는 측면에서 할당량을 증감시킨다.";}i:2;i:24557;}i:472;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:24697;}i:473;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:24697;}i:474;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"ul";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:24697;}i:475;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:4;i:3;s:1:"
";}i:2;i:24697;}i:476;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:24697;}i:477;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:500:"가변 할당/지역범위 전략의 주요소는 적재집합의 크기와 그 변경시점을 결정하는데 사용되는 규칙이다. 그중 하나가 작업집합 전략(working setstrategy)이다. 특정 프로세스에 대해 가상시점 t와 파라미터 d로 정의된 작업집합 W(t,d)는 그 프로세스가 시점 t 직전에 가상시간 d동안 참조한 페이지들의 집합이다. 작업집합 개념은 적재집합의 크기를 결정하는 전략의 지침이 될 수 있다.";}i:2;i:24699;}i:478;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:25200;}i:479;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"ul";i:2;s:16:" class="extlist"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:25200;}i:480;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:25200;}i:481;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:25200;}i:482;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:1;i:3;s:5:"
  * ";}i:2;i:25200;}i:483;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:58:"1. 각 프로세스의 작업집합을 모니터링한다.";}i:2;i:25205;}i:484;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:58:"1. 각 프로세스의 작업집합을 모니터링한다.";}i:2;i:25205;}i:485;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:25263;}i:486;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:25263;}i:487;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:25263;}i:488;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:25263;}i:489;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:2;i:3;s:5:"
  * ";}i:2;i:25263;}i:490;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:152:"2. 주기적으로 프로세스의 적재집합 중 작업집합에 있지 않은 페이지들을 제거한다. 이는 기본적으로 LRU 정책이다.";}i:2;i:25268;}i:491;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:152:"2. 주기적으로 프로세스의 적재집합 중 작업집합에 있지 않은 페이지들을 제거한다. 이는 기본적으로 LRU 정책이다.";}i:2;i:25268;}i:492;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:25420;}i:493;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:25420;}i:494;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:25420;}i:495;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:25420;}i:496;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:2;i:3;s:5:"
  * ";}i:2;i:25420;}i:497;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:84:"3. 프로세스는 주기억장치에 그 작업집합에 있을대만 수행된다.";}i:2;i:25425;}i:498;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:84:"3. 프로세스는 주기억장치에 그 작업집합에 있을대만 수행된다.";}i:2;i:25425;}i:499;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:25509;}i:500;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:25509;}i:501;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"ul";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:25509;}i:502;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:4;i:3;s:1:"
";}i:2;i:25509;}i:503;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:25509;}i:504;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:486:"작업집합을 직접 모니터링하지 않고, 페이지폴트 발생률을 모니터링 함으로써 유사한 결과를 얻을 수 있다. 만약 한 프로세스의 페이지폴트 발생률이 최소 임계치보다 낮으면, 해당 프로세스에게 해를 끼치지 않고 적재집합을 줄일 수 있어 시스템 전체적 이득을 얻을 수 있다. 한 프로세스의 폴트 발생률이 최대 임계치보다 높으면 적재크기를 증가시켜 유익을 준다.";}i:2;i:25511;}i:505;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:25997;}i:506;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:25997;}i:507;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:490:"이 전략을 따르는 알고리즘 중 하나가 PFF(Page Fault Frequency)이다. PFF는 새로운 지역성으로 전이해 가는 과도 기간 동안 효과적으로 동작하지 않는다는 단점이 있다. 지역성간 전이현상을 적은 오버헤드로 다루어보려는 접근 방법 중 하나가 VSWS(Variable-interval Sampled Working Set) 정책이다. VSWS정책은 경과된 가상시간에 근거한 생플링들을 통해 프로세스의 작업집합을 평가한다.";}i:2;i:25999;}i:508;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:26489;}i:509;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:26491;}i:510;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:32:"클리닝정책(Cleaning Policy)";i:1;i:3;i:2;i:26491;}i:2;i:26491;}i:511;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:26491;}i:512;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:26491;}i:513;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:315:"요구클리닝(demand cleaning)에서 각 페이지는 그것이 교체 대상으로 선택되었을 때만 보조기억장치에 기록된다. 선 클리닝(precleaning)은 해당 페이지프레임이 요구되기 전에 변경된 페이지들을 기록함으로써 그들이 일괄 기록될 수 있게 한다. ";}i:2;i:26534;}i:514;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:26849;}i:515;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:26849;}i:516;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:568:"보다 나은 접근방법은 페이지버퍼링을 접목하여 다음과 같은 정책을 적용하는 것이다. 교체 가능한 페이지들만 기록하고, 클리닝과 교체를 분리시킨다. 페이지버퍼링에 있어 교체된 페이지들을 변경 리스트와 비변경 리스트로 옮긴다. 이와 같이 페이지들을 관리함으로써 비변경리스트 상의 페이지는, 차몾될 경우 재활용되고, 해당 프레임이 다른 페이지에 할당될 경우 기록 작업 없이 바로 페이지 반입에 이용될 수 있게 된다.";}i:2;i:26851;}i:517;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:27419;}i:518;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:27421;}i:519;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:26:"부하제어(Load Control)";i:1;i:3;i:2;i:27421;}i:2;i:27421;}i:520;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:27421;}i:521;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:27421;}i:522;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:218:"부하제어는 주기억장치에 적재될 프로세스 수(멀티프로그래밍 수준)를 결정하는 것과 관련된다. 부하제어 정책은 메모리를 효과적으로 관리하는데 매우 중요하다. ";}i:2;i:27458;}i:523;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:27676;}i:524;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:27678;}i:525;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:28:"멀티프로그래밍 수준";i:1;i:4;i:2;i:27678;}i:2;i:27678;}i:526;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:27678;}i:527;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:27678;}i:528;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:178:"작업집합이나 PFF 알고리즘은 부하제어를 함축적으로 포함하고 있어, 단지 적재집합이 충분히 큰 프로세스들만 수행되도록 허용한다. ";}i:2;i:27715;}i:529;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:27893;}i:530;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:27895;}i:531;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:40:"프로세스 보류 (Process Suspension)";i:1;i:4;i:2;i:27895;}i:2;i:27895;}i:532;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:27895;}i:533;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:27895;}i:534;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:239:"멀티 프로그램으이 차수를 감소시키려면, 현재 적재된 프로세스들 중 하나 이상을 보류(스왑-아웃)시켜야 한다. 보류시킬 프로세스 선택과 관련하여 다음 여섯 가지 가능성이 있다.";}i:2;i:27944;}i:535;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:28183;}i:536;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"ul";i:2;s:16:" class="extlist"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:28183;}i:537;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:28183;}i:538;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:28183;}i:539;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:1;i:3;s:5:"
  * ";}i:2;i:28183;}i:540;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:32:"최저 우선순위 프로세스";}i:2;i:28188;}i:541;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:32:"최저 우선순위 프로세스";}i:2;i:28188;}i:542;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:28220;}i:543;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:28220;}i:544;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:28220;}i:545;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:28220;}i:546;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:2;i:3;s:5:"
  * ";}i:2;i:28220;}i:547;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:26:"폴트 발생 프로세스";}i:2;i:28225;}i:548;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:26:"폴트 발생 프로세스";}i:2;i:28225;}i:549;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:28251;}i:550;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:28251;}i:551;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:28251;}i:552;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:28251;}i:553;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:2;i:3;s:5:"
  * ";}i:2;i:28251;}i:554;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:42:"가장 최근에 활성화된 프로세스";}i:2;i:28256;}i:555;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:42:"가장 최근에 활성화된 프로세스";}i:2;i:28256;}i:556;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:28298;}i:557;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:28298;}i:558;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:28298;}i:559;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:28298;}i:560;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:2;i:3;s:5:"
  * ";}i:2;i:28298;}i:561;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:42:"최소 적재집합을 가진 프로세스";}i:2;i:28303;}i:562;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:42:"최소 적재집합을 가진 프로세스";}i:2;i:28303;}i:563;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:28345;}i:564;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:28345;}i:565;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:28345;}i:566;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:28345;}i:567;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:2;i:3;s:5:"
  * ";}i:2;i:28345;}i:568;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:"가장 큰 프로세스";}i:2;i:28350;}i:569;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:23:"가장 큰 프로세스";}i:2;i:28350;}i:570;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:28373;}i:571;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:28373;}i:572;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:28373;}i:573;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:28373;}i:574;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:2;i:3;s:5:"
  * ";}i:2;i:28373;}i:575;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:50:"잔여 수행 윈도우가 가장 큰 프로세스";}i:2;i:28378;}i:576;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:50:"잔여 수행 윈도우가 가장 큰 프로세스";}i:2;i:28378;}i:577;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:28428;}i:578;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:28428;}i:579;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"ul";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:28428;}i:580;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:4;i:3;s:1:"
";}i:2;i:28428;}i:581;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:28428;}i:582;a:3:{i:0;s:12:"document_end";i:1;a:0:{}i:2;i:28428;}}