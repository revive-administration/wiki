a:139:{i:0;a:3:{i:0;s:14:"document_start";i:1;a:0:{}i:2;i:0;}i:1;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:34:"05 MVC - 모델, 뷰, 컨트롤러";i:1;i:1;i:2;i:1;}i:2;i:1;}i:2;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:1;}i:2;i:1;}i:3;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1;}i:4;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:274:"AngularJS도 자바스크립트 MVC 프레임워크 중 하나다. 하지만 AngularJS는 Smalltalk-80 언어부터 시작된 전통적인 MVC 패턴을 구현하지 않고 MVVM(Model-View-View-Model)과 비슷하지만 독자적인 방식으로 MVC 패턴을 구현했다. ";}i:2;i:50;}i:5;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:325;}i:6;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:325;}i:7;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:6:"모델";i:1;i:2;i:2;i:325;}i:2;i:325;}i:8;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:325;}i:9;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:325;}i:10;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:639:"AngularJS에서는 사용자 정보, 도서 정보, 북마크 정보처럼 하나의 Entity나 여러 개의 엔티티가 모델이 된다. 하지만 AngularJS는 모델을 정의하는 데 있어서 다른 자바스크립트 프레임워크와 다른 점이 있다. ExtJS나 BackboneJS에서는 기본 모델 클래스가 있고 이를 개별 모델 클래스가 상속받는 구조인 반면 AngularJS에서는 별다른 상속 없이 순수 자바스크립트 객체가 모델이 된다는 것이다. 하지만 중요한 점은 이러한 모델 객체는 AngularJS의 $scope 객체로부터 접근할 수 있어야 한다는 것이다. ";}i:2;i:344;}i:11;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:983;}i:12;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:985;}i:13;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:3:"뷰";i:1;i:2;i:2;i:985;}i:2;i:985;}i:14;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:985;}i:15;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:985;}i:16;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:93:"AngularJS에서 뷰는 문서 객체 모델(Document Object Model)이다. 브라우저에서 ";}i:2;i:1001;}i:17;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTML";}i:2;i:1094;}i:18;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:162:" 문서를 읽어서 DOM을 생성하는데 AngularJS에서는 이 DOM이 뷰가 되는 것이다. 템플릿과 뷰를 혼동할 수 있는데 AngularJS에서는 ";}i:2;i:1098;}i:19;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTML";}i:2;i:1260;}i:20;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:136:" 문서가 템플릿이고 이 템플릿을 AngularJS가 읽어서 뷰를 생성한다. 뷰를 생성하는 과정은 다음과 같다. ";}i:2;i:1264;}i:21;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1401;}i:22;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"ul";i:2;s:16:" class="extlist"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:1401;}i:23;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:1401;}i:24;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:1401;}i:25;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:1;i:3;s:5:"
  * ";}i:2;i:1401;}i:26;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:60:"1. HTML로 작성한 템플릿을 브라우저가 읽는다.";}i:2;i:1406;}i:27;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:60:"1. HTML로 작성한 템플릿을 브라우저가 읽는다.";}i:2;i:1406;}i:28;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:1466;}i:29;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:1466;}i:30;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:1466;}i:31;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:1466;}i:32;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:2;i:3;s:5:"
  * ";}i:2;i:1466;}i:33;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:61:"2. 브라우저는 문서 객체 모델(DOM)을 생성한다.";}i:2;i:1471;}i:34;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:61:"2. 브라우저는 문서 객체 모델(DOM)을 생성한다.";}i:2;i:1471;}i:35;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:1532;}i:36;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:1532;}i:37;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:1532;}i:38;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:1532;}i:39;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:2;i:3;s:5:"
  * ";}i:2;i:1532;}i:40;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:"3. <script src=";}i:2;i:1537;}i:41;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:15:"3. <script src=";}i:2;i:1537;}i:42;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:1552;}i:43;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"angular.js";}i:2;i:1553;}i:44;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:10:"angular.js";}i:2;i:1553;}i:45;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:1563;}i:46;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:51:">가 실행되어 AngularJS 소스가 실행된다.";}i:2;i:1564;}i:47;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:51:">가 실행되어 AngularJS 소스가 실행된다.";}i:2;i:1564;}i:48;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:1615;}i:49;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:1615;}i:50;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:1615;}i:51;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:1615;}i:52;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:2;i:3;s:5:"
  * ";}i:2;i:1615;}i:53;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:231:"4. DOM 생성시 DOM Content Loaded 이벤트가 발생하는데 AngularJS가 이때 생성된 정적 DOM을 읽고 뷰를 컴파일한다. 컴파일 시 확장 태그나 속성을 읽고 처리한 후 데이터를 바인딩한다.";}i:2;i:1620;}i:54;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:231:"4. DOM 생성시 DOM Content Loaded 이벤트가 발생하는데 AngularJS가 이때 생성된 정적 DOM을 읽고 뷰를 컴파일한다. 컴파일 시 확장 태그나 속성을 읽고 처리한 후 데이터를 바인딩한다.";}i:2;i:1620;}i:55;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:1851;}i:56;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:1851;}i:57;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:1851;}i:58;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:1851;}i:59;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:2;i:3;s:5:"
  * ";}i:2;i:1851;}i:60;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:65:"5. 컴파일을 완료하면 동적 DOM, 즉 뷰가 생성된다.";}i:2;i:1856;}i:61;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:65:"5. 컴파일을 완료하면 동적 DOM, 즉 뷰가 생성된다.";}i:2;i:1856;}i:62;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:1921;}i:63;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:1921;}i:64;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"ul";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:1921;}i:65;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:4;i:3;s:1:"
";}i:2;i:1921;}i:66;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1923;}i:67;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:12:"컨트롤러";i:1;i:2;i:2;i:1923;}i:2;i:1923;}i:68;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:1923;}i:69;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1923;}i:70;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:485:"AngularJS에서 컨트롤러는 많은 일을 하지 않는다. 단 하나의 역할 즉, 애플리케이션의 로직을 담당한다. 이를 다르게 설명하면 컨트롤러는 모델의 상태를 정의, 변경한다고 할 수 있다. 결국 $scope 객체에 데이터나 행위를 선언하는 것이다. 그리고 컨트롤러는 인자로 $scope를 전달받는 단순한 자바스크립트 함수다. 다음은 초기 모델의 상태를 정의하는 컨트롤러 함수다.";}i:2;i:1948;}i:71;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2434;}i:72;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:128:"function demoCtrl($scope){
	$scope.bookmarkList = [{name : "구글", url : "google.com"},{name:"네이버", url:"naver.com"}];
}";}i:2;i:2434;}i:73;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2434;}i:74;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:126:"이렇게 정의된 컨트롤러는 템플릿에서 ng-controller 지시자를 이용해 템플릿에서 사용할 수 있다.";}i:2;i:2568;}i:75;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2695;}i:76;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:130:"<div ng-controller="demoCtrl">
	<ul>
		<li ng-repeat="bookmark in bookmarkList">
			<p>{{bookmark.name}}</p>
		</li>
	</ul>
</div>";}i:2;i:2695;}i:77;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2695;}i:78;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:291:"위처럼 컨트롤러에서 애플리케이션에 사용되는 북마크 모델과 그 초기 상태를 정의할 수 있을 뿐만 아니라 몇 가지 행위를 추가할 수도 있다. 다음은 새로운 북마크 정보를 추가하는 행위를 컨트롤러에서 기술한 코드다.";}i:2;i:2835;}i:79;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3127;}i:80;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:126:"function demoCtrl($scope){
	$scope.addBookmark = function(name, url){
		$scope.bookmarkList.push({name : name, url:url});
	}
}";}i:2;i:3127;}i:81;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3127;}i:82;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:472:"하지만 컨트롤러 코드를 작성할 때 주의해야 할 점이 있다. 컨트롤러는 단 하나의 뷰에 해당하는 애플리케이션의 로직만을 담당해야 한다. 화면상의 로직이 아니라 애플리케이션의 비즈니스 로직이다. 즉 DOM을 조작하는 행위와 같은 화면 상의 로직은 다음에 설명한 지시자에서 구현하고 컨트롤러에서는 애플리케이션의 비즈니스 로직만을 구현해야 한다. ";}i:2;i:3261;}i:83;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3733;}i:84;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3733;}i:85;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:402:"AngularJS에서는 하나의 화면에 여러 컨트롤러를 작성할 수 있다. 하나의 화면은 사실 여러 뷰의 조합으로 이뤄질 수 있기 때문이다. 가령 검색조건 뷰와 검색 결과 목록 뷰가 이루어진 북마크 조회 화면과 같이 말이다. 이렇게 여러 뷰가 만들어지면 하나의 컨트롤러를 하나의 뷰와 연결하는 것을 권장한다.";}i:2;i:3735;}i:86;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4137;}i:87;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:4139;}i:88;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:20:"$rootScope와 $scope";i:1;i:2;i:2;i:4139;}i:2;i:4139;}i:89;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:4139;}i:90;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4139;}i:91;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:640:"앞에서 보았듯이 AngularJS에서 $scope는 중요한 역할을 한다. 양방향 데이터 바인딩의 핵심이자 뷰와 컨트롤러를 이어주는 징검다리이기도 하다. 사실 $scope는 그저 단순한 자바스크립트 객체에 불과하다. 하지만 이 자바스크립트 객체는 연결된 DOM 요소에서 표현식이 계산되는 실행환경이며 뷰와 컨트롤러에서 사용되는 데이터와 기능이 살아 숨쉬는 공간이다. 또한 $scope는 DOM 요소와 마찬가지로 계층적 구조를 가진다. 다음 목록은 AngularJS 애플리케이션에서의 $scope의 특징을 보여준다.";}i:2;i:4172;}i:92;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4813;}i:93;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"ul";i:2;s:16:" class="extlist"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:4813;}i:94;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:4813;}i:95;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:4813;}i:96;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:1;i:3;s:5:"
  * ";}i:2;i:4813;}i:97;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:42:"뷰와 컨트롤러를 이어주는 다리";}i:2;i:4818;}i:98;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:42:"뷰와 컨트롤러를 이어주는 다리";}i:2;i:4818;}i:99;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:4860;}i:100;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:4860;}i:101;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:4860;}i:102;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:4860;}i:103;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:2;i:3;s:5:"
  * ";}i:2;i:4860;}i:104;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:36:"연결된 DOM에서의 실행 환경";}i:2;i:4865;}i:105;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:36:"연결된 DOM에서의 실행 환경";}i:2;i:4865;}i:106;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:4901;}i:107;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:4901;}i:108;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:4901;}i:109;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:4901;}i:110;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:2;i:3;s:5:"
  * ";}i:2;i:4901;}i:111;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:36:"양방향 데이터 바인딩 처리";}i:2;i:4906;}i:112;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:36:"양방향 데이터 바인딩 처리";}i:2;i:4906;}i:113;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:4942;}i:114;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:4942;}i:115;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:4942;}i:116;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:4942;}i:117;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:2;i:3;s:5:"
  * ";}i:2;i:4942;}i:118;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:"이벤트 전파 처리";}i:2;i:4947;}i:119;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:23:"이벤트 전파 처리";}i:2;i:4947;}i:120;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:4970;}i:121;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:4970;}i:122;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:4970;}i:123;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:4970;}i:124;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:2;i:3;s:5:"
  * ";}i:2;i:4970;}i:125;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:"계층적 구조";}i:2;i:4975;}i:126;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:16:"계층적 구조";}i:2;i:4975;}i:127;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:4991;}i:128;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:4991;}i:129;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"ul";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:4991;}i:130;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:4;i:3;s:1:"
";}i:2;i:4991;}i:131;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:4993;}i:132;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:23:"$scope의 계층 구조";i:1;i:3;i:2;i:4993;}i:2;i:4993;}i:133;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:4993;}i:134;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4993;}i:135;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:574:"모든 AngularJS 애플리케이션은 하나의 $rootScope를 가진다. 이 $rootScope는 ng-app을 생성하며 ng-app이 선언된 DOM 요소가 최상위 노드가 되어 여러 자식 $scope를 가지게 된다. 즉, DOM과 같은 계층적 구조에서 최상위 계층에 $rootScope가 존재하는 것이다. 이는 어쩌면 window와 같은 글로벌 변수 영역이라고 생각할 수도 있겟다. 또한 ng-controller나 ng-repeat과 같이 별도의 $scope를 생성하는 지시자는 각 지역변수 영역을 가지고 있다고 생각할 수 있겠다.";}i:2;i:5027;}i:136;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5601;}i:137;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:5601;}i:138;a:3:{i:0;s:12:"document_end";i:1;a:0:{}i:2;i:5601;}}