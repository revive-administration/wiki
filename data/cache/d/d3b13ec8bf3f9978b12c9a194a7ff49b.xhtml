
<h1 class="sectionedit1" id="장_네티_맛보기">1장 네티 맛보기</h1>
<div class="level1">

</div>
<!-- EDIT1 SECTION "1장 네티 맛보기" [1-36] -->
<h2 class="sectionedit2" id="discard_서버">1.3 Discard 서버</h2>
<div class="level2">

</div>
<!-- EDIT2 SECTION "1.3 Discard 서버" [37-67] -->
<h2 class="sectionedit3" id="에코_서버">1.4 에코 서버</h2>
<div class="level2">

<p>
에코서버는 클라이언트로부터 입력받은 데이터를 그대로 돌려준다.
</p>

</div>
<!-- EDIT3 SECTION "1.4 에코 서버" [68-189] -->
<h3 class="sectionedit4" id="클라이언트_구현">1.4.2 클라이언트 구현</h3>
<div class="level3">

<p>
에코 클라이언트 데이터 핸드럴와 에코 서버 데이터 핸드러의 구조를 비교해보자. 두 데이터 핸들러 모두 ChannelInboundHandlerAdapter를 상속하며 구혆ㅆ는데, 클라이언트 데이터 핸들러에 channelActive 이벤트를 추가했다. 주요 설명은 다음과 같다.
</p>

<ul  class="extlist">
  <li><div class="li">1) channelActive 이벤트는 ChannelboundHandler에 정의된 이벤트로써 소켓 채널이 최초 활성화 되었을 때 실행된다.</div></li>
  <li><div class="li">2) writeAndFlush 메서드는 내부적으로 데이터 기록과 전송의 두 가지 메서드를 호출한다. 첫 번재는 채널에 데이터를 기록하는 write 메서드이며 두 번째는 채널에 기록된 데이터를 서버로 전송하는 flush 메서드이다.</div></li>
  <li><div class="li">3) channelRead(..) : 서버로부터 수신된 데이터가 있을 때 호출되는 네티 이벤트 메서드다.</div></li>
  <li><div class="li">4) readMessage : 서버로부터 수신된 데이터가 저장된 msg 객체에서 문자열 데이터를 추출한다.</div></li>
  <li><div class="li">5) channelReadComplete(..) : 수신된 데이터를 모두 읽었을 때 호출되는 이벤트 메서드다.</div></li>
  <li><div class="li">6) ctx.close() : 수신된 데이터를 모두 읽은 후 서버와 연결된 채널을 닫는다.</div></li>
</ul>

</div>
<!-- EDIT4 SECTION "1.4.2 클라이언트 구현" [190-1435] -->
<h3 class="sectionedit5" id="데이터_이동의_방향성">1.4.3 데이터 이동의 방향성</h3>
<div class="level3">

</div>
<!-- EDIT5 SECTION "1.4.3 데이터 이동의 방향성" [1436-] -->