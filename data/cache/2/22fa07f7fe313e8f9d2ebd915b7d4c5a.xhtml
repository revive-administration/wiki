
<h1 class="sectionedit1" id="장_패킷_교환">3장 패킷 교환</h1>
<div class="level1">

</div>
<!-- EDIT1 SECTION "3장 패킷 교환" [1-33] -->
<h2 class="sectionedit2" id="스위칭_및_포워딩">3-1 스위칭 및 포워딩</h2>
<div class="level2">

<p>
교환기는 앞 장에서 구축된 점대점 링크, 버스(이더넷), 링과같은 토폴로지에 성형(star) 토폴로지를 추가함으로써 네트워크를 확장한다. 성형 토폴로지는 다음과 같은 몇 가지 좋은 특징을 갖는다.
</p>
<ul>
<li class="level1"><div class="li"> 교환기가 고정된 숫자의 입출력 단자를 갖기 때문에 하나의 교환기에 연결될 수 있는 호스트의 수는 제한된다. 그러나 여러 교환기를 서로 연결하면 큰 네트워크를 구성할 수 있다.</div>
</li>
<li class="level1"><div class="li"> 호스트는 점대점 링크를 사용하여 교환기에 연결되며, 따라서 넓은 지역에 걸친 네트워크를 구성하는 것이 가능하다.</div>
</li>
<li class="level1"><div class="li"> 새로운 호스트를 교환기에 연결하여 네트워크에 호스트를 추가하더라도, 기존에 연결되어 있던 호스트에게 제공되는 네트워크의 성능이 저하되지는 않는다.</div>
</li>
</ul>

</div>
<!-- EDIT2 SECTION "3-1 스위칭 및 포워딩" [34-952] -->
<h3 class="sectionedit3" id="데이터그램">3.1.1 데이터그램</h3>
<div class="level3">

<p>
데이터그램이 갖고 있는 개념은 매우 간단하다. 교환기가 패킷을 어떻게 목적지로 전달할 것인가를 결정하는 데 충분한 정보를 모든 패킷이 포함하도록 하자는 것이다. 즉, 모든 패킷은 목적지의 완전한 주소를 포함한다. 패킷을 어떻게 포워딩할 것인지를 결정하기 위해 교환기는 포워딩 테이블을 참조한다. 라우팅은 패킷이 도착했을 대 이를 포워딩 또는 스위칭할 수 있도록, 포워딩 테이블에 정확한 정보를 준비하는 배후의 작업들을 의미한다.
</p>

<p>
비연결성(데이터그램) 네트워크는 다음과 같은 특징들을 갖는다.
</p>
<ul>
<li class="level1"><div class="li"> 호스트는 언제 어디서나 패킷을 보낼 수 있다. 왜냐하면 포워딩 테이블에 정확히 기재되어 있다는 가정하에서, 어떤 패킷도 교환기에 도착하는 즉시 포워드될 수 있기 때문이다. 이와 대조적으로, 뒤에서 살펴볼 대부분의 연결성 네트워크에서는 첫 번째 데이터 패킷이 보내지기 전에 어떤 &#039;연결 상태&#039;가 설정되어야 한다.</div>
</li>
<li class="level1"><div class="li"> 호스트가 패킷을 보낼 때, 호스트는 네트워크가 패킷을 전달할 수 있는지 또는 목적지가 동작상태인지 알 방법이 없다.</div>
</li>
<li class="level1"><div class="li"> 각 패킷은 같은 목적지로 보내진 이전의 패킷에 독립적으로 포워딩된다. 따라서, 호스트 A가 호스트 B로 가는 연속되는 두 패킷이 완전히 다른 경로로 갈 수 있다(네트워크의 어떤 교환기에서 포워딩 테이블이 변경되었기 때문에).</div>
</li>
<li class="level1"><div class="li"> 교환기 또는 링크의 고장은, 고장난 지점을 돌아 다른 경로를 찾을 수 있고 해당 포워딩 테이블을 갱신할 수 있으므로, 통신에 심각한 영향을 미치지 않는다.</div>
</li>
</ul>

</div>
<!-- EDIT3 SECTION "3.1.1 데이터그램" [953-2780] -->
<h3 class="sectionedit4" id="가상_회선_스위칭">3.1.2 가상 회선 스위칭</h3>
<div class="level3">

<p>
패킷 교환에서 널리 사용되는 기술은 가상 회선(VC)의 개념인데, 이것은 데이터그램 모델과 매우 다르다. 연결성 모델이라고도 하는 이 방식은 먼저 발신지 호스트와 목적지 호스트 사이에 가상의 연결을 설정하는 것이 필요하다. 이을 이해하기 위해 호스트A가 호스트B로 패킷을 보내려고 하는 상황을 생각해 보자. 이것은 두 단계의 작업으로 볼 수 있는데, 첫 단계는 연결 설정이고, 두 번째 단계는 데이터 전송이다. 
</p>

<p>
연결 설정 단계에서는 출발지와 목적지 사이에 잇는 각 교환기들이 &#039;연결상태&#039;를 설정하는 것이 필요하다. 하나의 연결에 대한 연결상태는 해당 연결이 통과하는 각각의 교환기에 있는 &#039;VC테이블&#039; 엔트리들로 구성된다. 하나의 교환기에 있는 VC 테이블 엔트리는 다음과 같은 내용을 담고 있다.
</p>
<ul>
<li class="level1"><div class="li"> 연결에 속하는 패킷들의 헤더 안에 실려 있고, 교환기에서 연결을 착오 없이 식별하는 데 사용되는 회선 식별자(VCI)</div>
</li>
<li class="level1"><div class="li"> 해당 VC의 패킷이 도착하는 입력 인터페이스</div>
</li>
<li class="level1"><div class="li"> 해당 VC의 패킷이 교환기를 빠져나가는 출력 인터페이스</div>
</li>
<li class="level1"><div class="li"> 나가는 패킷들에 사용될 VCI(다른 VCI일 수 있음)</div>
</li>
</ul>

<p>
하나의 엔트리는 다음과 같은 의미를 갖는다. 지정된 입력 인터페이스에 패킷 하나가 도착하고 그 패킷이 헤더에 지정된 VCI 값을 가지고 있으면, 지정된 출력 VCI 값으로 VCI를 바꾸고 지정된 출력 인터페이스로 패킷을 전송한다.
</p>

<p>
교환기에 도착하는 패킷들의 VCI와 그들이 도착하는 인터페이스의 조합이 가상 회선을 유일하게 식별한다는 점에 유의하라. 물론 어느 순간에 교환기에는 많은 가상 연결이 설정되어 있을 수 있다. 또한 입력 VCI와 출력 VCI 값이 일반적으로 같지 않다. 따라서 VCI는 전역적으로, 즉 네트워크 전체에서 의미를 가지는 연결에 대한 식별자일 필요는 없으며, 해당 링크에서만 의미를 가진다. 즉, 링크에 국한된 영역(link local scope)을 가진다.
</p>

<p>
새로운 연결이 생성될 때마다 연결이 지나갈 각 링크에서 해당 연결에 대한 새로운 VCI를 할당하여야 한다. 이때 각 링크에서 결정되는 VCI는 기존의 연결들이 해당 링크에서 현재 사용되지 않는 것이어야 한다. 연결 상태를 설정하는 데는 크게 두 종류의 접근 방법이 있다.
</p>
<ul>
<li class="level1"><div class="li"> 1) 네트워크 관리자가 상태를 구성하도록 하는것 &#039;영구적&#039;</div>
</li>
<li class="level1"><div class="li"> 2) 호스트가 네트워크에게 상태를 설정하도록 메시지를 보내는것 &#039;시그널링&#039; –&gt; 결과로 가상회선은 <strong>스위칭이 되었다</strong></div>
</li>
</ul>

</div>
<!-- EDIT4 SECTION "3.1.2 가상 회선 스위칭" [2781-] -->