
<h1 class="sectionedit1" id="장_레일즈_애플리케이션의_아키텍처">2장 레일즈 애플리케이션의 아키텍처</h1>
<div class="level1">

</div>
<!-- EDIT1 SECTION "2장 레일즈 애플리케이션의 아키텍처" [1-62] -->
<h2 class="sectionedit2" id="모델_뷰_컨트롤러">2.1 모델, 뷰, 컨트롤러</h2>
<div class="level2">

<p>
1979년 트뤼그베 레엔스케우는 대화식 애플리케이션을 개발하기 위한 새로운 아키텍처를 제시했다. 그는 애플리케이션을 모델, 뷰, 컨트롤러라는 세 가지 컴포넌트로 설계했다.
</p>

<p>
&#039;모델&#039;은 애플리케이션의 상태 관리를 책임진다. 어떨 때에는 이런 상태가 일시적이고, 사용자와 두서너 번 상호작용하는 동안에만 유지되지만 어떨 때에는 이런 상태가 영구적이고 애플리케이션 외부(대개 데이터베이스)에 저장된다.
</p>

<p>
모델은 단순한 데이터가 아니다. 왜냐하면 모델은 데이터에 적용되는 모든 비즈니스 룰을 집행하기 때문이다. 예를 들어 20달러 이하의 주문에는 할인이 적용되지 않아야 한다면 모델이 그 제약조건을 집행하는 게 옳다. 비즈니스 룰의 구현ㅇ르 모델에 둠으로써, 어떤 것도 애플리케이션 안에 우리의 데이터를 무효로 만드는 것이 없음을 확신할 수 있다. 모델은 문지기와 데이터 저장 장소 구실을 동시에 수행한다.
</p>

<p>
&#039;뷰&#039;는 보통, 모델에 있는 데이터를 기반으로 사용자 인터페이스의 생성을 책임진다.
</p>

<p>
&#039;컨트롤러&#039;는 애플리케이션을 지휘(orchestrate)한다. 컨트롤러는 외부세계에서 이벤트를 받아 모델과 상호작용을 한 후 사용자에게 적절한 뷰를 보여준다.
</p>

<p>
이런 모델, 뷰, 컨트롤러의 삼중주는 MVC로 알려진 아키텍처를 이룬다. 그림 2.1은 MVC를 개괄적으로 보여준다.
</p>

<p>
레일스 애플리케이션으로 들어오는 요청은 가장 먼저 애플리케이션의 어느 곳으로 요청을 보내야 하고 어떻게 요청을 해석해야 하는지를 책임지는 라우터로 보내진다. 결국 이 단계는 컨트롤러 코드 안의 어딘가에 있는 특정한 메서드(액션)를 식별한다. 액션은 보통 요청 안에서 데이터를 찾거나, 모델과 상호작용을 하거나, 혹은 다른 액션들을 호출할 것이다. 최종적으로 액션은 사용자에게 렌더할 뷰의 정보를 준비한다.
</p>

<p>
라우팅 컴포넌트는 들어오는 요청을 받는 즉시 조각조각 나눈다. 모든 분석의 결과에 따라 라우터는 어떠한 메서드를 호출해야 한다는 것을 안다. 컨트롤러는 모델의 객체에 뷰가 접근하도록 처리하고 뷰의 코드를 호출한다. 레일스에서는 이런 호출을 명시하지 않는 경우기 많다. 관례에 따라 주어진 액션에 해당하는 뷰가 연결되기 때문이다.
</p>

<p>
여기까지가 MVC 웹 애플리케이션에 대한 전부다. 관례의 집합을 따르고 기능을 적절히 분해함으로써 코드가 쉬워지고 애플리케이션의 확장과 유지가 편해진 것을 알 수 있다. 이만하면 괜찮은 장사다.
</p>

</div>
<!-- EDIT2 SECTION "2.1 모델, 뷰, 컨트롤러" [63-2952] -->
<h2 class="sectionedit3" id="액티브_레코드레일스의_모델을_지원">2.2 액티브 레코드 : 레일스의 모델을 지원</h2>
<div class="level2">

<p>
일반적으로 우리는 웹 애플리케이션이 사용하는 정보를 관계형 데이터베이스에 저장하기를 원한다. 주문-등록 시스템은 주문과 품목 그리고 고객 정보를 데이터베이스 테이블에 저장할 것이다. 애플리케이션이 웹로그나 뉴스 사이트처럼 비정형적 문서를 사용할지라도 데이터베이스를 뒷단의 데이터 저장소로 사용하곤 한다
</p>

<p>
SQL을 사용할 때에는 잘 드러나지 않지만, 관계형 데이터베이스는 실제로 수학의 집합 이론을 기반으로 설계되었다. 시간이 지나면서 사람들은 서로 협동할 필요가 있는 데이터를 두고, 관계형과 객체지향 관점을 조화시키는 방법을 고안해 냈다. 하나는 데이터베이스를 중심으로 프로그램을 구성하는 방법이고, 다른 하나는 프로그램을 중심으로 데이터베이스를 구성하는 방법이다.
</p>

</div>
<!-- EDIT3 SECTION "2.2 액티브 레코드 : 레일스의 모델을 지원" [2953-3963] -->
<h3 class="sectionedit4" id="데이터베이스_중심_프로그래밍">데이터베이스 중심 프로그래밍</h3>
<div class="level3">

<p>
이런 접근 방법은 간결하며 직관적인 데다 널리 사용된다. 하지만 문제가 있다 이처럼 비즈니스 로직과 데이터베이스에 접근하는 코드가 혼합되면, 유지보수나 추후에 애플리케이션 확장을 어렵게 할 수 있다. 
</p>

<p>
정규 프로그래밍 과정에서 객체지향은 이런 식의 문제를 캡슐화로 해결하라고 가르쳐준다. 우리는 주문과 관련된 모든 것을 한 클래스로 감쌀 것이다. 그래서 규칙(regulations) 변화가 일어날 때 단일한 장소에서만 수정되도록 할 것이다.
</p>

<p>
사람들은 이런 생각을 데이터베이스 프로그래밍으로 확장했다. 데이터베이스로 향하는 연결을 클래스 레이어(layer)로 감싸서 숨긴다. 애플리케이션의 나머지 부분에서는 절대로 데이터베이스를 직접 조작하지 않고, 이런 클래스와 그것들의 객체를 사용한다. 이런 방식으로 우리는 스키마 의존적인 모든 특징을 단일 레이어에 모아 두어서 데이터베이스를 사용하는 저수준의 세부사항으로부터 애플리케이션의 코드를 분리한다. 
</p>

<p>
실제로 이런 개념을 구현하는 것은 보기보다 힘들다. 현실의 데이터베이스 테이블은 서로 연결되어 있고, 우리는 객체에 이것을 반영하여 주문 객체에 품목 객체 컬렉션이 포함되도록 코드를 작성할 것이다. 하지만 그렇다면 우리는 객체 검색, 성능, 그리고 데이터의 무결성 이슈부터 시작해야 한다. 이런 복잡함과 마주칠 때 늘 그렇듯 우리 업계는 객체 관계 매핑(Object-Relation Mapping)을 의미하는 ORM이라는 세 글자로 된 약어를 만들어 냈다. 레일즈는 ORM을 사용한다.
</p>

</div>
<!-- EDIT4 SECTION "데이터베이스 중심 프로그래밍" [3964-5798] -->
<h3 class="sectionedit5" id="객체_관계_매핑">객체 관계 매핑</h3>
<div class="level3">

<p>
ORM 라이브러리는 데이터베이스 테이블들을 클래스로 매핑한다. 데이터베이스에 orders라는 테이블이 있다면 우리 프로그램에는 Order라는 클래스가 있을 것이다. 이 테이블의 행(row)은 클래스의 각 Order 객체들에 대응해서, 각 주문이 Order 클래스의 객체 하나로 표현된다. 그 객체의 내부에서 개개의 열(column)을 가져오고(get), 설정(set)하는 데 속성이 사용된다. Order 객체에는 수량, 판매세 등을 가져오고 그 값을 설정하는 메서드가 있다.
</p>

<p>
게다가 데이터베이스 테이블을 감싸는 레일스 클래스는 테이블-수준(table-level) 동작을 수행하는 클래스-수준(class-level) 메서드들의 집합을 제공한다.
</p>

<p>
마지막으로 테이블의 각 행에 해당하는 객체들은 해당 행에서 작동하는 메서드를 가지고 있다. 
</p>

<p>
이렇게 ORM 레이어는 테이블을 클래스로, 행을 객체로 열(column)을 객체 속성으로 매핑한다. 클래스 메서드는 테이블-수준의 동작을 수행하는 데 사용되고, 인스턴스 메서드는 각 행의 동작을 수행하는 데 사용도니다.
</p>

<p>
전형적인 ORM 라이브러리에서 여러분은 데이터베이스의 엔티티(entities)와 프로그램의 엔티티를 서로 매핑하기 위해 구성 설정 데이터를 제공해야 한다. 이런 ORM 도구를 사용하는 개발자들은 자신이 직접 XML 설정 파일들을 한 보따리 생성하고 관리해야 한다.
</p>

</div>
<!-- EDIT5 SECTION "객체 관계 매핑" [5799-7359] -->
<h3 class="sectionedit6" id="액티브_레코드">액티브 레코드</h3>
<div class="level3">

<p>
&#039;액티브 레코드(Active Record)&#039;는 레일스와 함께 제공되는 객체 관계 매핑 레이어다. 액티브 레코드는 테이블을 클래스로, 행을 객체로 열을 객체 속성으로 매핑하는 표준 ORM 모델을 충실하게 따른다. 다른 ORM 라이브러리들과의 차이점은 설정 방법이다. 관례와 똑똑한 디폴트 값들을 가지고 시작하는 것에 기대어 액티브 레코드는 개발자가 설정해야 하는 양을 최소로 줄인다. 이해를 돕기 위해 orders 테이블을 감싸는 데 액티브 레코드를 사용하는 프로그램을 보도록 하자.
</p>
<pre class="code">require &#039;active_record&#039;

class Order &lt; ActiveRecord::Base
end

order = Order.find(1)
order.discont = 0.5
order.save</pre>

<p>
이 코드는 아이디 1의 주문을 가져와서 할인율을 수정하기 위해 새로운 Order 클래스를 사용한다. 액티브 레코드는 밑에 있는 데이터베이스를 다루는 혼란을 줄여 주어, 우리가 자유롭게 비즈니스 로직 작업을 하게 해준다.
</p>

<p>
하지만 액티브 레코드는 이 이상의 것이다. 여러분은 액티브 레코드가 레일스 프레임워크의 나머지 부분과 매끄럽게 결합하는 것을 장바구니 애플리케이션을 개발할 때 보게 도리 것이다. 만약 웹 폼이 비즈니스 객체와 관련된 데이터를 보낸다면, 액티브 레코드는 이 데이터를 모델로 추출할 수 있다. 액티브 레코드가 모델 데이터의 정교한 유효성 검사를 지원하므로, 폼의 데이터가 유효성 검사에 실패한다면, 레일스 뷰는 단 한줄의 코드로 폼에서 발생한 에러를 뽑아내 형식에 맞춰 보여줄 수 있다.
</p>

</div>
<!-- EDIT6 SECTION "액티브 레코드" [7360-9107] -->
<h2 class="sectionedit7" id="액션_팩뷰와_컨트롤러">2.3 액션 팩 : 뷰와 컨트롤러</h2>
<div class="level2">

<p>
컨트롤러와 뷰의 상호작용 특성상 레일스에서 뷰와 컨트롤러 지원은 &#039;액션 팩(Action Pack)&#039;이라는 단일 컴포넌트에 함꼐 묶여서 제공도니다.
</p>

<p>
레일스는 여러분이 제어로직과 표현로직이 명백하게 분리된 코드로 웹 애플리케이션을 작성하도록 잘 나눠준다.
</p>

</div>
<!-- EDIT7 SECTION "2.3 액션 팩 : 뷰와 컨트롤러" [9108-9492] -->
<h3 class="sectionedit8" id="뷰에_대한_지원">뷰에 대한 지원</h3>
<div class="level3">

<p>
레일스에서 뷰는 브라우저에 표시할 한 페이지 전체 혹은 부분을 만드는 역할을 수행한다. 단순하게 말하자면, 뷰는 어떤 고정된 텍스트를 보여주는 <abbr title="HyperText Markup Language">HTML</abbr> 코드 덩어리다. 좀 더 정형화해서 얘기하면 여러분은 
</p>

</div>
<!-- EDIT8 SECTION "뷰에 대한 지원" [9493-] -->