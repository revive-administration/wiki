
<h1 class="sectionedit1" id="no_silver_bulletessence_and_accident_in_software_engineering">No Silver Bullet : Essence and Accident in Software Engineering</h1>
<div class="level1">

</div>
<!-- EDIT1 SECTION "No Silver Bullet : Essence and Accident in Software Engineering" [1-78] -->
<h2 class="sectionedit2" id="introduction">Introduction</h2>
<div class="level2">

<p>
We seek silver bullets which make software better. But there is no silver bullet. 
</p>

</div>
<!-- EDIT2 SECTION "Introduction" [79-186] -->
<h2 class="sectionedit3" id="does_it_have_to_be_hard_-_essential_difficulties">Does It Have To Be Hard? - Essential Difficulties</h2>
<div class="level2">

<p>
 * Anomaly(변칙) is not that software progress is so slow but that computer hardware progress is so fast. 
 * to see what rate of progress we can expect in software technology, let us examine its difficulties. 
</p>

<p>
The essence of a software entity is a construct of interlocking(맞물리게 하다) concepts: data sets, relationships among data items, algorithms, and invocations of functions. The hard part of building software is the specification, design and testing of this conceptual construct. building software is always hard. so there is no silver bullet. 
</p>

<p>
irreducible essence of modern software systems : complexity, conformity, changeability, invisibility
</p>

</div>
<!-- EDIT3 SECTION "Does It Have To Be Hard? - Essential Difficulties" [187-916] -->
<h3 class="sectionedit4" id="complexity">Complexity</h3>
<div class="level3">

<p>
Software systems differ profoundly from computers, buildings, or automobiels, where repeated elements abound. the complexity of software is in essential property, not an accidental one, hence descriptions of a software entity that abstract away its complexity often abstract away its essence. Many of the classical problems of developing software products derived from this essential complexity and its nonlinear increased with size. 
</p>

</div>
<!-- EDIT4 SECTION "Complexity" [917-1372] -->
<h3 class="sectionedit5" id="conformity">Conformity</h3>
<div class="level3">

<p>
Softwared is different because they were designed by different people. this cannot be simplified out by any redesigin of the software alone.
</p>

</div>
<!-- EDIT5 SECTION "Conformity" [1373-1535] -->
<h3 class="sectionedit6" id="changeability">Changeability</h3>
<div class="level3">

<p>
Software change is frequent. All changes continually, this fact force our software product change. 
</p>

</div>
<!-- EDIT6 SECTION "Changeability" [1536-1660] -->
<h3 class="sectionedit7" id="invisibility">Invisibility</h3>
<div class="level3">

<p>
In spite of progress in restricting and simplifying the structure of software, they remain inherently unvisualizable, thus depriving the mind of some of its most powerful conceptual tools. This lack not only impedes the process of design within one mind, it severely hinders communication among minds.
</p>

</div>
<!-- EDIT7 SECTION "Invisibility" [1661-1986] -->
<h2 class="sectionedit8" id="past_breakthroughs_solved_accidental_difficulties">Past Breakthroughs Solved Accidental Difficulties</h2>
<div class="level2">

</div>
<!-- EDIT8 SECTION "Past Breakthroughs Solved Accidental Difficulties" [1987-2048] -->
<h3 class="sectionedit9" id="high-level_languages">High-level languages</h3>
<div class="level3">

<p>
productivity-high, be more simple
</p>

</div>
<!-- EDIT9 SECTION "High-level languages" [2049-2113] -->
<h3 class="sectionedit10" id="time-sharing">Time-sharing</h3>
<div class="level3">

<p>
Time-sharing preserves immedicacy.
</p>

</div>
<!-- EDIT10 SECTION "Time-sharing" [2114-2171] -->
<h3 class="sectionedit11" id="unified_programming_environments">Unified programming environments</h3>
<div class="level3">

<p>
this stimulated the development of whole toolbenches, since each new tools could be applied to any programs by using the standard formats.
</p>

</div>
<!-- EDIT11 SECTION "Unified programming environments" [2172-2354] -->
<h2 class="sectionedit12" id="hopes_for_the_silver">Hopes for the Silver</h2>
<div class="level2">

</div>
<!-- EDIT12 SECTION "Hopes for the Silver" [2355-2387] -->
<h3 class="sectionedit13" id="ada_and_other_high-level_language_advances">Ada and other high-level language advances</h3>
<div class="level3">

<p>
Ada indeed not only reflects evolutionary improvements in language concepts but embodies features to encourage modren design and modularization concepts. 
</p>

</div>
<!-- EDIT13 SECTION "Ada and other high-level language advances" [2388-2596] -->
<h3 class="sectionedit14" id="object-oriented_programming">Object-oriented programming</h3>
<div class="level3">

<p>
abstract data types / hierarchical types(class) <br/>

Adt is that an object&#039;s type should be defined by a name, a set of proper values, and a set of proper operations, rather than its storage structure. <br/>

Hierarchical types, allow the definition of general interfaces that can be further refined by providing subordinate types. Both concepts represent real advances in the art of building software.
</p>

<p>
But, the complexity of the design itself is essential: and such attacks make no change whatever in that.
</p>

</div>
<!-- EDIT14 SECTION "Object-oriented programming" [2597-3138] -->
<h3 class="sectionedit15" id="artificial_intelligence">Artificial intelligence</h3>
<div class="level3">

</div>
<!-- EDIT15 SECTION "Artificial intelligence" [3139-3172] -->
<h3 class="sectionedit16" id="expert_systems">Expert systems</h3>
<div class="level3">

<p>
An expert system is a program containing a generalized inference engine(추론) and a rule base, designed to take input data and assumptions and explore the logical consequences through the inferences derivable from the rule base, yielding conclusions and advice, and offering to explain its results by retracing its reasoning for the user.
</p>

</div>
<!-- EDIT16 SECTION "Expert systems" [3173-3539] -->
<h3 class="sectionedit17" id="automatic_programming">&quot;Automatic&quot; programming</h3>
<div class="level3">

</div>
<!-- EDIT17 SECTION "Automatic programming" [3540-3573] -->
<h3 class="sectionedit18" id="graphical_programming">Graphical programming</h3>
<div class="level3">

</div>
<!-- EDIT18 SECTION "Graphical programming" [3574-3605] -->
<h3 class="sectionedit19" id="program_verification">Program verification</h3>
<div class="level3">

<p>
Much of the effort in modern programming goes into the testing and repair bugs. Verifications save labor. It does not mean error-proof programs. but it reduce the program-testing load, not eliminate it.
</p>

</div>
<!-- EDIT19 SECTION "Program verification" [3606-3840] -->
<h3 class="sectionedit20" id="environments_and_tools">Environments and tools</h3>
<div class="level3">

<p>
Its biggest gain is the use of integrated database systems to keep track of the myriads of details that must be recalled accurately by the individual programmer and kept current in a group of collaborators on a single system.
</p>

</div>
<!-- EDIT20 SECTION "Environments and tools" [3841-4100] -->
<h2 class="sectionedit21" id="promising_attacks_on_the_conceptual_essence">Promising Attacks on the Conceptual Essence</h2>
<div class="level2">

</div>
<!-- EDIT21 SECTION "Promising Attacks on the Conceptual Essence" [4101-4156] -->
<h3 class="sectionedit22" id="buy_versus_build">Buy versus build</h3>
<div class="level3">

</div>
<!-- EDIT22 SECTION "Buy versus build" [4157-4183] -->
<h3 class="sectionedit23" id="requirements_refinement_and_rapid_prototyping">Requirements refinement and rapid prototyping</h3>
<div class="level3">

</div>
<!-- EDIT23 SECTION "Requirements refinement and rapid prototyping" [4184-] -->