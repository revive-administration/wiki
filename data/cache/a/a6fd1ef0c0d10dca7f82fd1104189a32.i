a:677:{i:0;a:3:{i:0;s:14:"document_start";i:1;a:0:{}i:2;i:0;}i:1;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:21:"1장 AngularJS 철학";i:1;i:1;i:2;i:1;}i:2;i:1;}i:2;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:1;}i:2;i:1;}i:3;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:37;}i:4;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:26:"AngularJS와의 첫 만남";i:1;i:2;i:2;i:37;}i:2;i:37;}i:5;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:37;}i:6;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:37;}i:7;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:356:"AngularJS는 자바스크립트로 작성된 클라이언트 측 MVC 프레임워크다. 브라우저에서 돌아가며, AJAX 스타일의 단일 페이지 웹 애플리케이션을 작성하기에 아주 좋다. 범용적인 프레임워크지만 특히 CRUD(생성, 읽기, 갱신, 삭제) 웹 애플리케이션을 작성하는 데 특화되어 있다.";}i:2;i:76;}i:8;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:432;}i:9;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:434;}i:10;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:34:"프레임워크에 익숙해지기";i:1;i:3;i:2;i:434;}i:2;i:434;}i:11;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:434;}i:12;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:434;}i:13;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:75:"AngularJS의 템플릿 시스템은 다음과 같은 면에서 독특하다";}i:2;i:479;}i:14;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:554;}i:15;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"ul";i:2;s:16:" class="extlist"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:554;}i:16;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:554;}i:17;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:554;}i:18;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:1;i:3;s:5:"
  * ";}i:2;i:554;}i:19;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:40:"HTML을 템플릿 언어로 사용한다";}i:2;i:559;}i:20;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:40:"HTML을 템플릿 언어로 사용한다";}i:2;i:559;}i:21;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:599;}i:22;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:599;}i:23;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:599;}i:24;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:599;}i:25;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:2;i:3;s:5:"
  * ";}i:2;i:599;}i:26;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:206:"명시적으로 DOM을 갱신하지 않아도 AngularJS가 사용자 동작이나 브라우저 이벤트, 모델 변경 사항을 추적해 언제 어떻게 템플릿을 갱신해야 하는지 알아낸다.";}i:2;i:604;}i:27;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:206:"명시적으로 DOM을 갱신하지 않아도 AngularJS가 사용자 동작이나 브라우저 이벤트, 모델 변경 사항을 추적해 언제 어떻게 템플릿을 갱신해야 하는지 알아낸다.";}i:2;i:604;}i:28;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:810;}i:29;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:810;}i:30;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:810;}i:31;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:810;}i:32;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:2;i:3;s:5:"
  * ";}i:2;i:810;}i:33;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:110:"매우 흥미롭고 확장 가능한 서브시스템이 있으며, 이를 통해 브라우저에게 새로운 ";}i:2;i:815;}i:34;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:110:"매우 흥미롭고 확장 가능한 서브시스템이 있으며, 이를 통해 브라우저에게 새로운 ";}i:2;i:815;}i:35;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTML";}i:2;i:925;}i:36;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:67:" 태그나 속성을 어떻게 해석해야 하는지 알려준다.";}i:2;i:929;}i:37;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:67:" 태그나 속성을 어떻게 해석해야 하는지 알려준다.";}i:2;i:929;}i:38;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:996;}i:39;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:996;}i:40;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"ul";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:996;}i:41;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:4;i:3;s:1:"
";}i:2;i:996;}i:42;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:998;}i:43;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:28:"라이브러리와 확장성";i:1;i:3;i:2;i:998;}i:2;i:998;}i:44;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:998;}i:45;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"ul";i:2;s:16:" class="extlist"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:1036;}i:46;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:1036;}i:47;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:1036;}i:48;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:1;i:3;s:5:"
  * ";}i:2;i:1036;}i:49;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:20:"http://ngmodules.org";i:1;N;}i:2;i:1041;}i:50;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:1061;}i:51;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:1061;}i:52;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"ul";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:1061;}i:53;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:4;i:3;s:1:"
";}i:2;i:1061;}i:54;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1062;}i:55;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:6:"도구";i:1;i:3;i:2;i:1062;}i:2;i:1062;}i:56;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:1062;}i:57;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"ul";i:2;s:16:" class="extlist"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:1078;}i:58;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:1078;}i:59;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:1078;}i:60;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:1;i:3;s:5:"
  * ";}i:2;i:1078;}i:61;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:"Batarang";}i:2;i:1083;}i:62;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:8:"Batarang";}i:2;i:1083;}i:63;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"ul";i:2;s:16:" class="extlist"";}i:2;i:1;i:3;s:7:"
    * ";}i:2;i:1091;}i:64;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:7:"
    * ";}i:2;i:1091;}i:65;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:7:"
    * ";}i:2;i:1091;}i:66;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:2;i:3;s:7:"
    * ";}i:2;i:1091;}i:67;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:222:"AngularJS 웹 애플리케이션을 검사할 수 있는 크롬 개발자 도구의 확장 기능으로, 실행 중인 AngularJS 애플리케이션의 상태를 시각적으로 살펴보는 데 매우 유용한 도구다. ";}i:2;i:1098;}i:68;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:222:"AngularJS 웹 애플리케이션을 검사할 수 있는 크롬 개발자 도구의 확장 기능으로, 실행 중인 AngularJS 애플리케이션의 상태를 시각적으로 살펴보는 데 매우 유용한 도구다. ";}i:2;i:1098;}i:69;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:1320;}i:70;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:1320;}i:71;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"ul";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:1320;}i:72;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:1320;}i:73;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:1320;}i:74;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:1320;}i:75;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:2;i:3;s:5:"
  * ";}i:2;i:1320;}i:76;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:"Plunker와 jsFiddle";}i:2;i:1325;}i:77;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:19:"Plunker와 jsFiddle";}i:2;i:1325;}i:78;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"ul";i:2;s:16:" class="extlist"";}i:2;i:1;i:3;s:7:"
    * ";}i:2;i:1344;}i:79;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:7:"
    * ";}i:2;i:1344;}i:80;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:7:"
    * ";}i:2;i:1344;}i:81;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:2;i:3;s:7:"
    * ";}i:2;i:1344;}i:82;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:38:"코드를 쉽게 공유할 수 있다.";}i:2;i:1351;}i:83;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:38:"코드를 쉽게 공유할 수 있다.";}i:2;i:1351;}i:84;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:1389;}i:85;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:1389;}i:86;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"ul";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:1389;}i:87;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:1389;}i:88;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:1389;}i:89;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:1389;}i:90;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:2;i:3;s:5:"
  * ";}i:2;i:1389;}i:91;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:33:"IDE 확장 기능과 플러그인";}i:2;i:1394;}i:92;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:33:"IDE 확장 기능과 플러그인";}i:2;i:1394;}i:93;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:1427;}i:94;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:1427;}i:95;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"ul";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:1427;}i:96;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:4;i:3;s:1:"
";}i:2;i:1427;}i:97;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1430;}i:98;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:23:"AngularJS 집중 강좌";i:1;i:2;i:2;i:1430;}i:2;i:1430;}i:99;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:1430;}i:100;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1466;}i:101;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:18:"Hello World 예제";i:1;i:3;i:2;i:1466;}i:2;i:1466;}i:102;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:1466;}i:103;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1495;}i:104;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:29:"양방향 데이터 바인딩";i:1;i:4;i:2;i:1495;}i:2;i:1495;}i:105;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:1495;}i:106;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1495;}i:107;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:92:"AngularJS는 모델 변경 사항을 감지하고 그에 따라 DOM을 갱신할 수 있다.";}i:2;i:1533;}i:108;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1625;}i:109;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1627;}i:110;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:23:"AngularJS의 MVC 패턴";i:1;i:3;i:2;i:1627;}i:2;i:1627;}i:111;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:1627;}i:112;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1661;}i:113;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:9:"스코프";i:1;i:4;i:2;i:1661;}i:2;i:1661;}i:114;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:1661;}i:115;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1661;}i:116;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:225:"AngularJS에서 $scope객체는 뷰(템플릿)에게 도메인 모델을 제공한다. 즉, 스코프 인스턴스에게 프로퍼티를 할당하면 템플릿이 렌더링할 수 있는 새로운 값을 지정할 수 있다.";}i:2;i:1679;}i:117;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1904;}i:118;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1904;}i:119;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:236:"스코프에는 데이터뿐만 아니라 주어진 뷰에 대한 특정 동작도 추가할 수 있다. 동작을 추가하려면 템플릿에 적용할 UI용 로직을 함수로 선언해 스코프 인스턴스에 추가하면 된다.";}i:2;i:1906;}i:120;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2142;}i:121;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2142;}i:122;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:99:"예를 들어 name 변수에 대한 getter 함수가 필요하다면 다음처럼 만들면 된다.";}i:2;i:2144;}i:123;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2244;}i:124;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:90:"var HelloCtrl = function($scope){
	$scope.getName = function(){
		return $scope.name;
	}
}";}i:2;i:2244;}i:125;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2244;}i:126;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:59:"그리고 템플릿에서는 다음과 같이 사용한다.";}i:2;i:2342;}i:127;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2402;}i:128;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:28:"<h1> Hello, {{name}}! </h1>
";}i:2;i:2402;}i:129;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2402;}i:130;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:115:"$scope 객체를 사용하면 특정 도메인 모델과 동작을 특정 뷰 레이어에 한정시킬 수 있다.";}i:2;i:2436;}i:131;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2551;}i:132;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:2553;}i:133;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:12:"컨트롤러";i:1;i:4;i:2;i:2553;}i:2;i:2553;}i:134;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:2553;}i:135;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2553;}i:136;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:160:"컨트롤러의 가장 중요한 역할은 스코프 객체를 초기화하는 것이다. 실제로 초기화 로직은 다음과 같은 역할을 담당한다.";}i:2;i:2574;}i:137;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2734;}i:138;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"ul";i:2;s:16:" class="extlist"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:2734;}i:139;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:2734;}i:140;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:2734;}i:141;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:1;i:3;s:5:"
  * ";}i:2;i:2734;}i:142;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:"초기 모델 값 지정";}i:2;i:2739;}i:143;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:24:"초기 모델 값 지정";}i:2;i:2739;}i:144;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:2763;}i:145;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:2763;}i:146;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:2763;}i:147;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:2763;}i:148;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:2;i:3;s:5:"
  * ";}i:2;i:2763;}i:149;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:34:"$scope에 UI 동작(함수) 추가";}i:2;i:2768;}i:150;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:34:"$scope에 UI 동작(함수) 추가";}i:2;i:2768;}i:151;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:2802;}i:152;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:2802;}i:153;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"ul";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:2802;}i:154;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:4;i:3;s:1:"
";}i:2;i:2802;}i:155;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2802;}i:156;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:196:"컨트롤러는 일반적인 자바스크립트 함수다. 즉, 프레임워크의 특정 클래스를 상속받거나 AngularJS API를 호출하지 않아도 제 기능을 충분히 발휘한다.";}i:2;i:2804;}i:157;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3000;}i:158;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:3002;}i:159;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:6:"모델";i:1;i:4;i:2;i:3002;}i:2;i:3002;}i:160;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:3002;}i:161;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3002;}i:162;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:491:"AngularJS의 모델은 평범한 자바스크립트 객체다. 프레임워크의 특정 클래스를 상속받거나 특정 모델 객체를 포함하지 않아도 된다. 기존의 순수한 자바스크립트 클래스나 객체를 모델로 바로 사용할 수 있으며 추가 할 수 있는 프로퍼티도 기본 타입 뿐만 아니라 모든 객체나 배열도 가능하다. AngularJS에 모델을 제공하려면 $scope의 프로퍼티로 단순히 추가하기만 하면 된다.";}i:2;i:3017;}i:163;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3508;}i:164;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:3510;}i:165;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:16:"스코프 심화";i:1;i:3;i:2;i:3510;}i:2;i:3510;}i:166;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:3510;}i:167;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3510;}i:168;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:238:"각 $scope는 Scope 클래스의 인스턴스다. Scope 클래스는 스코프의 생명주기를 관리하는 메서드, 이벤트를 전달하는 메서드, 템플릿을 렌더링하는 과정을 지원하는 메서드를 갖고 있다.";}i:2;i:3537;}i:169;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3775;}i:170;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:3777;}i:171;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:19:"스코프 계층도";i:1;i:4;i:2;i:3777;}i:2;i:3777;}i:172;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:3777;}i:173;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3777;}i:174;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:419:"$scope 인자는 어디서 생성됐을까? 바로 ng-controller 디렉티브가 Scope.$new() 메서드를 호출해서 새로운 스코프를 생성한 것이다. scope 인스턴스를 생성하려면 새로운 인스턴스가 또 필요하다. AngularJS에는 $rootScope라는 다른 모든 스코프의 부모 스코프가 있으며, $rootScope 인스턴스는 애플리케이션이 초기화될 때 만들어진다.";}i:2;i:3805;}i:175;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4224;}i:176;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4224;}i:177;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:469:"ng-controller 디렉티브는 스코프를 생성하는 디렉티브 중 하나다. AngularJS는 DOM 트리에서 스코프를 생성하는 디렉티브를 만날 때마다 Scope 클래스의 인스턴스를 새로 생성하며, 이렇게 생성된 스코프는 부모 스코프를 가리키는 $parent 프로퍼티를 가지고 있다. DOM 트리에는 스코프를 생성하는 디렉티브가 많을 수 있으며, 이 경우 많은 스코프가 생성될 것이다.";}i:2;i:4226;}i:178;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4695;}i:179;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:4698;}i:180;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:33:"스코프 계층 구도와 상속";i:1;i:4;i:2;i:4698;}i:2;i:4698;}i:181;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:4698;}i:182;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4698;}i:183;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:338:"스코프에 프로퍼티를 하나 정의하면 모든 자식 스코프에서 같은 이름으로 다시 그 프로퍼티를 정의하지 않아도 접근할 수 있다. 스코프를 상속받는 계층 구조인 경우 같은 프로퍼티를 반복해서 정의할 필요가 없기 때문에 실제로 이 기능은 매우 유용하다.";}i:2;i:4740;}i:184;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5078;}i:185;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:5080;}i:186;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:53:"스코프 계층 구조를 통한 상속의 위험성";i:1;i:4;i:2;i:5080;}i:2;i:5080;}i:187;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:5080;}i:188;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5080;}i:189;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:211:"읽기 동작을 위해 프로퍼티에 접근할 때는 스코프 계층 구조를 통한 상속이 상당히 직관적이고 이해하기 쉽지만, 쓰기 동작을 위한 경우에는 약간 복잡해진다.";}i:2;i:5142;}i:190;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5353;}i:191;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5353;}i:192;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:183:"부모 스코프에 변수 하나를 정의하고 자식 스코프에서는 이를 제외하고 싶다고 가정해보자. 이를 위한 자바스크립트 코드는 다음과 같다.";}i:2;i:5355;}i:193;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5539;}i:194;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:36:"var HelloCtrl = function($scope){
};";}i:2;i:5539;}i:195;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5539;}i:196;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:34:"그리고 다음은 뷰 코드다.";}i:2;i:5580;}i:197;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5615;}i:198;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:188:"<body ng-app ng-init="name='World'">
<h1>Hello, {{name}}</h1>
<div ng-controller="HelloCtrl">
	Say hello to : <input type="text" ng-model="name">
	<h2>Hello, {{name}}!</h2>
</div>
</body>
";}i:2;i:5615;}i:199;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5615;}i:200;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:360:"이 코드를 실행하면 name 변수를 가장 상위 스코프에만 선언했을 뿐인데 모든 애플리케이션에서 접근할 수 있음을 알 수 있다. 결국 변수가 스코프 계층 구조를 따라 아래로 상속됨을 보여준다. 즉, 부모 스코프에 정의한 변수는 자식 스코프에서도 접근할 수 있다는 말이다.";}i:2;i:5813;}i:201;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6173;}i:202;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:6175;}i:203;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:49:"스코프의 계층 구조와 이벤트 시스템";i:1;i:4;i:2;i:6175;}i:2;i:6175;}i:204;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:6175;}i:205;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6175;}i:206;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:287:"스코프의 계층 구조를 이벤트 버스로도 사용할 수 있다. AngularJS는 스코프 계층 구조를 통해 페이로드가 담긴 이벤트를 전파한다. 이벤트는 어떤 스코프에서든 시작해서 위로든($emit) 아래로든($broadcast) 이동할 수 있다.";}i:2;i:6233;}i:207;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6520;}i:208;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6520;}i:209;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:201:"AngularJS 코어 서비스와 디렉티브는 애플리케이션 상태에 대한 주요 변경 사항을 보낼 때 이런 이벤트 버스를 사용한다. 예를 들어 로케이션(브라우저의 ";}i:2;i:6522;}i:210;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"URL";}i:2;i:6723;}i:211;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:162:")이 변경됐을 때 전달되는 $locationChangeSuccess 이벤트($rootScope 인스턴스에서 보낸다)를 받으려면 다음과 같이 작성하면 된다.";}i:2;i:6726;}i:212;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6889;}i:213;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:180:"$scope.$on('$locationChangeSuccess', function (event, newUrl, oldUrl){
	// 위치가 변경되면 동작한다.
	// 예를 들면 방문 기록을 갱신하는 작업을 수행
});";}i:2;i:6889;}i:214;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6889;}i:215;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:296:"스코프 이벤트 핸들러는 각 스코프 인스턴스의 $on 메서드로 등록할 수 있다. 핸들러로 등록하는 함수는 첫 번째 매개변수로 event 객체를 받아 처리하고 나머지 매개변수는 이벤트의 페이로드와 이벤트 타입에 따라 달라진다.";}i:2;i:7076;}i:216;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7372;}i:217;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7372;}i:218;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:295:"DOM 이벤트처럼 event 객체의 preventDefault()와 stopPropagation() 메서드도 사용가능하다. stopPropagation() 메서드를 호출하면 이벤트가 스코프의 계층구조를 따라 올라가지 않으며, 위로 올려 보내는 이벤트($emit)에서만 사용할 수 있다.";}i:2;i:7374;}i:219;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7669;}i:220;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:7671;}i:221;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:22:"스코프 생명주기";i:1;i:4;i:2;i:7671;}i:2;i:7671;}i:222;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:7671;}i:223;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7671;}i:224;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:394:"네임스페이스를 분리하고 변수의 이름 충돌을 피하기 위해 스코프는 꼭 필요하다. 그리고 작으면서 계층이 잘 분류된 스코프는 메모리 소모를 관리하기에도 좋다. 한 스코프가 더 이상 필요 없어지면 정리될 수 있는데, 스코프에 포함된 모델과 기능도 가비지 컬렉션의 대상이 될 수 있다는 말이다.";}i:2;i:7702;}i:225;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8096;}i:226;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8096;}i:227;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:298:"새로운 스코프는 보통 스코프 생성 디렉티브에 의해 생성되기도 하고 정리되기도 한다. $new()와 $destroy() 메서드를 사용해 스코프를 직접 생성하거나 정리하는 것도 물론 가능하다(두 메서드는 모두 Scope 객체에 선언되어 있다.)";}i:2;i:8098;}i:228;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8396;}i:229;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:8398;}i:230;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:3:"뷰";i:1;i:3;i:2;i:8398;}i:2;i:8398;}i:231;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:8398;}i:232;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:8412;}i:233;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:56:"선언형 템플릿 뷰와 명령형 컨트롤러 로직";i:1;i:4;i:2;i:8412;}i:2;i:8412;}i:234;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:8412;}i:235;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8412;}i:236;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:265:"AngularJS에는 편리한 디렉티브가 많이 포함되어 있고 1장에서 대부분 살펴본다. 하지만 각 디렉티브의 문법과 기능보다는 그 밑에 깔려있는 UI 구성에 관한 AngularJS의 철학을 살펴보는 것이 더 중요하다. ";}i:2;i:8477;}i:237;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8742;}i:238;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8742;}i:239;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:209:"AngularJS는 선언적인 방식으로 UI를 구성한다. 즉, 템플릿으로 원하는 효과를 어떻게 만들어낼 것인지보다 어떤 효과를 만들어낼 것인지에 집중한다는 뜻이다. ";}i:2;i:8744;}i:240;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8953;}i:241;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8953;}i:242;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:630:"반복되는 패턴을 확인해보자. UI를 조작하려면 템플릿의 작은 일부분만 수정해 모델의 상태(메시지의 글자 수)에 대한 원하는 결과(남은 글자 수 보여주기, 버튼 비활성화 등)를 표현하기만 하면 된다. 여기서 눈여겨봐야 할 것은 자바스크립트 코드에서 DOM 요소에 대한 어떤 참조도 필요하지 않으며, 명시적으로 DOM 요소를 조작할 필요도 없다는 점이다. 대신 모델의 변화에만 집중하면 나머지는 AngularJS가 알아서 처리해준다. 즉, 여기서는 디렉티브의 내용만 제공해주면 된다.";}i:2;i:8955;}i:243;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:9585;}i:244;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:9585;}i:245;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:928:"AngularJS 디렉티브를 사용해 선언적인 UI 템플릿을 작성하면 복잡한 대화형 UI를 빨리 만들 수 있다. 그리고 AngularJS는 DOM 트리의 특정 부분을 언제 어떻게 조작할지에 대한 저수준의 결정 사항을 책임진다. 대부분은 AngularJS가 '올바른 일'을 해서 거대한 UI를 알아서 갱신하지만(적절한 시간에) AngularJS의 내부 동작을 이해하는 것도 중요하다. 혹시 필요하다면 프레임워크에게 적절한 힌트를 제공할 수도 있기 때문이다. SQL로 다시 생각해보면 대부분 SQL 실행 계획이 잘 동작하니 걱정할 게 없지만, 성능 문제가 생겼을 경우 SQL 실행 계획이 어떻게 동작하는지 알아야 적절한 힌트를 제공할 수 있다. AngularJS도 마찬가지다. 템플릿과 디렉티브를 효율적으로 사용하려면 내부 동작 방식을 이해하는 것이 좋다.";}i:2;i:9587;}i:246;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:10515;}i:247;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:10517;}i:248;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:26:"모듈과 의존성 주입";i:1;i:3;i:2;i:10517;}i:2;i:10517;}i:249;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:10517;}i:250;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:10554;}i:251;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:19:"AngularJS의 모듈";i:1;i:4;i:2;i:10554;}i:2;i:10554;}i:252;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:10554;}i:253;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:10554;}i:254;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:166:"전역으로 정의했던 안 좋은 생성자를 동일한 모듈로 어떻게 변경하는지 살펴보자. 이전에 컨트롤러는 다음과 같이 선언했다.";}i:2;i:10582;}i:255;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:10749;}i:256;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:59:"var HelloCtrl = function ($scope) {
	$scope.name = 'World';";}i:2;i:10749;}i:257;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:10749;}i:258;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"}";}i:2;i:10812;}i:259;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:10813;}i:260;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:10813;}i:261;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:54:"이 코드를 모듈로 변경하면 다음과 같다.";}i:2;i:10815;}i:262;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:10870;}i:263;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:97:"angular.module('hello', []).controller('HelloCtrl, function($scope){
	$scope.name = 'World';
 });";}i:2;i:10870;}i:264;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:10870;}i:265;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:388:"AngularJS에는 angular라는 전역 네임스페이스가 정의돼 있다. 이 네임스페이스는 다양하고 편리한 유틸 함수들을 제공하며, module이 그 중 하나다. module은 AngularJS가 관리하는 개체(컨트롤러, 서비스 등)의 컨테이너 역할ㅇ르 하며, 간단한 네임스페이스로 코드를 구성하는 것 외에도 배울 것이 많다.";}i:2;i:10973;}i:266;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:11361;}i:267;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:11361;}i:268;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:202:"새로운 모듈을 정의하려면 모듈 이름을 첫 번재 매개변수로 넣고 module 함수를 호출하면 된다. 두 번재 매개변수는 다른 모듈과의 의존 관계를 표현한다.";}i:2;i:11363;}i:269;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:11565;}i:270;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:11565;}i:271;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:172:"angular.module 함수를 호출하면 모듈 인스턴스를 새로 생성해서 반환하므로 이 인스턴스에 바로 새로운 컨트롤러를 정의할 수 있다. ";}i:2;i:11567;}i:272;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:11739;}i:273;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:11741;}i:274;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:22:"객체들과의 연동";i:1;i:4;i:2;i:11741;}i:2;i:11741;}i:275;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:11741;}i:276;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:11741;}i:277;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:242:"이렇게 AngularJS는 모듈로 객체를 구성하는 방법을 제공한다. 모듈로는 프레임워크에서 직접 호출되는 객체(컨트롤러, 필터) 뿐만 아니라 개발자가 구현한 어떤 객체든 등록할 수 있다.";}i:2;i:11772;}i:278;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:12014;}i:279;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:12014;}i:280;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:271:"모듈 패턴은 코드를 구조화하는 데 매우 유용하지만 AngularJS는 한발 더 나아갔다. 네임스페이스에 객체를 등록할 수 있을 뿐만 아니라 해당 객체와 의존관계에 있는 객체들까지 선언적으로 표현할 수 있다.";}i:2;i:12016;}i:281;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:12287;}i:282;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:12289;}i:283;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:16:"의존성 주입";i:1;i:5;i:2;i:12289;}i:2;i:12289;}i:284;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:5;}i:2;i:12289;}i:285;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:12289;}i:286;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:476:"$scope 객체가 마법처럼 컨트롤러의 인스턴스에 주입되는 걸 이미 살펴봤다. AngularJS는 컨트롤러에서 새로운 scope 인스턴스가 필요하다는 사실을 어떻게든 알아차리고 scope 인스턴스를 새로 생성한 후 주입한다. 컨트롤러에서 해줘야 하는 일은 $scope 인스턴스가 필요하다고 정의하는 일뿐이다. 즉, 전체 의존 관계 관리의 핵심을 한 문장으로 말하면 다음과 같다. ";}i:2;i:12312;}i:287;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:12788;}i:288;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:221:"제대로 동작하려면 난 이런 의존 객체(협력 객체)가 필요해. 어디서 가져와야 하는지, 어떻게 생성해야 하는지 난 잘 모르겠지만, 난 그게 꼭필요하니 알아서 제공해줘";}i:2;i:12789;}i:289;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:13010;}i:290;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:13011;}i:291;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:13011;}i:292;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:93:"AngularJS에는 다음과 같은 동작을 하는 의존성 주입엔진이 포함돼 있다.";}i:2;i:13013;}i:293;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:13106;}i:294;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"ul";i:2;s:16:" class="extlist"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:13106;}i:295;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:13106;}i:296;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:13106;}i:297;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:1;i:3;s:5:"
  * ";}i:2;i:13106;}i:298;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:55:"협력 객체가 필요하다는 것을 알아차리기";}i:2;i:13111;}i:299;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:55:"협력 객체가 필요하다는 것을 알아차리기";}i:2;i:13111;}i:300;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:13166;}i:301;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:13166;}i:302;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:13166;}i:303;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:13166;}i:304;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:2;i:3;s:5:"
  * ";}i:2;i:13166;}i:305;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:"협력 객체 찾기";}i:2;i:13171;}i:306;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:20:"협력 객체 찾기";}i:2;i:13171;}i:307;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:13191;}i:308;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:13191;}i:309;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:13191;}i:310;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:13191;}i:311;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:2;i:3;s:5:"
  * ";}i:2;i:13191;}i:312;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:78:"애플리케이션이 제대로 동작하기 위해 객체들을 함께 엮기";}i:2;i:13196;}i:313;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:78:"애플리케이션이 제대로 동작하기 위해 객체들을 함께 엮기";}i:2;i:13196;}i:314;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:13274;}i:315;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:13274;}i:316;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"ul";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:13274;}i:317;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:4;i:3;s:1:"
";}i:2;i:13274;}i:318;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:13274;}i:319;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:448:"의존 관계를 선언적으로 명시할 수 있다는 생각은 아주 강력하다. 필요로 하는 협력 객체의 생명주기는 걱정할 필요가 없으며, 순식간에 협력 객체를 변경할 수 있고 이를 특정 서비스로 바꿔치기 함으로써 전혀 다른 애플리케이션을 만들 수 있기 때문이다. 또한 컴포넌트에 대한 단위 테스트를 작성하기가 쉬운 이유도 바로 이 때문이다.";}i:2;i:13276;}i:320;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:13724;}i:321;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:13726;}i:322;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:26:"의존성 주입의 혜택";i:1;i:5;i:2;i:13726;}i:2;i:13726;}i:323;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:5;}i:2;i:13726;}i:324;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:13726;}i:325;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:779:"의존성 주입으로 통합된 시스템의 장점을 알아보기 위해 메시지를 보내고 나중에 받을 수 있는 간단한 알림 서비스를 한번 생각해보자. 시나리오를 약간만 복잡하게 만들어 메시지를 보관하는 서비스도 필요하다고 치자. 분명 이 서비스는 알림 메시지가 일정 수를 넘어가면 가장 오래된 메시지가 보관함으로 들어가는 방식으로 notifications 서비스와 연동돼야 한다. 여기서 문제는 애플리케이션이 다르면 다른 보관 서비스를 사용할 수 있어야 한다는 점이다. 오래된 메시지를 브라우저의 콘솔에만 보여주면 되는 경우가 있고, 아니면 XHR로 서버에 메시지를 보내야 할 경우도 있을 것이다.";}i:2;i:13759;}i:326;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:14538;}i:327;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:14538;}i:328;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:51:"이제 알림 서비스의 코드를 살펴보자. ";}i:2;i:14540;}i:329;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:14592;}i:330;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:146:"var NotificationsService = function () {
	this.MAX_LEN = 10;
	this.notificationsArchive = new NotificationsArchive();
	this.notifications = [];
};";}i:2;i:14592;}i:331;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:299:"NotificationsService.prototype.push = function (notification) {
	var newLen, notificationToArchive;
	newLen = this.notifications.unshift(notification);
	if (newLen > this.MAX_LEN) {
		notificationToArchive = this.notifications.pop();
		this.notificationsArchive.archive(notificationToArchive);
	}
};";}i:2;i:14745;}i:332;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:88:"NotificationsService.prototype.getCurrent = function () {
	return this.notifications;
};";}i:2;i:15054;}i:333;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:15054;}i:334;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:306:"이 코드는 보관 기능의 구현체(NotificationsArchive)와 아주 밀접히 연관되어 있다. new 키워드로 특정 구현체를 인스턴스화하고 있기 때문이다. 하지만 불행히도 두 클래스가 서로 엮여있는 부분은 archive 메서드(알림 메시지 보관)뿐이다.";}i:2;i:15148;}i:335;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:15454;}i:336;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:15454;}i:337;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:247:"협력 객체를 바꿔치기할 수 있는 기능은 테스트를 작성함에 있어 매우 중요하다. 구현체를 테스트 대역(mock)으로 바꿀 수 없다면 테스트할 객체를 격리하는 건 상상조차 힘들기 때문이다.";}i:2;i:15456;}i:338;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:15703;}i:339;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:15705;}i:340;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:16:"서비스 등록";i:1;i:4;i:2;i:15705;}i:2;i:15705;}i:341;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:15705;}i:342;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:15705;}i:343;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:558:"AngularJS는 눈에 보이는 객체만 엮을 수 있다. 따라서 DI 기능을 사용하는 첫 단계는 객체를 AngularJS의 모듈로 등록하는 것이다. 여기서는 객체의 인스턴스 자체를 AngularJS에 바로 등록하지 않고 AngularJS 의존성 주입 시스템에 객체 생성법을 넘겨주는 방식을 사용한다. 그러면 AngularJS는 객체를 인스턴스화하는 방법을 해석하고 서로 연결해준다. 그리고 마지막으로 인스턴스화된 객체들이 서로 모여 애플리케이션을 구성한다.";}i:2;i:15730;}i:344;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:16288;}i:345;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:16288;}i:346;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:279:"AngularJS의 $provide 서비스는 객체 생성법을 등록할 때 사용하는데, 이를 통해 객체 생성법이 등록되면 $injector 서비스가 생성법을 해석해서 인스턴스화한 다음 사용할 준비를 마쳐놓는다(의존 객체들도 같이 준비).";}i:2;i:16290;}i:347;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:16569;}i:348;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:16569;}i:349;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:242:"$injector 서비스에 의해 생성된 객체를 서비스라고 부른다. AngularJS는 객체 생성법을 애플리케이션 생명주기에서 단 한번만 해석하기 때문에 객체의 인스턴스는 오직 하나만 생성된다. ";}i:2;i:16571;}i:350;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:16813;}i:351;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:16813;}i:352;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:169:"$injector에 의해서 생성된 서비스는 싱글톤이다. 따라서 실행 중인 애플리케이션별로 해당 서비스의 인스턴스는 단 하나가 된다.";}i:2;i:16815;}i:353;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:16984;}i:354;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:16984;}i:355;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:199:"결국 가장 중요한 것은, AngularJS 모듈은 객체 인스턴스의 집합을 들고 있을 뿐이고 이 객체들을 어떻게 생성하는지는 우리가 제어할 수 있는 사실이다.";}i:2;i:16986;}i:356;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:17185;}i:357;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:17187;}i:358;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:3:"값";i:1;i:5;i:2;i:17187;}i:2;i:17187;}i:359;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:5;}i:2;i:17187;}i:360;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:17187;}i:361;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:135:"AngularJS에게 객체의 제어권을 주는 가장 쉬운 방법은 다음처럼 인스턴스를 만들어 등록하는 방법이다.";}i:2;i:17195;}i:362;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:17331;}i:363;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:105:"var myMod = angular.module('myMod', []);
myMod.value('notificationsArchive', new NotificationsArchive());";}i:2;i:17331;}i:364;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:17331;}i:365;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:223:"AngularJS의 DI 메커니즘으로 제어되는 서비스는 반드시 유일한 이름(이 예제에서는 notificationArchive)을 갖고 있어야 한다. 그리고 인스턴스를 생성하는 방법이 따라와 한다.";}i:2;i:17441;}i:366;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:17664;}i:367;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:17664;}i:368;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:475:"값 객체는 특별히 흥미롭지가 않은데, 이 메서드로 등록된 객체는 다른 객체에 의존할 수 없기 때문이다. NotificationArchive 인스턴스의 경우를 보면 의존 객체가 하나도 없으니 이렇게 사용해도 무방하다. 하지만 실제로 이렇게 인스턴스 자체를 등록하는 방법은 아주 작은 객체(보통 내장 객체의 인스턴스나 객체 리터럴인 경우)에 대해서만 소용이 있을 뿐이다.";}i:2;i:17666;}i:369;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:18141;}i:370;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:18143;}i:371;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:9:"서비스";i:1;i:5;i:2;i:18143;}i:2;i:18143;}i:372;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:5;}i:2;i:18143;}i:373;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:18143;}i:374;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:362:"NotificationService서비스는 값 객체로 등록할 수 없다. 보관 서비스와 의존 관계를 맺고 있기 때문이다. 다른 객체와 의존 관계가 있는 객체를 등록하는 가장 쉬운 방법은 객체를 생성하는 방법, 즉 생성자 함수를 등록하는 것이다. 이는 다음 처럼 service 메서드를 사용하면 된다.";}i:2;i:18157;}i:375;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:18520;}i:376;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:59:"myMod.service('notificationService', NotificationsService);";}i:2;i:18520;}i:377;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:18520;}i:378;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:87:"그리고 NotificationService 생성자 함수는 다음과 같이 작성하면 된다.";}i:2;i:18584;}i:379;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:18672;}i:380;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:112:"var NotificationService = function (notificationArchive) {
	this.notificationsArchive = notificationsArchive;
};";}i:2;i:18672;}i:381;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:18672;}i:382;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:327:"AngularJS의 의존성 주입을 사용하면 NotificationsService 생성자 함수에서 이렇게 new 연산자를 제거할 수 있다. 서비스 생성 시 더 이상 다른 객체에 의존하지 않으며, 어떤 보관 서비스든 적용할 수 있다. 이제 우리의 애플리케이션은 훨씬 더 유연해졌다.";}i:2;i:18790;}i:383;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:19117;}i:384;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:19117;}i:385;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:236:"실제로 service 메서드가 많이 사용되지는 않지만, 이미 만들어놓은 생성자 함수를 등록하기에는 좋다. 이런 경우 AngularJS는 각자의 생성자 함수로 생성된 객체를 관리만 하게 된다.";}i:2;i:19119;}i:386;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:19355;}i:387;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:19357;}i:388;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:9:"팩토리";i:1;i:5;i:2;i:19357;}i:2;i:19357;}i:389;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:5;}i:2;i:19357;}i:390;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:19357;}i:391;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:287:"객체 생성법을 등록하는 또 다른 방법은 factory 메서드를 사용하는 것이다. factory 메서드는 service 메서드와 비교했을 대 객체를 생성하는 임의의 함수를 등록할 수 있기 때문에 더 유연하다. 예제 코드를 한번 살펴보자.";}i:2;i:19373;}i:392;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:19661;}i:393;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:511:"myMod.factory('notificationsService', function (notificationsArchive) {
	var MAX_LEN = 10;
	var noticiations = [];
	
	return {
		push: function (notification) {
			var notificationToArchive;
			var newLen = notifications.unshift(notification);
			
			//push 메서드는 이제 클로저 스코프에 속한다!
			if (newLen > MAX_LEN){
				notificationToArchive = this.notifications.pop();
				notificationsArchivearchive(notificationToArchive);
			}
		},
		//NotificationsService의 다른 메서드들
	};
}";}i:2;i:19661;}i:394;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:19661;}i:395;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:167:"AngularJS는 반환된 객체를 등록하기 위해 factory 함수를 사용한다. 어떤 자바스크립트 객체든 가능하며, function 객체도 가능하다.";}i:2;i:20193;}i:396;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:20360;}i:397;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:20360;}i:398;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:466:"AngularJS 의존성 주입 시스템에 객체를 등록할 때 가장 일반적인 방법이 바로 factory 메서드이며, 세련된 생성 로직을 추가할 수도 있고 매우 유연하기까지 하다. 또한 팩토리도 일반적인 함수이므로 자바스크립트에서 'private' 변수를 만들어낼 수 있는 렉시컬 스코프도 사용할 수 있다. 이는 서비스의 세부 구현 사항을 숨길 수 있기 때무에 아주 유용하다.";}i:2;i:20362;}i:399;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:20828;}i:400;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:20830;}i:401;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:6:"상수";i:1;i:5;i:2;i:20830;}i:2;i:20830;}i:402;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:5;}i:2;i:20830;}i:403;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:20830;}i:404;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:362:"NotificationsService 서비스가 점점 더 좋아지고 있다. 의존 객체들과 분리되고 내부 상태를 숨기고 있으니 말이다. 하지만 아직 하드 코딩된 설정 값인 MAX_LEN 상수가 남아 있다. 이를 위해 AngularJS는 상수를 모듈 수준에서 정의해 의존 객체처럼 주입할 수 있는 해결책을 제공한다.";}i:2;i:20842;}i:405;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:21204;}i:406;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:21204;}i:407;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:103:"NotificationsService 서비스가 다음처럼 설정 값을 넘겨받는 것이 가장 이상적이다";}i:2;i:21206;}i:408;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:21310;}i:409;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:126:"myMod.factory('notificagtionsService', 
	function(notificationsArchive, MAX_LEN) {
	...
	// 생성 로직은 변경 없음
});";}i:2;i:21310;}i:410;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:21310;}i:411;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:111:"그리고 NotificationsService 서비스 밖에서 설정 값이 모듈 수준으로 다음처럼 제공된다.";}i:2;i:21444;}i:412;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:21556;}i:413;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:31:"myMod.constant('MAX_LEN', 10);	";}i:2;i:21556;}i:414;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:21556;}i:415;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:464:"상수는 많은 애플리케이션에서 재사용되는 서비스를 생성할 때 아주 유용하다(서비스를 사용하는 사람들이 각자 환경을 다르게 설정할 수 있기 때문). 오직 한 가지 단점이라면, 서비스가 상수에 의존 관계를 갖기 때문에 상수가 꼭 제공돼야 한다는 점이다. 이를 위해 기본 설정 값을 지정해두고 우너하는 경우 변경할 수 있게 해주는 것이 더욱 좋다.";}i:2;i:21591;}i:416;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:22055;}i:417;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:22057;}i:418;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:9:"제공자";i:1;i:5;i:2;i:22057;}i:2;i:22057;}i:419;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:5;}i:2;i:22057;}i:420;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:22057;}i:421;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:80:"가장 강력한 메서드로 provider이 있다. 다음 예제를 살펴보자.";}i:2;i:22071;}i:422;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:22152;}i:423;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:409:"myMod.provider('notificationsService', function () {
	var config = {
		maxLen = 10
	};
	var notifications = [];
	
	return {
		setMaxLen : function(maxLen) {
			config.maxLen = maxLen || config.maxLen;
		},
		
		$get : function(notificationsArchive) {
			return {
				push:function (notification) {
					...
					if (newLen > config.maxLen){
						...
					}
				},
				// 다른 메서드들
			};
		}
	};
});";}i:2;i:22152;}i:424;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:22152;}i:425;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:317:"먼저 provider는 $get 프로퍼티를 갖고 있는 객체를 반환하는 함수여야 한다. 즉 $get 프로퍼티가 service 인스턴스를 반환하는 팩토리 함수여야 한다는 말이다. 그래서 $get 프로퍼티로 팩토리 함수를 들고 있는 객체를 제공자라고 생각할 수 있다. ";}i:2;i:22588;}i:426;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:22905;}i:427;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:22905;}i:428;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:425:"provider 함수가 반환하는 객체는 다른 메서드나 프로퍼티를 가질 수 있기 때문에 $get (팩토리) 메서드가 실행되기 전에 설정 값을 변경하는 것도 가능하다. 실제로 이전 예제에서 maxLen 설정 프로퍼티를 설정할 수도 있었지만 그럴 필요는 없었다. 게다가 단순히 값을 설정하는 것 외에도 더 복잡한 설정 로직도 넣을 수 있다.";}i:2;i:22907;}i:429;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:23332;}i:430;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:23332;}i:431;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:425:"provider 함수가 반환하는 객체는 다른 메서드나 프로퍼티를 가질 수 있기 때문에 $get (팩토리) 메서드가 실행되기 전에 설정 값을 변경하는 것도 가능하다. 실제로 이전 예제에서 maxLen 설정 프로퍼티를 설정할 수도 있었지만 그럴 필요는 없었다. 게다가 단순히 값을 설정하는 것 외에도 더 복잡한 설정 로직도 넣을 수 있다.";}i:2;i:23334;}i:432;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:23759;}i:433;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:23761;}i:434;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:19:"모듈 생명주기";i:1;i:4;i:2;i:23761;}i:2;i:23761;}i:435;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:23761;}i:436;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:23761;}i:437;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:340:"이제까지 AngularJS가 제공하는 다양한 객체 생성법을 살펴봤다. 특히 provider는 객체 인스턴스를 만들기 전에 추가 설정도 가능하기 때문에 좀 더 특별하다. 제공자를 더 효율적으로 사용하기 위해 AngularJS는 모듈의 생명주기를 다음과 같은 두 단계로 구분한다.";}i:2;i:23789;}i:438;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:24130;}i:439;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"ul";i:2;s:16:" class="extlist"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:24130;}i:440;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:24130;}i:441;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:24130;}i:442;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:1;i:3;s:5:"
  * ";}i:2;i:24130;}i:443;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:90:"설정 단계(configuration phase) : 모든 객체 생성법을 찾아 설정하는 단계";}i:2;i:24135;}i:444;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:90:"설정 단계(configuration phase) : 모든 객체 생성법을 찾아 설정하는 단계";}i:2;i:24135;}i:445;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:24225;}i:446;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:24225;}i:447;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:24225;}i:448;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:24225;}i:449;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:2;i:3;s:5:"
  * ";}i:2;i:24225;}i:450;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:116:"실행 단계(run phase) : 인스턴스가 만들어진 후 수행해야 하는 로직을 실행해야 하는 단계";}i:2;i:24230;}i:451;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:116:"실행 단계(run phase) : 인스턴스가 만들어진 후 수행해야 하는 로직을 실행해야 하는 단계";}i:2;i:24230;}i:452;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:24346;}i:453;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:24346;}i:454;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"ul";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:24346;}i:455;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:4;i:3;s:1:"
";}i:2;i:24346;}i:456;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:24348;}i:457;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:13:"설정 단계";i:1;i:5;i:2;i:24348;}i:2;i:24348;}i:458;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:5;}i:2;i:24348;}i:459;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:24348;}i:460;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:236:"제공자의 설정은 설정(첫 번째) 단계에서만 변경될 수 있다. 당연히 객체가 생성되고 난 후 객체 생성법이 변경된다는 건 말이 안 된다. 다음은 제공자의 설정을 변경하는 코드다.";}i:2;i:24367;}i:461;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:24604;}i:462;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:100:"myMod.config(function(notificationsServiceProvider){
	notificationsServiceProvider.setMaxLen(5);
});";}i:2;i:24604;}i:463;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:24604;}i:464;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:320:"여기서 중요하게 짚고 넘어갈 점은 Provider라는 접미사가 붙어 있고 실행 준비가 끝난 객체 생성법을 뜻하는 notificationsServiceProvider 객체를 사용한다는 점이다. 이렇게 설정 단계를 활용하면 객체 생성 공식의 마지막 순간에 변경을 가할수 있다.";}i:2;i:24710;}i:465;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:25030;}i:466;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:25032;}i:467;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:13:"실행 단계";i:1;i:5;i:2;i:25032;}i:2;i:25032;}i:468;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:5;}i:2;i:25032;}i:469;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:25032;}i:470;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:516:"실행 단계를 활용하면 애플리케이션이 초기화될 때 수행해야 하는 작업을 추가할 수 있다. 실행 단계가 다른 프로그래밍 언어의 main 메서드와 동일하다고 생각할 지 모르겠지만, 둘 간의 가장 큰 차이점은 AngularJS 모듈이 여러 개의 설정과 실행 블록을 가질 수 있다는 점이다. 이런 점에서 유일한 진입점은 없다고 보는 것이 맞다.(애플리케이션은 협력하는 객체들의 집합이라 말할 수 있다.)";}i:2;i:25051;}i:471;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:25567;}i:472;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:25567;}i:473;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:314:"실행 단계를 어떻게 잘 활용해야 하는지 알아보기 위해 애플리케이션이 시작될때의 시간을 사용자에게 보여줘야 한다고 해보자. 이를 구현하려면 다음 코드처럼 애플리케이션의 시작 시간을 $rootScope 인스턴스 프로퍼티에 할당해야 한다.";}i:2;i:25569;}i:474;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:25884;}i:475;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:99:"angular.module('upTimeApp', []).run(function($rootScope) {
	$rootScope.appStarted = new Date();
});";}i:2;i:25884;}i:476;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:25884;}i:477;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:63:"그리고 템플릿에서 다음처럼 가져다 쓰면 된다.";}i:2;i:25989;}i:478;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:26053;}i:479;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:40:"Application started at : {{appStarted}}
";}i:2;i:26053;}i:480;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:26099;}i:481;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:40:"단계별 등록 메서드 간의 차이";i:1;i:5;i:2;i:26099;}i:2;i:26099;}i:482;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:5;}i:2;i:26099;}i:483;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:26099;}i:484;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:135:"객체를 생성하는 방법들이 모듈의 생명주기 단계와 어떻게 연관되어 있는지 요약해보면 다음과 같다.";}i:2;i:26145;}i:485;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:26281;}i:486;a:3:{i:0;s:10:"table_open";i:1;a:3:{i:0;i:4;i:1;i:6;i:2;i:26282;}i:2;i:26281;}i:487;a:3:{i:0;s:15:"tablethead_open";i:1;a:0:{}i:2;i:26281;}i:488;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:26281;}i:489;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:26281;}i:490;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"구분";}i:2;i:26283;}i:491;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:26289;}i:492;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:26289;}i:493;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:"등록되는 것";}i:2;i:26290;}i:494;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:26306;}i:495;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:26306;}i:496;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:34:"설정 단계에서 주입 가능?";}i:2;i:26307;}i:497;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:26341;}i:498;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:26341;}i:499;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:34:"실행 단계에서 주입 가능?";}i:2;i:26342;}i:500;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:26376;}i:501;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:26377;}i:502;a:3:{i:0;s:16:"tablethead_close";i:1;a:0:{}i:2;i:26377;}i:503;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:26377;}i:504;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:26377;}i:505;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"상수";}i:2;i:26379;}i:506;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:26385;}i:507;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:26385;}i:508;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"상수 값 ";}i:2;i:26386;}i:509;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:26397;}i:510;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:26397;}i:511;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" Yes ";}i:2;i:26398;}i:512;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:26403;}i:513;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:26403;}i:514;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" Yes ";}i:2;i:26404;}i:515;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:26409;}i:516;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:26410;}i:517;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:26410;}i:518;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:26410;}i:519;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"변수";}i:2;i:26412;}i:520;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:26418;}i:521;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:26418;}i:522;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"변수 값 ";}i:2;i:26419;}i:523;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:26430;}i:524;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:26430;}i:525;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:" - ";}i:2;i:26431;}i:526;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:26434;}i:527;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:26434;}i:528;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" Yes ";}i:2;i:26435;}i:529;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:26440;}i:530;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:26441;}i:531;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:26441;}i:532;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:26441;}i:533;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:"Service ";}i:2;i:26443;}i:534;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:26451;}i:535;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:26451;}i:536;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:48:" 생성자 함수로 생성된 새로운 객체 ";}i:2;i:26452;}i:537;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:26500;}i:538;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:26500;}i:539;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:" - ";}i:2;i:26501;}i:540;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:26504;}i:541;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:26504;}i:542;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" Yes ";}i:2;i:26505;}i:543;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:26510;}i:544;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:26511;}i:545;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:26511;}i:546;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:26511;}i:547;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:"Factory ";}i:2;i:26513;}i:548;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:26521;}i:549;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:26521;}i:550;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:46:" factory 함수로 반환된 새로운 객체 ";}i:2;i:26522;}i:551;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:26568;}i:552;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:26568;}i:553;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:" - ";}i:2;i:26569;}i:554;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:26572;}i:555;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:26572;}i:556;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" Yes ";}i:2;i:26573;}i:557;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:26578;}i:558;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:26579;}i:559;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:26579;}i:560;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:26579;}i:561;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"Provider ";}i:2;i:26581;}i:562;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:26590;}i:563;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:26590;}i:564;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:53:" $get 팩토리 함수로 생성된 새로운 객체 ";}i:2;i:26591;}i:565;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:26644;}i:566;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:26644;}i:567;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" Yes ";}i:2;i:26645;}i:568;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:26650;}i:569;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:26650;}i:570;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:" - ";}i:2;i:26651;}i:571;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:26654;}i:572;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:26655;}i:573;a:3:{i:0;s:11:"table_close";i:1;a:1:{i:0;i:26655;}i:2;i:26655;}i:574;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:26657;}i:575;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:36:"다른 모듈에 의존하는 모듈";i:1;i:4;i:2;i:26657;}i:2;i:26657;}i:576;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:26657;}i:577;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:26657;}i:578;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:289:"AngularJS는 객체의 의존 관계를 관리하는 데 탁월할 뿐만 아니라 모듈의 의존 관계도 역시 관리할 수 있다. 한 모듈에 관련된 서비스들을 쉽게 모을 수 있기 때문에 서비스 라이브러리(재사용 가능한)를 사용할 수도 있다.";}i:2;i:26702;}i:579;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:26991;}i:580;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:26991;}i:581;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:163:"예를 들어 알림 서비스와 보관 서비스를 각각의 모듈(notifications와 archive라는 이름을 가진)로 나눈다면 다음과 같을 것이다.";}i:2;i:26993;}i:582;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:27157;}i:583;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:60:"angular.module('application', ['notifications', 'archive'])
";}i:2;i:27157;}i:584;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:27157;}i:585;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:254:"이렇게 하면 각 서비스를 재사용 가능한 하나의 모듈로 합칠 수 있다. 그리고 가장 상위(애플리케이션 레벨)의 모듈에서 애플리케이션에 필요한 모든 모듈에 대한 의존 관계를 정의할 수 있다.";}i:2;i:27223;}i:586;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:27477;}i:587;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:27477;}i:588;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:563:"다른 모듈에 의존하는 것이 가장 상위의 모듈에서만 가능한 것은 아니다. 각 모듈마다 자신이 사용할 자식 모듈에 대한 의존 관계를 정의할 수 있으며 이런 방식으로 모듈의 계층 구조가 만들어질 수 있다. 따라서 AngularJS의 모듈을 다룰 때는 관련되어 있긴 하지만 서로 다른 두 가지 계층 구조, 즉  모듈 계층 구조와 서비스 계층 구조(한 서비스는 다른 서비스나 값, 상수에 대해 의존 관계를 정의할 수 있음)를 고려해야 한다.";}i:2;i:27479;}i:589;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:28042;}i:590;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:28042;}i:591;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:264:"AngularJS 모듈은 서로 의존 관계를 가질 수 있으며, 모듈은 여러 개의 서비스를 가질 수 있다. 하지만 각 서비스도 역시 다른 서비스에 의존할 수 있다. 이로 인해 다음과 같은 질문을 생각해 볼 수 있다.";}i:2;i:28044;}i:592;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:28309;}i:593;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"ul";i:2;s:16:" class="extlist"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:28309;}i:594;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:28309;}i:595;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:28309;}i:596;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:1;i:3;s:5:"
  * ";}i:2;i:28309;}i:597;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:107:"하나의 AngularJS 모듈에 정의된 서비스가 다른 모듈의 서비스에 의존할 수 있는가?";}i:2;i:28314;}i:598;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:107:"하나의 AngularJS 모듈에 정의된 서비스가 다른 모듈의 서비스에 의존할 수 있는가?";}i:2;i:28314;}i:599;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:28421;}i:600;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:28421;}i:601;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:28421;}i:602;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:28421;}i:603;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:2;i:3;s:5:"
  * ";}i:2;i:28421;}i:604;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:175:"자식 모듈에 정의된 서비스가 부모 모듈에 정의된 서비스에 의존할 수 있는가? 아니면 자식 모듈에 정의된 서비스만 의존 가능한가?";}i:2;i:28426;}i:605;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:175:"자식 모듈에 정의된 서비스가 부모 모듈에 정의된 서비스에 의존할 수 있는가? 아니면 자식 모듈에 정의된 서비스만 의존 가능한가?";}i:2;i:28426;}i:606;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:28601;}i:607;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:28601;}i:608;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:28601;}i:609;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:28601;}i:610;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:2;i:3;s:5:"
  * ";}i:2;i:28601;}i:611;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:74:"특정 모듈에서만 접근 가능한 서비스를 만들 수 있는가?";}i:2;i:28606;}i:612;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:74:"특정 모듈에서만 접근 가능한 서비스를 만들 수 있는가?";}i:2;i:28606;}i:613;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:28680;}i:614;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:28680;}i:615;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:28680;}i:616;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:28680;}i:617;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:2;i:3;s:5:"
  * ";}i:2;i:28680;}i:618;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:98:"다른 모듈에서 같은 이름으로 정의된 여러 개의 서비스를 만들 수 있는가?";}i:2;i:28685;}i:619;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:98:"다른 모듈에서 같은 이름으로 정의된 여러 개의 서비스를 만들 수 있는가?";}i:2;i:28685;}i:620;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:28783;}i:621;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:28783;}i:622;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"ul";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:28783;}i:623;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:4;i:3;s:1:"
";}i:2;i:28783;}i:624;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:28785;}i:625;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:33:"모듈 간의 서비스 가시성";i:1;i:5;i:2;i:28785;}i:2;i:28785;}i:626;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:5;}i:2;i:28785;}i:627;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:28785;}i:628;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:191:"누구나 예상하다시피 자식 모듈에 정의된 서비스는 부모 모듈에 정의된 서비스에 주입할 수 있다. 다음 예제 코드를 보면서 확실히 이해해보자.";}i:2;i:28825;}i:629;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:29017;}i:630;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:279:"angular.module('app', ['engines']).factory('car', function ($log, dieselEngine) {
	return {
		start : function(){
			$log.info('Starting ' + dieselEngine.type);
		}
	};
});

angular.module('engines', []).factory('dieselEngine', function () {
	return {
		type : 'diesel'
	};
});
	";}i:2;i:29017;}i:631;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:29017;}i:632;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:252:"car 서비스는 app 모듈에 정의된 서비스다. 그리고 app 모듈은 dieselEngine 서비스가 정의된 engine 모듈과의 의존 관계가 있다고 정의했다. 따라서 dieselEngine 인스턴스는 car 서비스에 주입 가능하다.";}i:2;i:29313;}i:633;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:29565;}i:634;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:29565;}i:635;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:287:"여기서 놀라운 점은 형제 모듈에 정의된 서비스들끼리는 서로가 보인다는 점이다. 이제 car 서비스를 별개의 모듈로 정의하고 애플리케이션이 engines와 cars 모듈에 대한 의존 관계를 갖게 모듈 의존 관계를 변경해보자. ";}i:2;i:29567;}i:636;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:29855;}i:637;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:314:"angular.module('app', ['engines', 'cars'])
angular.module('cars', []).factory('car', function($log, dieselEngine) {
	return {
		start : function() {
			$log.info('Starting ' + dieselEngine.type);
		}
	};
});
  
angular.module('engines', []).factory('dieselEngine', function () {
	return {
		type : 'diesel'
	};
});";}i:2;i:29855;}i:638;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:29855;}i:639;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:96:"이렇게 변경해도 dieselEngine을 car에 주입하는데 역시 아무런 문제가 없다.";}i:2;i:30186;}i:640;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:30282;}i:641;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:30282;}i:642;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:428:"AngularJS가 전 모듈에 있는 모든 서비스를 하나로 합치기 때문에 애플리케이션 레벨의 서비스 이름은 유일해야 한다. 이런 특징은 하나의 모듈에 의존하면서 그 모듈의 특정 서비스를 오버라이드해야 하는 경우 유용하게 사용할 수 있다. 이전 예제에서 dieselEngine 서비스를 cars 모듈 안에 직접 정의해 이런 특징을 확인해 보자.";}i:2;i:30284;}i:643;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:30713;}i:644;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:354:"angular.module('app', ['engines', 'cars']).controller('AppCtrl', function ($scope, car) {
	car.start();
});

angular.module('cars', []).factory('car', function ($log, dieselEngine) {
	return {
		start : function() {
			$log.info('Starting ' + dieselEngine.type);
		}
	};
}).factory('dieselEngine', function () {
	return {
		type : 'custom diesel'
	};
});";}i:2;i:30713;}i:645;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:30713;}i:646;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:263:"여기서 car 서비스로 주입되는 dieselEngine 서비스는 car 서비스와 같은 모듈에 정의된 dieselEngine 서비스다. cars 모듈 레벨의 dieselEngine이 engines 모듈에 정의된 dieselEngine 서비스를 오버라이드 하는 것이다. ";}i:2;i:31085;}i:647;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:31348;}i:648;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:31348;}i:649;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:319:"현재 AngularJS 버전에서는 한 모듈에 정의된 모든 서비스는 다른 모든 모듈에서도 접근 가능하다. 다른 모듈로부터 서비스를 숨길 수 있는 방법은 현재 없다. 즉 이 글을 작성하는 지금, 특정 모듈에서만 접근 가능한 서비스는 지원하지 않는다.";}i:2;i:31350;}i:650;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:31669;}i:651;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:31671;}i:652;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:46:"AngularJS 모듈을 사용해야 하는 이유";i:1;i:5;i:2;i:31671;}i:2;i:31671;}i:653;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:5;}i:2;i:31671;}i:654;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:31671;}i:655;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:387:"AngularJS 모듈을 사용하면 애플리케이션에 존재하는 여러 개의 자바스크립트 파일을 구조화할 수 있다. 2장에서 애플리케이션을 여러 개의 모듈로 나누는 다양한 방법들과 그들의 장단점을 주로 살펴본다. 또한 작고 집약된 모듈은 필요한 서비스를 준비하기 편해 단위 테스트를 하기에도 좋다.";}i:2;i:31724;}i:656;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:32111;}i:657;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:32113;}i:658;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:29:"AngularJS와 나머지 세상";i:1;i:2;i:2;i:32113;}i:2;i:32113;}i:659;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:32113;}i:660;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:32155;}i:661;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:19:"jQuery와 AngularJS";i:1;i:3;i:2;i:32155;}i:2;i:32155;}i:662;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:32155;}i:663;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:32155;}i:664;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:355:"AngularJS와 제이쿼리에는 꼭 언급해야 하는 흥미로운 관계가 있다. 먼저 AngularJS는 제이쿼리의 간소화 버전을 소스의 한부분에 jqLite라는 이름으로 내장하며, 전체 제이쿼리 기능 중 DOM을 조작하는 루틴과 관련된 기능만으로 이뤄진 제이쿼리의 부분집합이라고 보면 된다.";}i:2;i:32185;}i:665;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:32540;}i:666;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:32540;}i:667;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:146:"AngularJS와 제이쿼리를 동시에 사용할 생각이라면 AngularJS 스크립트를 선언하기전에 제이쿼리를 선언해야 한다.";}i:2;i:32542;}i:668;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:32688;}i:669;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:32690;}i:670;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:19:"사과와 오렌지";i:1;i:4;i:2;i:32690;}i:2;i:32690;}i:671;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:32690;}i:672;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:32690;}i:673;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:493:"우선 제이쿼리는 DOM조작을 쉽게 할 목적으로 탄생한 라이브러리고 문서 탐색, 이벤트 처리, 애니메이션, Ajax 통신 등에 집중한다. 반면 AngularJS는 최신 웹 2.0 애플리케이션 개발의 모든 면을 처리하려고 노력하는 완전한 프레임워크다. 가장 중요한 것은 AngularJS의 UI 구성 방식으로 선언적으로 표현된 뷰가 모델 변경 사항에 바뀌는 상태라서 jQuery와 완전히 다르다는 것이다. ";}i:2;i:32718;}i:674;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:33211;}i:675;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:33211;}i:676;a:3:{i:0;s:12:"document_end";i:1;a:0:{}i:2;i:33211;}}