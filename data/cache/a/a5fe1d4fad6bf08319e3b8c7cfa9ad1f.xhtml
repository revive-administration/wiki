
<h1 class="sectionedit1" id="완전_탐색_0">완전 탐색 0</h1>
<div class="level1">

</div>
<!-- EDIT1 SECTION "완전 탐색 0" [1-30] -->
<h2 class="sectionedit2" id="비트마스크">비트마스크</h2>
<div class="level2">

<ul  class="extlist">
  <li><div class="li">비트마스크
<ul  class="extlist">
  <li><div class="li">비트(bit) 연산을 사용해서 부분 집합을 표현할 수 있다.</div></li>
</ul>
</li>
  <li><div class="li">비트 연산
<ul  class="extlist">
  <li><div class="li">&amp;(and), |(or), ~(not), ^(xor)</div></li>
  <li><div class="li">xor 연산은 두 값의 각 자릿수를 비교해, 값이 0으로 같거나 1로 같으면 0, 다르면 1을 계산한다.</div></li>
  <li><div class="li">두 수 A와 B를 비트 연산 하는 경우에는 가장 뒤의 자리부터 하나씩 연산을 수행하면 된다.</div></li>
  <li><div class="li">not 연산의 경우에는 자료형에 따라 결과가 달라진다. </div></li>
  <li><div class="li">shift left(«), shift right(»)
<ul  class="extlist">
  <li><div class="li">A « B (A를 왼쪽으로 B비트만큼 민다.)</div></li>
  <li><div class="li">1 « 0 = 1</div></li>
  <li><div class="li">1 « 1 = 2</div></li>
  <li><div class="li">1 « 2 = 4</div></li>
  <li><div class="li">1 « 3 = 8</div></li>
  <li><div class="li">1 « 4 = 16</div></li>
  <li><div class="li">3 « 3 = 24 </div></li>
  <li><div class="li">5 « 10 = 5120</div></li>
</ul>
</li>
  <li><div class="li">A « B : A x 2^B와 같다.</div></li>
  <li><div class="li">A » B는 A/2^B와 같다.</div></li>
  <li><div class="li">(A + B) / 2는 (A + B) » 1로 쓸 수 있다.</div></li>
  <li><div class="li">어떤 수가 홀수 인지 판별하는 if(N % 2 == 1)은 if(N &amp; 1)로 줄여 쓸 수 있다.</div></li>
  <li><div class="li">{1, 3, 4, 5, 9} = 570
<ul  class="extlist">
  <li><div class="li">1 추가하기 570 </div></li>
</ul>
</li>
  <li><div class="li">현재 집합이 S 일때
<ul  class="extlist">
  <li><div class="li">i를 추가
<ul  class="extlist">
  <li><div class="li">S | (1 « i)</div></li>
</ul>
</li>
  <li><div class="li">i를 검사
<ul  class="extlist">
  <li><div class="li">S &amp; (1 « i)</div></li>
</ul>
</li>
  <li><div class="li">i를 제거
<ul  class="extlist">
  <li><div class="li">S &amp; ~(1 « i)</div></li>
</ul>
</li>
  <li><div class="li">i를 토글
<ul  class="extlist">
  <li><div class="li">S ^ (1 « i)</div></li>
</ul>
</li>
</ul>
</li>
  <li><div class="li">집합 11723
<ul  class="extlist">
  <li><div class="li">완료</div></li>
</ul>
</li>
</ul>
</li>
  <li><div class="li">배열이 더 편리하지만 비트마스크를 사용하는 이유
<ul  class="extlist">
  <li><div class="li">집합을 배열의 인덱스로 표현할 수 있기 때문이다.</div></li>
  <li><div class="li">상태 다이나믹을 할 때 자주 사용하게 된다.</div></li>
</ul>
</li>
  <li><div class="li">bitset
<ul  class="extlist">
  <li><div class="li">비트마스크는 STL의 bitset을 이용해서 더 쉽게 나타낼 수 있다.</div></li>
</ul>
</li>
</ul>

</div>
<!-- EDIT2 SECTION "비트마스크" [31-1612] -->
<h1 class="sectionedit3" id="순열">순열</h1>
<div class="level1">

<ul  class="extlist">
  <li><div class="li">순열
<ul  class="extlist">
  <li><div class="li">1 ~ N 까지로 이루어진 순열</div></li>
  <li><div class="li">크기가 N인 순열은 총 N! 개가 존재한다</div></li>
</ul>
</li>
  <li><div class="li">다음 순열
<ul  class="extlist">
  <li><div class="li">1) A[i-1] &lt; A[i]를 만족하는 가장 큰 i를 찾는다.</div></li>
  <li><div class="li">2) j &gt;= i 이면서 A[j] &gt; A[i-1]를 만족하는 가장 큰 j를 찾는다.</div></li>
  <li><div class="li">3) A[i-1]과 A[j]를 swap 한다.</div></li>
  <li><div class="li">4) A[i]부터 순열을 뒤집는다.</div></li>
</ul>
</li>
  <li><div class="li">순열의 순서
<ul  class="extlist">
  <li><div class="li">1부터 N까지의 수를 임의로 배열한 순열은 총 N! 가지가 있다.</div></li>
  <li><div class="li">어떤 순열이 몇번째 순열인지 구하는 방법</div></li>
  <li><div class="li">N = 7
<ul  class="extlist">
  <li><div class="li">1,?,?,… : 6!개</div></li>
  <li><div class="li">2,?,?,… : 6!개</div></li>
  <li><div class="li">5,1,?,… : 5!개</div></li>
  <li><div class="li">5,2,1,?,.. : 4!개</div></li>
</ul>
</li>
  <li><div class="li">문제 1722 </div></li>
</ul>
</li>
</ul>

</div>
<!-- EDIT3 SECTION "순열" [1613-] -->