
<h1 class="sectionedit1" id="intro_to_software_engineering_and_object-oriented_programming_2_2">Intro to software engineering and object-oriented programming (2/2)</h1>
<div class="level1">

</div>
<!-- EDIT1 SECTION "Intro to software engineering and object-oriented programming (2/2)" [1-82] -->
<h2 class="sectionedit2" id="oop">OOP</h2>
<div class="level2">
<ul>
<li class="level1"><div class="li"> What is problem?</div>
<ul>
<li class="level2"><div class="li"> Traditional structured programming is not sufficient for large software maintenance and reuse</div>
</li>
</ul>
</li>
<li class="level1"><div class="li"> Solution? OOP</div>
<ul>
<li class="level2"><div class="li"> Improve reusability</div>
</li>
<li class="level2"><div class="li"> SW reliability is increased using reusable modules which are already well-tested and error-free</div>
</li>
</ul>
</li>
</ul>

</div>
<!-- EDIT2 SECTION "OOP" [83-366] -->
<h2 class="sectionedit3" id="oop_concepts">OOP concepts</h2>
<div class="level2">
<ul>
<li class="level1"><div class="li"> Data Abstraction</div>
<ul>
<li class="level2"><div class="li"> Abstract Data Type</div>
</li>
</ul>
</li>
<li class="level1"><div class="li"> Object </div>
<ul>
<li class="level2"><div class="li"> Information hiding/encapsulation</div>
</li>
</ul>
</li>
<li class="level1"><div class="li"> Class</div>
</li>
<li class="level1"><div class="li"> Inheritance</div>
</li>
<li class="level1"><div class="li"> Polymorphism</div>
</li>
<li class="level1"><div class="li"> Dynamic binding</div>
</li>
</ul>

</div>
<!-- EDIT3 SECTION "OOP concepts" [367-552] -->
<h2 class="sectionedit4" id="adt_abstract_data_type">ADT(Abstract Data Type)</h2>
<div class="level2">
<ul>
<li class="level1"><div class="li"> A set of data variables and associated operations that are precisely specified independent of any particular implementation.</div>
</li>
<li class="level1"><div class="li"> ADT = data + operations (no implementation)</div>
</li>
<li class="level1"><div class="li"> In OOP</div>
<ul>
<li class="level2"><div class="li"> We don&#039;t define data for defining procedures,</div>
</li>
<li class="level2"><div class="li"> But we do define procedures necessary for defining data</div>
</li>
<li class="level2"><div class="li"> ADT is a type that combines data and the procedures</div>
</li>
</ul>
</li>
</ul>

</div>
<!-- EDIT4 SECTION "ADT(Abstract Data Type)" [553-949] -->
<h2 class="sectionedit5" id="class">class</h2>
<div class="level2">
<ul>
<li class="level1"><div class="li"> In C++, “class” is used for defining ADT</div>
</li>
<li class="level1"><div class="li"> Defines attributes and behaviors of an object</div>
<ul>
<li class="level2"><div class="li"> Attributes : member variables</div>
</li>
<li class="level2"><div class="li"> Behaviors : member functions</div>
</li>
</ul>
</li>
</ul>

</div>
<!-- EDIT5 SECTION "class" [950-1134] -->
<h2 class="sectionedit6" id="object">Object</h2>
<div class="level2">
<ul>
<li class="level1"><div class="li"> Object is an instance of class</div>
</li>
<li class="level1"><div class="li"> Consists of</div>
<ul>
<li class="level2"><div class="li"> Internal data</div>
</li>
<li class="level2"><div class="li"> Internal operations</div>
</li>
<li class="level2"><div class="li"> Interface operations</div>
</li>
</ul>
</li>
<li class="level1"><div class="li"> Only class methods can access the internal data of an object</div>
</li>
<li class="level1"><div class="li"> Message Passing</div>
<ul>
<li class="level2"><div class="li"> Request some work to other object through calling a method</div>
</li>
</ul>
</li>
</ul>

</div>
<!-- EDIT6 SECTION "Object" [1135-1428] -->
<h2 class="sectionedit7" id="information_hiding_encapsulation">Information Hiding/Encapsulation</h2>
<div class="level2">
<ul>
<li class="level1"><div class="li"> Encapsulation conceals the functional details of a class from objects that send message to it.</div>
</li>
<li class="level1"><div class="li"> Internal data of an object can be modified only through an interface</div>
</li>
</ul>

</div>
<!-- EDIT7 SECTION "Information Hiding/Encapsulation" [1429-1646] -->
<h2 class="sectionedit8" id="class_vs_object">Class vs Object</h2>
<div class="level2">
<ul>
<li class="level1"><div class="li"> Each object generated by the same class is different objects </div>
<ul>
<li class="level2"><div class="li"> When the objects are created, different memory space and address are assigned to each object with unique identifier.</div>
</li>
<li class="level2"><div class="li"> Objects created by the same class share the class&#039;s methods</div>
</li>
<li class="level2"><div class="li"> An object can be dynamically constructed or destructed in memory during run-time</div>
</li>
</ul>
</li>
</ul>

</div>
<!-- EDIT8 SECTION "Class vs Object" [1647-2017] -->
<h2 class="sectionedit9" id="inheritance">Inheritance</h2>
<div class="level2">
<ul>
<li class="level1"><div class="li"> A child class (Sub class) inherits attributes and behaviors of parent classes (super class)</div>
</li>
<li class="level1"><div class="li"> and can define their own attributes and behaviors</div>
</li>
<li class="level1"><div class="li"> The properties (var, method) of a child class should be mostly similar to the properties of parent classes</div>
</li>
<li class="level1"><div class="li"> Goal : Object reuse</div>
</li>
<li class="level1"><div class="li"> In large SW development, code reuse reduce costs.</div>
</li>
<li class="level1"><div class="li"> We can reuse well-defined classes</div>
</li>
<li class="level1"><div class="li"> Related programs can define new classes using inheritance</div>
</li>
</ul>

</div>
<!-- EDIT9 SECTION "Inheritance" [2018-2481] -->
<h2 class="sectionedit10" id="polymorphism">Polymorphism</h2>
<div class="level2">
<ul>
<li class="level1"><div class="li"> Allows the same method (message) to different meaning</div>
</li>
<li class="level1"><div class="li"> the ability of objects belonging to different data types to respond to method class of the same name, each one according to an appropriate type-specific behavior</div>
</li>
<li class="level1"><div class="li"> In C++</div>
<ul>
<li class="level2"><div class="li"> Virtual function</div>
</li>
<li class="level2"><div class="li"> Operator overloading</div>
</li>
<li class="level2"><div class="li"> Function overloading</div>
</li>
<li class="level2"><div class="li"> Template</div>
</li>
</ul>
</li>
</ul>

</div>
<!-- EDIT10 SECTION "Polymorphism" [2482-2834] -->
<h2 class="sectionedit11" id="dynamic_binding">Dynamic Binding</h2>
<div class="level2">
<ul>
<li class="level1"><div class="li"> Binding</div>
<ul>
<li class="level2"><div class="li"> Determination of association between object name(identifier) and its actual memory address and value</div>
</li>
</ul>
</li>
<li class="level1"><div class="li"> Static binding</div>
<ul>
<li class="level2"><div class="li"> Binding occurs at compile-time</div>
</li>
<li class="level2"><div class="li"> Faster compared to dynamic binding</div>
</li>
</ul>
</li>
<li class="level1"><div class="li"> Dynamic binding</div>
<ul>
<li class="level2"><div class="li"> Binding occurs in run-time</div>
</li>
<li class="level2"><div class="li"> Relatively slow</div>
</li>
<li class="level2"><div class="li"> Sending a message to a pointer of an object. The pointer is determined in run-time and appropriate message is sent.</div>
</li>
<li class="level2"><div class="li"> In C++, virtual function</div>
</li>
</ul>
</li>
</ul>

</div>
<!-- EDIT11 SECTION "Dynamic Binding" [2835-3307] -->
<h2 class="sectionedit12" id="benefits_of_object_model">Benefits of Object Model</h2>
<div class="level2">
<ul>
<li class="level1"><div class="li"> Builds a system that evolves over time</div>
<ul>
<li class="level2"><div class="li"> Entendible (이해할 수 있는)</div>
</li>
<li class="level2"><div class="li"> Stable</div>
</li>
</ul>
</li>
<li class="level1"><div class="li"> Thinking in terms of objects and classes is much easier for humans</div>
</li>
<li class="level1"><div class="li"> Separating the client and implmentor prevents accidental damage through data encapsulation</div>
</li>
<li class="level1"><div class="li"> Reusuability</div>
</li>
</ul>

</div>
<!-- EDIT12 SECTION "Benefits of Object Model" [3308-] -->