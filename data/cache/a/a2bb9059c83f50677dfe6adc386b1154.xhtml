
<h1 class="sectionedit1" id="장_nodejs-to-angularjs_스택_소개">1장 Node.js-to-AngularJS 스택 소개</h1>
<div class="level1">

</div>
<!-- EDIT1 SECTION "1장 Node.js-to-AngularJS 스택 소개" [1-54] -->
<h2 class="sectionedit2" id="nodejs-to-angularjs_스택_컴포넌트_이해">Node.js-to-AngularJS 스택 컴포넌트 이해</h2>
<div class="level2">

</div>
<!-- EDIT2 SECTION "Node.js-to-AngularJS 스택 컴포넌트 이해" [55-114] -->
<h3 class="sectionedit3" id="익스프레스">익스프레스</h3>
<div class="level3">

<p>
익스프레스 모듈은 웹 서버 역항르 한다. 익스프레스 모듈이 Node.js에서 실행되므로 해당 모듈을 설정하고 구현하고 제어하기가 쉽다. 익스프레스 모듈은 웹 요청을 처리하기 위한 몇 가지 주요 컴포넌트들을 제공하기 위해 Node.js를 확장한다. 코드 몇 줄만 추가하면 Node.js에서 실행되는 웹 서버를 구현할 수 있다. 
</p>

<p>
예를 들어, 익스프레스 모듈은 사용자가 연결될 목적지 경로를 쉽게 설정할 수 있도록 한다. 또한 HTTP 요청과 응답 객체로 작업하는 면에서 쿠키와 HTTP 헤더와 같은 것들을 포함해 훌륭한 기능을 제공한다.
</p>

<p>
다음은 익스프레스의 매우 유용한 기능들 중 일부를 보여준다.
</p>
<ul>
<li class="level1"><div class="li"> 경로 관리 : 익스프레스는 서버의 Node.js 스크립트 기능에 바로 연결되는 경로(<abbr title="Uniform Resource Locator">URL</abbr> 엔드포인트)를 정의하기 쉽게 한다.</div>
</li>
<li class="level1"><div class="li"> 에러 처리 : 익스프레스에는 &#039;document not found&#039;에러와 그 외 다른 에러들을 처리하는 에러 핸들링 기능이 내장되어 있다.</div>
</li>
<li class="level1"><div class="li"> 쉬운 통합 : 익스프레스 서버는 Nginx나 Varnish와 같은 기존 리버스 프락시 시스템 뒤에 쉽게 구현할 수 있다. 이는 기존의 보안된 시스템에 쉽게 통합 가능하도록 한다.</div>
</li>
<li class="level1"><div class="li"> 쿠키, 세션관리와 캐시관리</div>
</li>
</ul>

</div>
<!-- EDIT3 SECTION "익스프레스" [115-] -->