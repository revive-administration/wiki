
<h1 class="sectionedit1" id="intro_to_software_engineering_and_object-oriented_programming_1_2">Intro. to Software Engineering and Object-Oriented Programming (1/2)</h1>
<div class="level1">

</div>
<!-- EDIT1 SECTION "Intro. to Software Engineering and Object-Oriented Programming (1/2)" [1-84] -->
<h2 class="sectionedit2" id="software_crisis">Software Crisis</h2>
<div class="level2">
<ul>
<li class="level1"><div class="li"> rapid increases in computer power and the complexity of the problem (SW)</div>
</li>
<li class="level1"><div class="li"> Software technology can not follow the complexity</div>
</li>
<li class="level1"><div class="li"> the difficulty of writing <strong>correct, understandable, and verifiable</strong> computer programs</div>
</li>
<li class="level1"><div class="li"> SW Symptoms </div>
<ul>
<li class="level2"><div class="li"> Unmanageable</div>
</li>
<li class="level2"><div class="li"> difficult to maintain</div>
</li>
<li class="level2"><div class="li"> Over-budget</div>
</li>
<li class="level2"><div class="li"> Over-time (late)</div>
</li>
<li class="level2"><div class="li"> Poor quality</div>
</li>
<li class="level2"><div class="li"> Software often did not meet requirements</div>
</li>
</ul>
</li>
<li class="level1"><div class="li"> Cause : complexity</div>
</li>
</ul>

</div>
<!-- EDIT2 SECTION "Software Crisis" [85-531] -->
<h2 class="sectionedit3" id="software_life_cycle">Software Life Cycle</h2>
<div class="level2">
<ul>
<li class="level1"><div class="li"> 1. Requirement Analysis</div>
<ul>
<li class="level2"><div class="li"> Problem specification</div>
</li>
</ul>
</li>
<li class="level1"><div class="li"> 2. Design</div>
<ul>
<li class="level2"><div class="li"> Program structure</div>
</li>
<li class="level2"><div class="li"> Module specification</div>
</li>
</ul>
</li>
<li class="level1"><div class="li"> 3. Implementation</div>
</li>
<li class="level1"><div class="li"> 4. Test</div>
<ul>
<li class="level2"><div class="li"> Unit test</div>
</li>
<li class="level2"><div class="li"> integration test</div>
</li>
</ul>
</li>
<li class="level1"><div class="li"> 5. Maintenance</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> Fred Brooks states that over 90% of the costs of a typical system arise in the maintenance phase, and that any successful piece of software will inevitably be maintained</div>
</li>
</ul>

</div>
<!-- EDIT3 SECTION "Software Life Cycle" [532-952] -->
<h2 class="sectionedit4" id="software_engineering">Software Engineering</h2>
<div class="level2">
<ul>
<li class="level1"><div class="li"> Definition</div>
<ul>
<li class="level2"><div class="li"> The application of a systematic, disciplined, quantifiable approach to the development, operation, and maintenance of software.</div>
</li>
<li class="level2"><div class="li"> The establishment and use of sound engineering principles in order to economically obtain software that is reliable and works efficiently.</div>
</li>
</ul>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> Goals</div>
<ul>
<li class="level2"><div class="li"> produce a correct, efficient, and reliable software</div>
</li>
<li class="level2"><div class="li"> Minimize the cost of software development and maintenance</div>
</li>
</ul>
</li>
</ul>

</div>
<!-- EDIT4 SECTION "Software Engineering" [953-1413] -->
<h2 class="sectionedit5" id="goals_of_se">Goals of SE</h2>
<div class="level2">
<ul>
<li class="level1"><div class="li"> Maintainability</div>
<ul>
<li class="level2"><div class="li"> the ability to easily make changes, enhancements, or improvements</div>
</li>
</ul>
</li>
<li class="level1"><div class="li"> Dependability</div>
<ul>
<li class="level2"><div class="li"> the ability to rely on the software to function properly when needed</div>
</li>
</ul>
</li>
<li class="level1"><div class="li"> Efficiency</div>
<ul>
<li class="level2"><div class="li"> the ability for software to use computing resources effectively (mainly space and time).</div>
</li>
</ul>
</li>
<li class="level1"><div class="li"> Usability</div>
<ul>
<li class="level2"><div class="li"> the ability for the end user to easily and effectively put the software to proper use.</div>
</li>
</ul>
</li>
</ul>

</div>
<!-- EDIT5 SECTION "Goals of SE" [1414-1840] -->
<h2 class="sectionedit6" id="software_properties">Software Properties</h2>
<div class="level2">
<ul>
<li class="level1"><div class="li"> Modularity - divide and conquer</div>
</li>
<li class="level1"><div class="li"> Encapsulation - hide the implementation.</div>
</li>
<li class="level1"><div class="li"> Localization - collect similar things together</div>
</li>
<li class="level1"><div class="li"> Abstraction - simplifying complex reality</div>
</li>
<li class="level1"><div class="li"> Uniformity - make everything look similar</div>
</li>
<li class="level1"><div class="li"> Completeness - do everything require</div>
</li>
<li class="level1"><div class="li"> Confirmability - be able to prove that the software works properly.</div>
</li>
</ul>

</div>
<!-- EDIT6 SECTION "Software Properties" [1841-2210] -->
<h2 class="sectionedit7" id="programming_methodology">Programming Methodology</h2>
<div class="level2">
<ul>
<li class="level1"><div class="li"> Unstructured Programming</div>
</li>
<li class="level1"><div class="li"> Procedural Programming</div>
</li>
<li class="level1"><div class="li"> Modular(Structured) Programming</div>
</li>
<li class="level1"><div class="li"> Object Oriented Programming</div>
</li>
</ul>

</div>
<!-- EDIT7 SECTION "Programming Methodology" [2211-2371] -->
<h2 class="sectionedit8" id="unstructured_programming">Unstructured Programming</h2>
<div class="level2">
<ul>
<li class="level1"><div class="li"> Consists of only one main program</div>
</li>
<li class="level1"><div class="li"> a sequence of commands or statements</div>
</li>
<li class="level1"><div class="li"> Only global data</div>
</li>
<li class="level1"><div class="li"> Use goto statement</div>
</li>
<li class="level1"><div class="li"> Disadvantage</div>
<ul>
<li class="level2"><div class="li"> If there is the same statement sequence?</div>
</li>
</ul>
</li>
<li class="level1"><div class="li"> Spaghetti Code</div>
<ul>
<li class="level2"><div class="li"> Code with complex and tangled structure</div>
<ul>
<li class="level3"><div class="li"> With goto&#039;s jumping all over the place</div>
</li>
<li class="level3"><div class="li"> Almost impossible to understand</div>
</li>
<li class="level3"><div class="li"> Hard to follow the flow</div>
</li>
<li class="level3"><div class="li"> Difficult to modify</div>
</li>
</ul>
</li>
</ul>
</li>
</ul>

</div>
<!-- EDIT8 SECTION "Unstructured Programming" [2372-2808] -->
<h2 class="sectionedit9" id="procedural_programming">Procedural Programming</h2>
<div class="level2">
<ul>
<li class="level1"><div class="li"> The abuses of spaghetti code led to structured programming languages to support procedural programming</div>
</li>
<li class="level1"><div class="li"> Program </div>
<ul>
<li class="level2"><div class="li"> A sequence of procedure calls</div>
</li>
</ul>
</li>
<li class="level1"><div class="li"> Procedure</div>
<ul>
<li class="level2"><div class="li"> the same sequence of statements</div>
</li>
</ul>
</li>
<li class="level1"><div class="li"> More structure : reduce repetition</div>
</li>
<li class="level1"><div class="li"> More error-free </div>
</li>
<li class="level1"><div class="li"> Structure Programming</div>
<ul>
<li class="level2"><div class="li"> Top-down approach</div>
</li>
<li class="level2"><div class="li"> Divide and conquer</div>
</li>
<li class="level2"><div class="li"> Functional decomposition</div>
</li>
</ul>
</li>
</ul>

</div>
<!-- EDIT9 SECTION "Procedural Programming" [2809-3218] -->
<h2 class="sectionedit10" id="modular_programming">Modular Programming</h2>
<div class="level2">
<ul>
<li class="level1"><div class="li"> SW is composed of separate parts(module)</div>
</li>
<li class="level1"><div class="li"> procedures of a common functionality are grouped together into separate modules</div>
</li>
<li class="level1"><div class="li"> module</div>
<ul>
<li class="level2"><div class="li"> Program uses modules through interface</div>
</li>
<li class="level2"><div class="li"> Interface : visible, implementation : hidden</div>
</li>
<li class="level2"><div class="li"> Improve maintainability</div>
</li>
</ul>
</li>
</ul>

</div>
<!-- EDIT10 SECTION "Modular Programming" [3219-3517] -->
<h2 class="sectionedit11" id="don_t_use_global_variables">Don&#039;t use Global Variables</h2>
<div class="level2">
<ul>
<li class="level1"><div class="li"> Using global variables : unsafe!</div>
<ul>
<li class="level2"><div class="li"> Sharing data (global var) is a violation of modular programming</div>
</li>
<li class="level2"><div class="li"> All modules can access all global variables without any restriction</div>
<ul>
<li class="level3"><div class="li"> No module can be developed and understood independently</div>
</li>
</ul>
</li>
<li class="level2"><div class="li"> Global Data are dangerous</div>
<ul>
<li class="level3"><div class="li"> This makes all modules dependent on one another</div>
</li>
</ul>
</li>
</ul>
</li>
</ul>

</div>
<!-- EDIT11 SECTION "Don't use Global Variables" [3518-3890] -->
<h3 class="sectionedit12" id="modularized_data">Modularized Data</h3>
<div class="level3">
<ul>
<li class="level1"><div class="li"> Localize data inside the modules</div>
</li>
<li class="level1"><div class="li"> This makes modules more independent of one another</div>
</li>
<li class="level1"><div class="li"> Safe!</div>
</li>
</ul>

</div>
<!-- EDIT12 SECTION "Modularized Data" [3891-4021] -->
<h2 class="sectionedit13" id="problems_of_procedural_modular_programming">Problems of Procedural / Modular Programming</h2>
<div class="level2">
<ul>
<li class="level1"><div class="li"> Decoupled (separation of) data and operations</div>
</li>
<li class="level1"><div class="li"> Doesn&#039;t work well in large systems</div>
<ul>
<li class="level2"><div class="li"> Difficult to debug, extend, and maintain</div>
</li>
<li class="level2"><div class="li"> Code reuse limited</div>
</li>
</ul>
</li>
<li class="level1"><div class="li"> Explicit(명시적) creation and destruction</div>
</li>
<li class="level1"><div class="li"> Many others compared to OOP</div>
</li>
</ul>

</div>
<!-- EDIT13 SECTION "Problems of Procedural / Modular Programming" [4022-4320] -->
<h2 class="sectionedit14" id="oop_object_oriented_programming">OOP (Object Oriented Programming)</h2>
<div class="level2">
<ul>
<li class="level1"><div class="li"> Program consists of a set of interacting objects.</div>
</li>
<li class="level1"><div class="li"> Each object keeps its own state.</div>
</li>
<li class="level1"><div class="li"> Combine data and operation into an object</div>
</li>
</ul>

</div>
<!-- EDIT14 SECTION "OOP (Object Oriented Programming)" [4321-4504] -->
<h2 class="sectionedit15" id="what_is_an_object">What is an Object?</h2>
<div class="level2">
<ul>
<li class="level1"><div class="li"> Object is an instance of a class</div>
</li>
<li class="level1"><div class="li"> Objects have</div>
<ul>
<li class="level2"><div class="li"> identity</div>
</li>
<li class="level2"><div class="li"> attribute</div>
</li>
<li class="level2"><div class="li"> behavior (method)</div>
</li>
<li class="level2"><div class="li"> relationships with other objects</div>
</li>
</ul>
</li>
</ul>

</div>
<!-- EDIT15 SECTION "What is an Object?" [4505-4684] -->
<h2 class="sectionedit16" id="views_of_oop">Views of OOP</h2>
<div class="level2">
<ul>
<li class="level1"><div class="li"> OOP does not consider the problem domain as just a flow of processings</div>
</li>
<li class="level1"><div class="li"> OOP defines objects related to the problem domain and regards these object communicate information each other (through message passing).</div>
</li>
<li class="level1"><div class="li"> On the other hand, structured programming treats data and operations independently even though they are related.</div>
</li>
</ul>

</div>
<!-- EDIT16 SECTION "Views of OOP" [4685-5043] -->
<h2 class="sectionedit17" id="software_components_부품화">Software Components (부품화)</h2>
<div class="level2">
<ul>
<li class="level1"><div class="li"> In OO programs, an object works as a component(부품) of software</div>
</li>
<li class="level1"><div class="li"> Interface of an object should be well defined.</div>
</li>
</ul>

</div>
<!-- EDIT17 SECTION "Software Components (부품화)" [5044-5210] -->
<h2 class="sectionedit18" id="why_object_oriented">Why Object Oriented?</h2>
<div class="level2">
<ul>
<li class="level1"><div class="li"> Good for developing large software</div>
</li>
<li class="level1"><div class="li"> Maintainability</div>
</li>
<li class="level1"><div class="li"> Reuse software, not rewrite</div>
</li>
<li class="level1"><div class="li"> Increase</div>
<ul>
<li class="level2"><div class="li"> Programmer productivity</div>
</li>
<li class="level2"><div class="li"> Quality of software</div>
</li>
<li class="level2"><div class="li"> Understandability of software</div>
</li>
<li class="level2"><div class="li"> Scalability (extensibility, reusability) of software</div>
</li>
<li class="level2"><div class="li"> Lifetime (maintainability) of software</div>
</li>
</ul>
</li>
</ul>

</div>
<!-- EDIT18 SECTION "Why Object Oriented?" [5211-] -->