
<h1 class="sectionedit1" id="chapter_05_스트래티지_패턴">Chapter 05 스트래티지 패턴</h1>
<div class="level1">

</div>
<!-- EDIT1 SECTION "Chapter 05 스트래티지 패턴" [1-46] -->
<h2 class="sectionedit2" id="로봇_만들기">5.1 로봇 만들기</h2>
<div class="level2">

</div>
<!-- EDIT2 SECTION "5.1 로봇 만들기" [47-78] -->
<h2 class="sectionedit3" id="문제점">5.2 문제점</h2>
<div class="level2">

</div>
<!-- EDIT3 SECTION "5.2 문제점" [79-103] -->
<h3 class="sectionedit4" id="기존_로봇의_공격과_이동_방법을_수정하는_경우">5.2.1 기존 로봇의 공격과 이동 방법을 수정하는 경우</h3>
<div class="level3">

</div>
<!-- EDIT4 SECTION "5.2.1 기존 로봇의 공격과 이동 방법을 수정하는 경우" [104-183] -->
<h3 class="sectionedit5" id="새로운_로봇에_공격_이동_방법을_추가_수정하는_경우">5.2.2 새로운 로봇에 공격/이동 방법을 추가/수정하는 경우</h3>
<div class="level3">

</div>
<!-- EDIT5 SECTION "5.2.2 새로운 로봇에 공격/이동 방법을 추가/수정하는 경우" [184-268] -->
<h2 class="sectionedit6" id="해결책">5.3 해결책</h2>
<div class="level2">

</div>
<!-- EDIT6 SECTION "5.3 해결책" [269-294] -->
<h2 class="sectionedit7" id="스트래티지_패턴">5.4 스트래티지 패턴</h2>
<div class="level2">

<p>
스트래티지 패턴(Strategy Pattern)은 전략을 쉽게 바꿀 수 있도록 해주는 디자인 패턴이다. 여기서 전략이란 어떤 목적을 달성하기 위해 일을 수행하는 방식, 비즈니스 규칙, 문제를 해결하는 알고리즘 등으로 이해할 수 있다. 프로그램에서 전략을 실행할 때는 쉽게 전략을 바꿔야 할 필요가 있는 경우가 많이 발생한다. 특히 게임 프로그래밍에서 게임 캐릭터가 자신이 처한 상황에 따라 공격이나 행동하는 방식을 바꾸고 싶을 때 스트래티지 패턴은 매우 유용하다.
</p>

<p>
<strong>KeyPoint_</strong> 스트래티지 패턴은 같은 문제를 해결하는 여러 알고리즘이 클래스별로 캡슐화되어 있고 이들이 필요할 때 교체할 수 있도록 함으로써 동일한 문제를 다른 알고리즘으로 해결할 수 있게 하는 디자인 패턴이다.
</p>

</div>
<!-- EDIT7 SECTION "5.4 스트래티지 패턴" [295-] -->