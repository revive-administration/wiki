a:32:{i:0;a:3:{i:0;s:14:"document_start";i:1;a:0:{}i:2;i:0;}i:1;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:33:"Chapter 05 스트래티지 패턴";i:1;i:1;i:2;i:1;}i:2;i:1;}i:2;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:1;}i:2;i:1;}i:3;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:47;}i:4;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:20:"5.1 로봇 만들기";i:1;i:2;i:2;i:47;}i:2;i:47;}i:5;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:47;}i:6;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:79;}i:7;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:13:"5.2 문제점";i:1;i:2;i:2;i:79;}i:2;i:79;}i:8;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:79;}i:9;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:104;}i:10;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:69:"5.2.1 기존 로봇의 공격과 이동 방법을 수정하는 경우";i:1;i:3;i:2;i:104;}i:2;i:104;}i:11;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:104;}i:12;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:184;}i:13;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:76:"5.2.2 새로운 로봇에 공격/이동 방법을 추가/수정하는 경우";i:1;i:3;i:2;i:184;}i:2;i:184;}i:14;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:184;}i:15;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:269;}i:16;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:13:"5.3 해결책";i:1;i:2;i:2;i:269;}i:2;i:269;}i:17;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:269;}i:18;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:295;}i:19;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:26:"5.4 스트래티지 패턴";i:1;i:2;i:2;i:295;}i:2;i:295;}i:20;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:295;}i:21;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:295;}i:22;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:611:"스트래티지 패턴(Strategy Pattern)은 전략을 쉽게 바꿀 수 있도록 해주는 디자인 패턴이다. 여기서 전략이란 어떤 목적을 달성하기 위해 일을 수행하는 방식, 비즈니스 규칙, 문제를 해결하는 알고리즘 등으로 이해할 수 있다. 프로그램에서 전략을 실행할 때는 쉽게 전략을 바꿔야 할 필요가 있는 경우가 많이 발생한다. 특히 게임 프로그래밍에서 게임 캐릭터가 자신이 처한 상황에 따라 공격이나 행동하는 방식을 바꾸고 싶을 때 스트래티지 패턴은 매우 유용하다.";}i:2;i:333;}i:23;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:944;}i:24;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:944;}i:25;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:946;}i:26;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"KeyPoint_";}i:2;i:948;}i:27;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:957;}i:28;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:277:" 스트래티지 패턴은 같은 문제를 해결하는 여러 알고리즘이 클래스별로 캡슐화되어 있고 이들이 필요할 때 교체할 수 있도록 함으로써 동일한 문제를 다른 알고리즘으로 해결할 수 있게 하는 디자인 패턴이다.";}i:2;i:959;}i:29;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1236;}i:30;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1238;}i:31;a:3:{i:0;s:12:"document_end";i:1;a:0:{}i:2;i:1238;}}