
<h1 class="sectionedit1" id="장_트리">8장. 트리</h1>
<div class="level1">

</div>
<!-- EDIT1 SECTION "8장. 트리" [1-27] -->
<h2 class="sectionedit2" id="이진탐색트리">05 이진탐색트리</h2>
<div class="level2">

<p>
이진탐색트리는 트리를 효율적으로 사용하기 위해서 일정한 형태로 정의한 것이다. 그리고 탐색을 위한 자료구조로 이진 트리를 사용하기 위해서 저장할 데이터의 크기에 따라 노드의 위치를 정의한 것이 이진 탐색 트리이다. 탐색을 하려면 찾을 자료를 식별할 수 있는 유일한 값이 필요한데 이것을 키(key)라고 한다.
</p>

</div>
<!-- EDIT2 SECTION "05 이진탐색트리" [28-483] -->
<h2 class="sectionedit3" id="히프">06 히프</h2>
<div class="level2">

</div>
<!-- EDIT3 SECTION "06 히프" [484-506] -->
<h3 class="sectionedit4" id="히프의_개요">(1) 히프의 개요</h3>
<div class="level3">

<p>
히프는 완전 이진 트리에 있는 노드 중에서 키값이 가장 큰 노드나 키값이 가장 작은 노드를 찾기 위해서 만든 자료구조다. 키값이 가장 큰 노드를 찾기 위한 히프를 최대히프라 하고, 키값이 가장 작은 노드를 찾기 위한 히프를 최소 히프라고 한다.
</p>

<p>
최대 히프는 부모 노드의 키값이 자식 노드의 키값보다 항상 크거나 같은 크기의 관계를 가지는 노드들의 완전이진트리다. 그러므로 최대 히프에서는 키값이 가장 큰 노드가 루트 노드가 된다. 일반적으로 히프는 최대 히프를 읨하며, 같은 키값의 노드가 중복될 수 있다.
</p>

</div>
<!-- EDIT4 SECTION "(1) 히프의 개요" [507-1227] -->
<h3 class="sectionedit5" id="히프의_추상_자료형">(2) 히프의 추상 자료형</h3>
<div class="level3">

<p>
히프에 대한 기본 연산을 추상 자료형으로 정의하면 다음과 같다.
</p>
<pre class="code">ADT Heap
  데이터 : n개의 원소로 구성된 완전 이진 트리로서 각 노드의 키값은 그의 자식 노드의 키값보다 크거나 같다.
  연산 :
    createHeap()
    isEmpty(heap)
    insertHeap(heap, item)
    deleteHeap(heap)
End Heap()</pre>

</div>
<!-- EDIT5 SECTION "(2) 히프의 추상 자료형" [1228-1636] -->
<h3 class="sectionedit6" id="히프에서의_삽입_연산">(3) 히프에서의 삽입 연산</h3>
<div class="level3">

</div>
<!-- EDIT6 SECTION "(3) 히프에서의 삽입 연산" [1637-] -->