a:242:{i:0;a:3:{i:0;s:14:"document_start";i:1;a:0:{}i:2;i:0;}i:1;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:33:"1장 오브젝트와 의존관계";i:1;i:1;i:2;i:1;}i:2;i:1;}i:2;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:1;}i:2;i:1;}i:3;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:49;}i:4;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:17:"1.1 초난감 DAO";i:1;i:2;i:2;i:49;}i:2;i:49;}i:5;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:49;}i:6;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"ul";i:2;s:16:" class="extlist"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:78;}i:7;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:78;}i:8;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:78;}i:9;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:1;i:3;s:5:"
  * ";}i:2;i:78;}i:10;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:123:"DAO : DB를 사용해 데이터를 조회하거나 조작하는 기능을 전담하도록 만든 오브젝트를 말한다.";}i:2;i:83;}i:11;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:123:"DAO : DB를 사용해 데이터를 조회하거나 조작하는 기능을 전담하도록 만든 오브젝트를 말한다.";}i:2;i:83;}i:12;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:206;}i:13;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:206;}i:14;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"ul";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:206;}i:15;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:4;i:3;s:1:"
";}i:2;i:206;}i:16;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:207;}i:17;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:10:"1.1.1 User";i:1;i:3;i:2;i:207;}i:2;i:207;}i:18;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:207;}i:19;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"ul";i:2;s:16:" class="extlist"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:228;}i:20;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:228;}i:21;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:228;}i:22;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:1;i:3;s:5:"
  * ";}i:2;i:228;}i:23;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:460:"JavaBean : 원래 비주얼 툴에서 조작 가능한 컴포넌트를 말한다. 자바의 주력 개발 플랫폼이 웹 기반의 엔터프라이 방식으로 바뀌면서 비주얼 컴포넌트로서의 자바빈은 인기를 잃어 갔지만 몇 가지 코딩 관례는 자바빈 스타일의 오브젝트를 사용하는 오픈소스 기술을 통해 계속 이어져 왔다. 다음 두 가지 관례를 따라 만들어진 오브젝트를 가리킨다. ";}i:2;i:233;}i:24;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:460:"JavaBean : 원래 비주얼 툴에서 조작 가능한 컴포넌트를 말한다. 자바의 주력 개발 플랫폼이 웹 기반의 엔터프라이 방식으로 바뀌면서 비주얼 컴포넌트로서의 자바빈은 인기를 잃어 갔지만 몇 가지 코딩 관례는 자바빈 스타일의 오브젝트를 사용하는 오픈소스 기술을 통해 계속 이어져 왔다. 다음 두 가지 관례를 따라 만들어진 오브젝트를 가리킨다. ";}i:2;i:233;}i:25;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"ul";i:2;s:16:" class="extlist"";}i:2;i:1;i:3;s:7:"
    * ";}i:2;i:693;}i:26;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:7:"
    * ";}i:2;i:693;}i:27;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:7:"
    * ";}i:2;i:693;}i:28;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:2;i:3;s:7:"
    * ";}i:2;i:693;}i:29;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:217:"디폴트 생성자 : 자바빈은 파라미터가 없는 디폴트 생성자를 갖고 있어야 한다. 툴이나 프레임워크에서 리플렉션을 이용해 오브젝트를 생성하기 때문에 필요하다. ";}i:2;i:700;}i:30;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:217:"디폴트 생성자 : 자바빈은 파라미터가 없는 디폴트 생성자를 갖고 있어야 한다. 툴이나 프레임워크에서 리플렉션을 이용해 오브젝트를 생성하기 때문에 필요하다. ";}i:2;i:700;}i:31;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:7:"
    * ";}i:2;i:917;}i:32;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:7:"
    * ";}i:2;i:917;}i:33;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:7:"
    * ";}i:2;i:917;}i:34;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:7:"
    * ";}i:2;i:917;}i:35;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:2;i:3;s:7:"
    * ";}i:2;i:917;}i:36;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:167:"프로퍼티 : 자바빈이 노출하는 이름을 가진 속성을 말한다. getter setter로 불리는 수정자/접근자 메서드를 통해 조회할 수 있다.";}i:2;i:924;}i:37;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:167:"프로퍼티 : 자바빈이 노출하는 이름을 가진 속성을 말한다. getter setter로 불리는 수정자/접근자 메서드를 통해 조회할 수 있다.";}i:2;i:924;}i:38;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:7:"
    * ";}i:2;i:1091;}i:39;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:7:"
    * ";}i:2;i:1091;}i:40;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:7:"
    * ";}i:2;i:1091;}i:41;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:7:"
    * ";}i:2;i:1091;}i:42;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:2;i:3;s:7:"
    * ";}i:2;i:1091;}i:43;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:372:"(참고)리플렉션 : 정의된 것을 찾는 행위로서 동적 언어의 특징이다. 클래스나 메서드는 컴파일 되어 메모리에 올라가 프로그램 입장에서는 그것을 호출하거나 사용할 수만 있는데 리플렉션을 지원하는 언어는 그것 뿐 아니라 아예 정의 자체를 찾아와 조작하는 기능까지 제공한다.";}i:2;i:1098;}i:44;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:372:"(참고)리플렉션 : 정의된 것을 찾는 행위로서 동적 언어의 특징이다. 클래스나 메서드는 컴파일 되어 메모리에 올라가 프로그램 입장에서는 그것을 호출하거나 사용할 수만 있는데 리플렉션을 지원하는 언어는 그것 뿐 아니라 아예 정의 자체를 찾아와 조작하는 기능까지 제공한다.";}i:2;i:1098;}i:45;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:1470;}i:46;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:1470;}i:47;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"ul";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:1470;}i:48;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:1470;}i:49;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"ul";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:1470;}i:50;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:4;i:3;s:1:"
";}i:2;i:1470;}i:51;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1472;}i:52;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:13:"1.1.2 UserDao";i:1;i:3;i:2;i:1472;}i:2;i:1472;}i:53;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:1472;}i:54;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1497;}i:55;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:46:"1.1.3 main()을 이용한 DAO 테스트 코드";i:1;i:3;i:2;i:1497;}i:2;i:1497;}i:56;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:1497;}i:57;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1555;}i:58;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:17:"1.2 DAO의 분리";i:1;i:2;i:2;i:1555;}i:2;i:1555;}i:59;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:1555;}i:60;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1584;}i:61;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:25:"1.2.1 관심사의 분리";i:1;i:3;i:2;i:1584;}i:2;i:1584;}i:62;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:1584;}i:63;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"ul";i:2;s:16:" class="extlist"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:1620;}i:64;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:1620;}i:65;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:1620;}i:66;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:1;i:3;s:5:"
  * ";}i:2;i:1620;}i:67;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:253:"관심사의 분리(Separation of Concerns) : 관심이 같은 것끼리는 하나의 객체 안으로 또는 친한 객체로 모이게 하고, 관심이 다른 것은 가능한 한 따로 떨어져서 서로 영향을 주지 않도록 분리하는 것";}i:2;i:1625;}i:68;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:253:"관심사의 분리(Separation of Concerns) : 관심이 같은 것끼리는 하나의 객체 안으로 또는 친한 객체로 모이게 하고, 관심이 다른 것은 가능한 한 따로 떨어져서 서로 영향을 주지 않도록 분리하는 것";}i:2;i:1625;}i:69;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:1878;}i:70;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:1878;}i:71;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"ul";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:1878;}i:72;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:4;i:3;s:1:"
";}i:2;i:1878;}i:73;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1879;}i:74;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:35:"1.2.2 커넥션 만들기의 추출";i:1;i:3;i:2;i:1879;}i:2;i:1879;}i:75;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:1879;}i:76;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1926;}i:77;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:23:"UserDao의 관심사항";i:1;i:4;i:2;i:1926;}i:2;i:1926;}i:78;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:1926;}i:79;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"ul";i:2;s:16:" class="extlist"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:1957;}i:80;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:1957;}i:81;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:1957;}i:82;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:1;i:3;s:5:"
  * ";}i:2;i:1957;}i:83;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:321:"첫째는 DB와 연결을 위한 커넥션을 어떻게 가져올까라는 관심이다. 더 세분화해서 어떤 DB를 쓰고, 어떤 드라이버를 사용할 것이고, 어떤 로그인 정보를 쓰는데, 그 커넥션을 생성하는 방법은 또 어떤 것이다라는 것까지 구분해서 볼 수도 있다. ";}i:2;i:1962;}i:84;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:321:"첫째는 DB와 연결을 위한 커넥션을 어떻게 가져올까라는 관심이다. 더 세분화해서 어떤 DB를 쓰고, 어떤 드라이버를 사용할 것이고, 어떤 로그인 정보를 쓰는데, 그 커넥션을 생성하는 방법은 또 어떤 것이다라는 것까지 구분해서 볼 수도 있다. ";}i:2;i:1962;}i:85;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:2283;}i:86;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:2283;}i:87;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:2283;}i:88;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:2283;}i:89;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:2;i:3;s:5:"
  * ";}i:2;i:2283;}i:90;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:291:"둘째는 사용자 등록을 위해 DB에 보낼 SQL 문장을 담은 Statement를 만들고 실행하는 것이다. 여기서의 관심은 파리미터로 넘어온 사용자 정보를 Statement에 바인딩 시키고, Statement에 담긴 SQL을 DB를 통해 실행시키는 방법이다. ";}i:2;i:2288;}i:91;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:291:"둘째는 사용자 등록을 위해 DB에 보낼 SQL 문장을 담은 Statement를 만들고 실행하는 것이다. 여기서의 관심은 파리미터로 넘어온 사용자 정보를 Statement에 바인딩 시키고, Statement에 담긴 SQL을 DB를 통해 실행시키는 방법이다. ";}i:2;i:2288;}i:92;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:2579;}i:93;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:2579;}i:94;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:2579;}i:95;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:2579;}i:96;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:2;i:3;s:5:"
  * ";}i:2;i:2579;}i:97;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:172:"셋째는 작업이 끝나면 사용한 리소스인 Statement와 Connection 오브젝트를 닫아줘서 소중한 공유 리소스를 시스템에 돌려주는 것이다.";}i:2;i:2584;}i:98;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:172:"셋째는 작업이 끝나면 사용한 리소스인 Statement와 Connection 오브젝트를 닫아줘서 소중한 공유 리소스를 시스템에 돌려주는 것이다.";}i:2;i:2584;}i:99;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:2756;}i:100;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:2756;}i:101;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"ul";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:2756;}i:102;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:4;i:3;s:1:"
";}i:2;i:2756;}i:103;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:2757;}i:104;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:33:"중복 코드의 메서드 추출";i:1;i:4;i:2;i:2757;}i:2;i:2757;}i:105;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:2757;}i:106;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2757;}i:107;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:98:"똑같은 코드를 2번이상 사용할 경우 메서드로 추출하는 것을 고려해 본다.";}i:2;i:2799;}i:108;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2898;}i:109;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:2898;}i:110;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:57:"변경사항에 대한 검증 : 리팩토링과 테스트";i:1;i:4;i:2;i:2898;}i:2;i:2898;}i:111;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:2898;}i:112;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"ul";i:2;s:16:" class="extlist"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:2963;}i:113;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:2963;}i:114;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:2963;}i:115;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:1;i:3;s:5:"
  * ";}i:2;i:2963;}i:116;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:159:"리팩토링 : 기존의 코드를 외부의 동작방식에는 변화 없이 내부 구조를 변경해서 재구성하는 작업 또는 기술을 말한다. ";}i:2;i:2968;}i:117;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:159:"리팩토링 : 기존의 코드를 외부의 동작방식에는 변화 없이 내부 구조를 변경해서 재구성하는 작업 또는 기술을 말한다. ";}i:2;i:2968;}i:118;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:3127;}i:119;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:3127;}i:120;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"ul";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:3127;}i:121;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:4;i:3;s:1:"
";}i:2;i:3127;}i:122;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:3128;}i:123;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:38:"1.2.3 DB 커넥션 만들기의 독립";i:1;i:3;i:2;i:3128;}i:2;i:3128;}i:124;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:3128;}i:125;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3128;}i:126;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:185:"UserDao 소스코드를 N사와 D사에 제공해주지 않고도 고객 스스로 원하는 DB 커넥션 생성 방식을 적용해 가면서 UserDao를 사용하게 할 수 있을까?";}i:2;i:3177;}i:127;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3363;}i:128;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:3363;}i:129;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:23:"상속을 통한 확장";i:1;i:4;i:2;i:3363;}i:2;i:3363;}i:130;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:3363;}i:131;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3363;}i:132;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:967:"기존 UserDao 코드를 한 단계 더 분리하면 된다. UserDao에서 메서드의 구현 코드를 제거하고 getConnection을 추상 메서드로 만들어 놓는다. UserDao를 구입한 포털사들은 UserDao클래스를 상속해서 각각의 서브 클래스를 만든다. 이렇게 슈퍼클래스에 기본적인 로직의 흐름을 만들고, 그 기능의 일부를 추상 메서드나 오버라이딩이 가능한 protected 메서드 등으로 만든 뒤 서브 클래스에서 이런 메서드를 필요에 맞게 구현해서 사용하도록 하는 방법을 디자인 패턴에서 템플릿 메서드 패턴이라고 한다. 하지만 이 방법은 상속을 사용했다는 단점이 있다. 다중상속 문제가 걸릴 수 있으며 상속을 통한 상하위 클래스의 관계는 생각보다 밀접하다. 확장된 기능인 DB 커넥션을 생성하는 코드를 다른 DAO 클래스에 적용할 수 없다는 것도 큰 단점이다.";}i:2;i:3395;}i:133;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4362;}i:134;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:4364;}i:135;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:17:"1.3 DAO의 확장";i:1;i:2;i:2;i:4364;}i:2;i:4364;}i:136;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:4364;}i:137;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:4394;}i:138;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:25:"1.3.1 클래스의 분리";i:1;i:3;i:2;i:4394;}i:2;i:4394;}i:139;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:4394;}i:140;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4394;}i:141;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:88:"이번에는 상속관계가 아닌 완전히 독립적인 클래스로 만들어 보자";}i:2;i:4430;}i:142;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4519;}i:143;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:4519;}i:144;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:31:"1.3.2 인터페이스의 도입";i:1;i:3;i:2;i:4519;}i:2;i:4519;}i:145;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:4519;}i:146;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4519;}i:147;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:193:"추상화란 어떤 것들의 공통적인 성격을 뽑아내어 이를 따로 분리해내는 작업이다. 인터페이스는 어떤 일을 하겠다는 기능만 정의해놓은 것이다. ";}i:2;i:4561;}i:148;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4755;}i:149;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:4755;}i:150;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:35:"1.3.3 관계설정 책임의 분리";i:1;i:3;i:2;i:4755;}i:2;i:4755;}i:151;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:4755;}i:152;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4755;}i:153;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:177:"UserDao의 클라이언트에서 UserDao를 사용하기 전에, 먼저 UserDao가 어떤 ConnectionMaker의 구현 클래스를 사용할지를 결정하도록 만들어보자.";}i:2;i:4801;}i:154;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4979;}i:155;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:4979;}i:156;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:22:"1.3.4 원칙과 패턴";i:1;i:3;i:2;i:4979;}i:2;i:4979;}i:157;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:4979;}i:158;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:5012;}i:159;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:20:"개방 폐쇄 원칙";i:1;i:4;i:2;i:5012;}i:2;i:5012;}i:160;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:5012;}i:161;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5012;}i:162;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:97:"클래스나 모듈은 확장에는 열려 있어야 하고 변경에는 닫혀 있어야 한다.";}i:2;i:5042;}i:163;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5140;}i:164;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:5140;}i:165;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:36:"높은 응집도와 낮은 결합도";i:1;i:4;i:2;i:5140;}i:2;i:5140;}i:166;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:5140;}i:167;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:5185;}i:168;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:13:"전략 패턴";i:1;i:4;i:2;i:5185;}i:2;i:5185;}i:169;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:5185;}i:170;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5185;}i:171;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:273:"자신의 기능 맥락에서 필요에 따라 변경이 필요한 알고리즘을 인터페이스를 통해 통째로 외부로 분리시키고, 이를 구현한 구체적인 알고리즘 클래스를 필요에 따라 바꿔서 사용할 수 있게 하는 디자인 패턴";}i:2;i:5207;}i:172;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5481;}i:173;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:5481;}i:174;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:25:"1.4 제어의 역전(IoC)";i:1;i:2;i:2;i:5481;}i:2;i:5481;}i:175;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:5481;}i:176;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:5518;}i:177;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:28:"1.4.1 오브젝트 팩토리";i:1;i:3;i:2;i:5518;}i:2;i:5518;}i:178;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:5518;}i:179;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:5557;}i:180;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:9:"팩토리";i:1;i:4;i:2;i:5557;}i:2;i:5557;}i:181;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:5557;}i:182;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:5575;}i:183;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:28:"설계도로서의 팩토리";i:1;i:4;i:2;i:5575;}i:2;i:5575;}i:184;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:5575;}i:185;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:5612;}i:186;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:38:"1.4.2 오브젝트 팩토리의 활용";i:1;i:3;i:2;i:5612;}i:2;i:5612;}i:187;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:5612;}i:188;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:5661;}i:189;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:55:"1.4.3 제어권의 이전을 통한 제어관계 역전";i:1;i:3;i:2;i:5661;}i:2;i:5661;}i:190;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:5661;}i:191;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:5727;}i:192;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:20:"1.5 스프링의 IoC";i:1;i:2;i:2;i:5727;}i:2;i:5727;}i:193;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:5727;}i:194;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:5760;}i:195;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:55:"1.5.1 오브젝트 팩토리를 이용한 스프링 IoC";i:1;i:3;i:2;i:5760;}i:2;i:5760;}i:196;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:5760;}i:197;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:5826;}i:198;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:47:"어플리케이션 컨텍스트와 설정정보";i:1;i:4;i:2;i:5826;}i:2;i:5826;}i:199;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:5826;}i:200;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"ul";i:2;s:16:" class="extlist"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:5881;}i:201;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:5881;}i:202;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:5881;}i:203;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:1;i:3;s:5:"
  * ";}i:2;i:5881;}i:204;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:113:"스프링에서의 빈 : 스프링이 제어권을 가지고 직접 만들고 관계를 부여하는 오브젝트";}i:2;i:5886;}i:205;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:113:"스프링에서의 빈 : 스프링이 제어권을 가지고 직접 만들고 관계를 부여하는 오브젝트";}i:2;i:5886;}i:206;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:5999;}i:207;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:5999;}i:208;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:5999;}i:209;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:5999;}i:210;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:2;i:3;s:5:"
  * ";}i:2;i:5999;}i:211;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:138:"스프링 빈 : 스프링 컨테이너가 생성과 관계설정, 사용 등을 제어해주는 제어의 역전이 적용된 오브젝트";}i:2;i:6004;}i:212;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:138:"스프링 빈 : 스프링 컨테이너가 생성과 관계설정, 사용 등을 제어해주는 제어의 역전이 적용된 오브젝트";}i:2;i:6004;}i:213;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:6142;}i:214;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:6142;}i:215;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:6142;}i:216;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:6142;}i:217;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:2;i:3;s:5:"
  * ";}i:2;i:6142;}i:218;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:92:"빈 팩토리 : 빈의 생성과 관계설정 같은 제어를 담당하는 IoC 오브젝트";}i:2;i:6147;}i:219;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:92:"빈 팩토리 : 빈의 생성과 관계설정 같은 제어를 담당하는 IoC 오브젝트";}i:2;i:6147;}i:220;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:6239;}i:221;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:5:"
  * ";}i:2;i:6239;}i:222;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:6239;}i:223;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:6239;}i:224;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:2;i:3;s:5:"
  * ";}i:2;i:6239;}i:225;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:191:"어플리케이션 컨텍스트 : IoC 방식을 따라 만들어진 일종의 빈 팩토리, 별도의 정보를 참고해서 빈의 생성, 관계설정 등의 제어 작업을 총괄한다.";}i:2;i:6244;}i:226;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:191:"어플리케이션 컨텍스트 : IoC 방식을 따라 만들어진 일종의 빈 팩토리, 별도의 정보를 참고해서 빈의 생성, 관계설정 등의 제어 작업을 총괄한다.";}i:2;i:6244;}i:227;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:6435;}i:228;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:6435;}i:229;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"ul";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:6435;}i:230;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:4;i:3;s:1:"
";}i:2;i:6435;}i:231;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:6436;}i:232;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:58:"DaoFactory를 사용하는 애플리케이션 컨텍스트";i:1;i:4;i:2;i:6436;}i:2;i:6436;}i:233;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:6436;}i:234;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6436;}i:235;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:390:"DaoFactory를 스프링의 빈 팩토리가 사용할 수있는 본격적인 설정정보로 만들어 보자. 먼저 스프링이 빈 팩토리를 위한 오브젝트 설정을 담당하는 클래스라고 인식할 수 있도록 @Configuration이라는 애노테이션을 추가한다. 또한 오브젝트를 만들어주는 메서드에는 @Bean이라는 애노테이션을 붙여준다.";}i:2;i:6503;}i:236;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6893;}i:237;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6893;}i:238;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:647:"이제 DaoFactory를 설정정보로 사용하는 애플리케이션 컨텍스트를 만들어보자. 애플리케이션 컨텍스트는 ApplicationContext 타입의 오브젝트다. ApplicationContext를 구현한 클래스는 여러 가지가 있는데 Dao처럼 @Configuration이 붙은 자바 코드를 설정정보로 사용하려면 AnnotationConfigApplicationContext를 이용하면 된다. 애플리케이션 컨텍스트를 만들 때 생성자 파라미터로 DaoFactory 클래스를 넣어준다. 이제 이렇게 준비된 ApplicationContext의 getBean()이라는 메서드를 이용해 UserDao의 오브젝트를 가져올 수 있다.";}i:2;i:6895;}i:239;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7542;}i:240;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:7542;}i:241;a:3:{i:0;s:12:"document_end";i:1;a:0:{}i:2;i:7542;}}