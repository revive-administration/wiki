
<h1 class="sectionedit1" id="object-oriented_design_principles">7. Object-Oriented design principles</h1>
<div class="level1">

</div>
<!-- EDIT1 SECTION "7. Object-Oriented design principles" [1-51] -->
<h2 class="sectionedit2" id="software_design_principles">Software design principles</h2>
<div class="level2">

</div>
<!-- EDIT2 SECTION "Software design principles" [52-89] -->
<h3 class="sectionedit3" id="solid_원칙">SOLID 원칙</h3>
<div class="level3">
<ul>
<li class="level1"><div class="li"> 단일 책임 원칙(The single-responsibility principle) - SRP</div>
<ul>
<li class="level2"><div class="li"> 클래스는 변경되어야 할 이유가 한개뿐이다.</div>
</li>
<li class="level2"><div class="li"> Cohesion(응집도) and Coupling(결합도)</div>
<ul>
<li class="level3"><div class="li"> Cohesion - How closely related are the different responsibilities of a module</div>
</li>
<li class="level3"><div class="li"> Coupling - How much one module relies on another</div>
</li>
<li class="level3"><div class="li"> Goal is low coupling and high cohesion</div>
</li>
</ul>
</li>
</ul>
</li>
<li class="level1"><div class="li"> 개방 폐쇄 원칙(The open-closed principle) - OCP</div>
<ul>
<li class="level2"><div class="li"> 소프트웨어는 확장에 열려있고 변경에 닫혀있어야 한다.</div>
</li>
</ul>
</li>
<li class="level1"><div class="li"> 리스코프 치환원칙 (The Liskov substitution principle) - LSP</div>
<ul>
<li class="level2"><div class="li"> 서브타입은 베이스타입으로 대체 가능해야한다 </div>
</li>
</ul>
</li>
<li class="level1"><div class="li"> 의존성 역전의 원칙 (The dependency inversion principle) - DIP</div>
<ul>
<li class="level2"><div class="li"> High-level modules는 로우레벨 모듈에 의존해서는 안된다 각각은 추상성에 의존해야한다</div>
</li>
<li class="level2"><div class="li"> 추상화는 구체적이여서는 안된다. 디테일은 추상화에 의존해야한다.</div>
</li>
</ul>
</li>
<li class="level1"><div class="li"> 인터페이스 분리의 원칙 (The interface segregation principle) - ISP</div>
<ul>
<li class="level2"><div class="li"> 클라이언트는 그들이 사용하지 않는 메서드에 의존해서는 안된다.</div>
</li>
</ul>
</li>
</ul>

</div>
<!-- EDIT3 SECTION "SOLID 원칙" [90-] -->