
<h1 class="sectionedit1" id="dfs">DFS</h1>
<div class="level1">

<p>
깊이 우선 탐색(depth-first search, DFS)은 맹목적 탐색 방법의 하나로 탐색 트리의 최근에 첨가된 노드를 선택하고, 이 노드에 적용 가능한 동작자 중 하나를 적용하여 트리에 다음 수준(level)의 한 개의 자식노드를 첨가하며, 첨가된 자식 노드가 목표노드일 때까지 앞의 자식 노드의 첨가 과정을 반복해 가는 방식이다.
</p>

</div>
<!-- EDIT1 SECTION "DFS" [1-434] -->
<h2 class="sectionedit2" id="깊이_제한과_백트래킹">깊이 제한과 백트래킹</h2>
<div class="level2">

<p>
탐색 과정이 시작 노드에서 한없이 깊이 진행되는 것을 막기 위해 깊이 제한(depth bound)을 사용한다. 깊이 제한에 도달할 때가지 목표 노드가 발견되지 않으면 최근에 첨가된 노드의 부모노드로 되돌아와서, 부모노드에 이전과는 다른 동작자를 적용하여 새로운 자식노드를 생성한다. 여기서 부모노드로 되돌아오는 과정을 백트래킹(backtracking)이라 한다.
</p>

</div>
<!-- EDIT2 SECTION "깊이 제한과 백트래킹" [435-944] -->
<h2 class="sectionedit3" id="알고리즘">알고리즘</h2>
<div class="level2">

<p>
만약 트리가 아닌 그래프를 탐색하게 된다면 약간의 변화가 필요하다.
</p>

<p>
우선 그래프에서의 깊이(depth)를 결정할 필요가 있다. 일반적으로 그래프에서는 루트 노드의 깊이를 0으로 하며, 임이의 노드의 깊이는 이의 부모 중 가장 깊이가 작은 것의 깊이에 1을 더한 값으로 정의한다. 따라서 그래프에서의 깊이우선탐색은 OPEN에 있는 노드 중 가장 깊은 것을 택하여 확장시키게 된다. 후계 노드가 생성되어 이 중에 이미 OPEN이나 CLOSED에 있는 것이 있다면, 깊이를 재조정하여야 한다.
</p>

<p>
여기서 알 수 있는 것은 일반적인 그래프를 탐색하는 경우라도, 탐색 과정에 의하여 얻어지는 노드들과 포인터들은 역시 탐색 트리를 형성한다는 것이다. 즉, 포인터들은 오직 하나의 부모를 가리키게 된다.
</p>

</div>
<!-- EDIT3 SECTION "알고리즘" [945-1877] -->
<h2 class="sectionedit4" id="장점과_단점">장점과 단점</h2>
<div class="level2">

</div>
<!-- EDIT4 SECTION "장점과 단점" [1878-1906] -->
<h3 class="sectionedit5" id="장점">장점</h3>
<div class="level3">

<ul  class="extlist">
  <li><div class="li">단지 현 경로상의 노드들만을 기억하면 되므로 저장공간의 수요가 비교적 적다.</div></li>
  <li><div class="li">목표노드가 깊은 단계에 있을 경우 해를 빨리 구할 수 있다.</div></li>
</ul>

</div>
<!-- EDIT5 SECTION "장점" [1907-2118] -->
<h3 class="sectionedit6" id="단점">단점</h3>
<div class="level3">

<ul  class="extlist">
  <li><div class="li">해가 없는 경로에 깊이 빠질 가능성이 있다. 따라서 실제의 경우 미리 지정한 임의의 깊이까지만 탐색하고 목표노드를 발견하지 못함녀 다음의 경로를 따라 탐색하는 방법이 유용할 수 있다.</div></li>
  <li><div class="li">얻어진 해가 최단경로가 된다는 보장이 없다. </div></li>
</ul>

</div>
<!-- EDIT6 SECTION "단점" [2119-] -->