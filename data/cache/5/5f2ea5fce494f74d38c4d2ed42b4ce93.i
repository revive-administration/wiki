a:17:{i:0;a:3:{i:0;s:14:"document_start";i:1;a:0:{}i:2;i:0;}i:1;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:36:"Lecture 2.1 - Higher-Order functions";i:1;i:1;i:2;i:1;}i:2;i:1;}i:2;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:1;}i:2;i:1;}i:3;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1;}i:4;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:59:"Functional languager treat functions as first-class values.";}i:2;i:52;}i:5;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:111;}i:6;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:111;}i:7;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:103:"This means that, like any other value, a function can be passed as a parameter and returned as aresult.";}i:2;i:113;}i:8;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:216;}i:9;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:216;}i:10;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:49:"This provides a flexible way to compose programs.";}i:2;i:218;}i:11;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:267;}i:12;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:267;}i:13;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:119:"Functions that take other functions as parameters or that return functions as results are called higher order functions";}i:2;i:269;}i:14;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:388;}i:15;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:388;}i:16;a:3:{i:0;s:12:"document_end";i:1;a:0:{}i:2;i:388;}}