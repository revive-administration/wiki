
<h1 class="sectionedit1" id="chapter_01_객체지향_모델링">Chapter 01 객체지향 모델링</h1>
<div class="level1">

</div>
<!-- EDIT1 SECTION "Chapter 01 객체지향 모델링" [1-48] -->
<h2 class="sectionedit2" id="모델링">1.1 모델링</h2>
<div class="level2">

<p>
모델의 역할
</p>
<ul>
<li class="level1"><div class="li"> 서로의 해석을 공유해 합의를 이루거나 해석의 타당성을 검토한다</div>
</li>
<li class="level1"><div class="li"> 현재 시스템 또는 앞으로 개발할 시스템의 원하는 모습을 가시화한다.</div>
</li>
<li class="level1"><div class="li"> 시스템의 구조와 행위를 명세화할 수 있으며 시스템을 구축하는 틀을 제공한다.</div>
</li>
</ul>

</div>
<!-- EDIT2 SECTION "1.1 모델링" [49-393] -->
<h2 class="sectionedit3" id="uml">1.2 UML</h2>
<div class="level2">

<p>
UML은 요구 분석, 시스템 설계, 시스템 구현 등의 시스템 개발 과정에서 개발자 사이의 의사 소통이 원활하게 이루어지도록 표준화한 통합 모델링 언어다. 이 언어는 객체 관련 표준화 기구인 <abbr title="Oh my God">OMG</abbr>(Object Management Group)에서 1997년 11월 제임스 럼버의 객체 모델링 기술, 이바 야콥슨의 OOSE, 그래디 부치의 OOAD 방법론 등을 통합해 만들었다.
</p>

<p>
현재 UML 2.0에서는 시스템의 구조와 동작을 표현하는 13개 다이어그램을 제공하는데, 이와 같이 많은 다이어그램을 제공하는 이유는 다양한 관점에서 시스템을 모델링하기 위함이다. 
</p>

</div>
<!-- EDIT3 SECTION "1.2 UML" [394-1095] -->
<h2 class="sectionedit4" id="클래스_다이어그램">1.3 클래스 다이어그램</h2>
<div class="level2">

</div>
<!-- EDIT4 SECTION "1.3 클래스 다이어그램" [1096-1137] -->
<h3 class="sectionedit5" id="클래스">1.3.1 클래스</h3>
<div class="level3">

<p>
표 1-2 접근 제어자
</p>
<div class="table sectionedit6"><table class="inline">
	<thead>
	<tr class="row0">
		<th class="col0"> 접근 제어자 </th><th class="col1"> 표시 </th><th class="col2"> 설명 </th>
	</tr>
	</thead>
	<tr class="row1">
		<td class="col0"> public </td><td class="col1"> + </td><td class="col2"> 어떤 클래스의 객체에서든 접근 가능 </td>
	</tr>
	<tr class="row2">
		<td class="col0"> private </td><td class="col1"> - </td><td class="col2"> 이 클래스에서 생성된 객체들만 접근 가능 </td>
	</tr>
	<tr class="row3">
		<td class="col0"> protected </td><td class="col1"> # </td><td class="col2"> 이 클래스와 동일 패키지에 있거나 상속 관계에 있는 하위 클래스의 객체들만 접근 가능 </td>
	</tr>
	<tr class="row4">
		<td class="col0"> package(default) </td><td class="col1"> ~ </td><td class="col2"> 동일 패키지에 있는 클래스의 객체들만 접근 가능 </td>
	</tr>
</table></div>
<!-- EDIT6 TABLE [1189-1601] --><pre class="code">Keypoint : 클래스는 공통의 속성과 책임을 갖는 객체들의 집합이자 실제 객체를 생성하는 설계도다.</pre>

</div>
<!-- EDIT5 SECTION "1.3.1 클래스" [1138-1738] -->
<h3 class="sectionedit7" id="관계">1.3.2 관계</h3>
<div class="level3">

<p>
표 1-4 클래스들 사이의 관계
</p>
<div class="table sectionedit8"><table class="inline">
	<thead>
	<tr class="row0">
		<th class="col0"> 관계 </th><th class="col1"> 설명 </th>
	</tr>
	</thead>
	<tr class="row1">
		<td class="col0"> 연관 관계(Association) </td><td class="col1"> 클래스들이 개념상 서로 연결되었음을 나타낸다. 실선이나 화살표로 표시하며 보통은 한 클래스가 다른 클래스에서 제공하는 기능을 사용하는 상황일 때 표시한다. </td>
	</tr>
	<tr class="row2">
		<td class="col0"> 일반화 관계(Generalization) </td><td class="col1"> 객체지향 개념에서는 상속 관계라고 한다. 한 클래스가 다른 클래스를 포함하는 상위 개념일 때 이를 IS-A 관계라고 하며 UML에서는 일반화 관계로 모델링한다. 속이 빈 화살표를 사용해 표시한다. </td>
	</tr>
	<tr class="row3">
		<td class="col0">집합 관계(Composition, Aggregation) </td><td class="col1"> 클래스들 사이의 전체 또는 부분 같은 관계를 나타낸다. 집약aggregation 관계와 합성composition 관계가 존재한다. </td>
	</tr>
	<tr class="row4">
		<td class="col0"> 의존 관계(Dependency) </td><td class="col1"> 연관 관계와 같이 한 클래스가 다른 클래스에서 제공되는 기능을 사용할 때를 나타낸다. 차이점은 두 클래스의 관계가 한 메서드를 실행하는 동안과 같은, 매우 짧은 시간만 유지된다는 점이다. 점선 화살표를 사용해 표시한다.</td>
	</tr>
	<tr class="row5">
		<td class="col0"> 실체화 관계(Realization) </td><td class="col1"> 책임들의 집합인 이 인터페이스와 이 책임들을 실제로 실현한 클래스들 사이의 관계를 나타낸다. 상속과 유사하게 빈 삼각형을 사용하며 머리에 있는 실선대신 점선을 사용해 표시한다. </td>
	</tr>
</table></div>
<!-- EDIT8 TABLE [1800-3173] -->
</div>

<h4 id="연관_관계">연관 관계</h4>
<div class="level4">

<p>
두 개념이 연관되어 있을 때는 UML 연관 관계를 사용해 자연스럽게 나타낼 수 있다.
</p>
<pre class="code">KeyPoint : 연관 관계의 역할 이름은 연관된 클래스의 객체들이 서로를 참조할 수 있는 속성의 이름으로 활용할 수 있다.</pre>

<p>
양방향 연관관계는 UML에서 두 클래스를 연결한 선에 화살표를 사용하지 않는다. 즉, 두 클래스의 객체들이 서로의 존재를 인식한다는 의미다. 연관 관계를 나타내는 선에 숫자가 있으면 연관된 객체 수가 여러개라는 의미이다. 이를 다중성multiplicity이라고 한다.
</p>

<p>
아래 표는 여러가지 형태의 다중성 표시 방법에 대한 설명이다.
</p>
<div class="table sectionedit9"><table class="inline">
	<thead>
	<tr class="row0">
		<th class="col0"> 다중성 표기 </th><th class="col1"> 의미 </th>
	</tr>
	</thead>
	<tr class="row1">
		<td class="col0"> 1 </td><td class="col1"> 엄밀하게 1</td>
	</tr>
	<tr class="row2">
		<td class="col0"> * </td><td class="col1"> 0 또는 그 이상 </td>
	</tr>
	<tr class="row3">
		<td class="col0"> 0..* </td><td class="col1"> 0 또는 그 이상 </td>
	</tr>
	<tr class="row4">
		<td class="col0">1..* </td><td class="col1"> 1 이상 </td>
	</tr>
	<tr class="row5">
		<td class="col0">0..1 </td><td class="col1"> 0 또는 1 </td>
	</tr>
	<tr class="row6">
		<td class="col0"> 2..5 </td><td class="col1"> 2 ~ 5 중 하나 </td>
	</tr>
	<tr class="row7">
		<td class="col0"> 1,2,6 </td><td class="col1"> 1 또는 2 또는 6 </td>
	</tr>
	<tr class="row8">
		<td class="col0"> 1, 3..5</td><td class="col1"> 1 또는 3 ~ 5 중 하나 </td>
	</tr>
</table></div>
<!-- EDIT9 TABLE [3902-4151] -->
</div>

<h4 id="일반화_관계">일반화 관계</h4>
<div class="level4">

<p>
한 클래스가 다른 클래스를 포함하는 상위 개념일 때 두 클래스 사이에는 일반화 관계가 존재한다. 일반환 관계가 존재할 때 자식(또는 서브클래스)이라 불리는 클래스는 부모(또는 슈퍼 클래스)라 불리는 클래스로부터 속성과 연산을 물려받을 수 있다. 이 때문에 객체지향 개념에서는 일반화 관계를 상속 관계라고 한다.
</p>

<p>
UML에서 일반화 관계는 두 클래스를 연결하는 화살표의 끝에 빈삼각형 표시를 해 표현한다. 삼각형 표시가 있는 쪽은 부모 클래스, 반대쪽은 자식 클래스를 나타낸다.
</p>

</div>

<h4 id="집합_관계">집합 관계</h4>
<div class="level4">

<p>
집합 관계는 UML 연관 관계의 특별 경우로 전체와 부분의 관계를 명확하게 명시하고자 할 때 사용한다. 집약(aggregation)과 합성(composition) 두 종류의 집합 관계가 존재한다.
</p>

<p>
집약 관계는 한 객체가 다른 객체를 포함하는 것을 나타낸다. &#039;전체&#039;, &#039;부분&#039;과의 관계며 &#039;전체&#039;를 가리키는 클래스 방향에 빈 마름모로 표시한다. 특히 부분을 나타내는 객체를 다른 객체와 공유할 수 있는 경우에 집약 관계로 나타낸다. 이때 전체 객체의 라이프타임과 부분 객체의 라이프타임은 독립적이다. 즉 전체 객체가 메모리에서 사라진다 해도 부분 객체는 사라지지 않는다.
</p>

<p>
합성 관계는 전체를 가리키는 클래스 방향에 채워진 마름모로 표시되며 부분 객체가 전체 객체에 속하는 관계다. 따라서 전체 객체가 사라지면 부분 객체도 사라지는 경우를 의미한다. 공유할 수 있는 객체를 사용할 경우에는 합성 관계가 아닌 집약 관계를 사용한다. 이때 부분 객체의 라이프타임은 전체 객체의 라이프타임에 의존한다. 즉, 전체 객체가 없어지면 부분 객체도 없어진다.
</p>
<pre class="code">Keypoint : 집약 관계와 합성 관계를 구분하려면 전체 객체와 부분 객체의 라이프타임 의존성을 살펴보라</pre>

</div>

<h4 id="의존_관계">의존 관계</h4>
<div class="level4">

<p>
일반적으로 한 클래스가 다른 클래스를 사용하는 경우는 다음과 같이 3가지가 있다.
</p>
<ul>
<li class="level1"><div class="li"> 클래스의 속성에서 참조할 때</div>
</li>
<li class="level1"><div class="li"> 연산의 인자로 사용될 때</div>
</li>
<li class="level1"><div class="li"> 메서드 내부의 지역 객체로 참조될 때</div>
</li>
</ul>
<pre class="code">연관 관계는 오랜 시간 동안 같이할 객체와의 관계이며 의존 관계는 짧은 시간 동안 이용하는 관계이다.</pre>

</div>

<h4 id="인터페이스와_실체화_관계">인터페이스와 실체화 관계</h4>
<div class="level4">

<p>
인터페이스란 책임(responsibility)이다. 어떤 객체의 책임이란 객체가 해야 하는 일로서 해석할 수 있고 어떤 경우에는 객체가 할 수 있는 일로도 해석할 수 있다. 즉, 객체가 외부에 제공하는 서비스나 기능은 객체가 수행하는 책임으로 보는 것이다.
</p>

</div>
<!-- EDIT7 SECTION "1.3.2 관계" [1739-] -->