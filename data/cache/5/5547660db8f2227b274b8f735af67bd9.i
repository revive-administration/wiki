a:243:{i:0;a:3:{i:0;s:14:"document_start";i:1;a:0:{}i:2;i:0;}i:1;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:36:"객체지향 CBD 실전 프로젝트";i:1;i:1;i:2;i:1;}i:2;i:1;}i:2;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:1;}i:2;i:1;}i:3;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:50;}i:4;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:16:"1장. UML 개요";i:1;i:2;i:2;i:50;}i:2;i:50;}i:5;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:50;}i:6;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:77;}i:7;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:10:"1.1 개요";i:1;i:3;i:2;i:77;}i:2;i:77;}i:8;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:77;}i:9;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:77;}i:10;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:183:"모델(model)은 실체(reality)에 대한 표현(representation)으로서 실체를 개발하는 과정에서
실체의 복잡성 문제를 극복하고자 사용하는 개념이다.";}i:2;i:96;}i:11;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:280;}i:12;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:49:"실체 ---->(모델링) 모델
    <-----(구현)";}i:2;i:280;}i:13;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:280;}i:14;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:398:"UML은 이름에서도 알 수 있듯이 모델링을 위한 언어다. 즉 소프트웨어에 대한 요구사항 정의, 분석, 설계 등의 모델링 활동에서 사용되는 언어다. UML은 요구사항 정의, 분석, 설계의 결과물인 모델을 표현하기 위하여 사용된다. 그리고 UML로 표현된 모델을 바탕으로 구현 활동과 테스트 활동도 수행된다.";}i:2;i:336;}i:15;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:734;}i:16;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:734;}i:17;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:141:"UML은 여러 종류의 다이어그램으로 구성되는데, 크게는 구조 다이어그램과 행위 다이어그램으로 분류된다.";}i:2;i:736;}i:18;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:877;}i:19;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:877;}i:20;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:328:"구조 다이어그램은 시스템을 구성하는 구조적인 요소들을 표현하기 위한 다이어그램으로서, 클래스 다이어그램, 객체 다이어그램, 패키지 다이어그램, 컴포넌트 다이어그램, 복합 구조 다이어그램, 배치 다이어그램이 구조 다이어그램에 해당된다.";}i:2;i:879;}i:21;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1208;}i:22;a:3:{i:0;s:10:"table_open";i:1;a:3:{i:0;i:3;i:1;i:7;i:2;i:1209;}i:2;i:1208;}i:23;a:3:{i:0;s:15:"tablethead_open";i:1;a:0:{}i:2;i:1208;}i:24;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:1208;}i:25;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:1208;}i:26;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:"다이어그램 ";}i:2;i:1210;}i:27;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:1226;}i:28;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:1226;}i:29;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"내용 ";}i:2;i:1227;}i:30;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:1234;}i:31;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:1234;}i:32;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"비고";}i:2;i:1235;}i:33;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:1241;}i:34;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:1242;}i:35;a:3:{i:0;s:16:"tablethead_close";i:1;a:0:{}i:2;i:1242;}i:36;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:1242;}i:37;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:1242;}i:38;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:27:" 클래스 다이어그램 ";}i:2;i:1244;}i:39;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:1271;}i:40;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:1271;}i:41;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:37:" 시스템을 구성하는 클래스 ";}i:2;i:1272;}i:42;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:1309;}i:43;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:5;}i:2;i:1309;}i:44;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:18:" 논리적 수준 ";}i:2;i:1310;}i:45;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:1328;}i:46;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:1329;}i:47;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:1329;}i:48;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:1329;}i:49;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:" 객체 다이어그램 ";}i:2;i:1331;}i:50;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:1355;}i:51;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:1355;}i:52;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:34:" 시스템을 구성하는 객체 ";}i:2;i:1356;}i:53;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:1390;}i:54;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:1397;}i:55;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:1397;}i:56;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:1397;}i:57;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:27:" 패키지 다이어그램 ";}i:2;i:1399;}i:58;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:1426;}i:59;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:1426;}i:60;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:71:" 많은 수의 모델 요소들을 패키지를 이용하여 조직화 ";}i:2;i:1427;}i:61;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:1498;}i:62;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:1504;}i:63;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:1504;}i:64;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:1504;}i:65;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:30:" 컴포넌트 다이어그램 ";}i:2;i:1506;}i:66;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:1536;}i:67;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:1536;}i:68;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:50:" 시스템을 구성하는 논리적 컴포넌트 ";}i:2;i:1537;}i:69;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:1587;}i:70;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:1600;}i:71;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:1600;}i:72;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:1600;}i:73;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:31:" 복합 구조 다이어그램 ";}i:2;i:1602;}i:74;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:1633;}i:75;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:1633;}i:76;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:84:" 논리적 컴포넌트의 내부를 파트(part)와 연결자(connector)로 표현 ";}i:2;i:1634;}i:77;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:1718;}i:78;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:1725;}i:79;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:1725;}i:80;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:1725;}i:81;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:" 배치 다이어그램 ";}i:2;i:1727;}i:82;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:1751;}i:83;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:1751;}i:84;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:88:" 시스템을 구성하는 노드와 통신 경로, 배치되는 물리적 컴포넌트 ";}i:2;i:1752;}i:85;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:1840;}i:86;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:1840;}i:87;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:18:" 물리적 수준 ";}i:2;i:1841;}i:88;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:1859;}i:89;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:1860;}i:90;a:3:{i:0;s:11:"table_close";i:1;a:1:{i:0;i:1860;}i:2;i:1860;}i:91;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"ul";i:2;s:16:" class="extlist"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:1861;}i:92;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:1861;}i:93;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:1861;}i:94;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:1;i:3;s:5:"
  * ";}i:2;i:1861;}i:95;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:847:"시스템의 구성 요소는 논리적인 수준과 물리적인 수준으로 분류될 수 있다. 논리적인 수준은 모델 수준으로 존재하는 것이며, 물리적 수준은 구현활동을 통하여 실질적으로 구현된 대상을 표현한다. 구조 다이어그램 중에서 클래스, 객체, 패키지, 컴포넌트 복합 구조 다이어그램을 통하여 표현되는 시스템 구성 요소는 논리적 수준이다. 즉, 클래스, 객체, 패키지, 논리적 컴포넌트, 파트, 연결자는 분석/설계 단계에서의 모델링 결과이며, 실질적으로 구현되어 설치되고 동작되는 요소에 해당되지 않는다. 반면에 배치 다이어그램을 통하여 표현되는 노드와 물리적 컴포넌트는 최종적인 시스템을 구성하는 실질적인 구성 요소를 표현한다.";}i:2;i:1866;}i:96;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:847:"시스템의 구성 요소는 논리적인 수준과 물리적인 수준으로 분류될 수 있다. 논리적인 수준은 모델 수준으로 존재하는 것이며, 물리적 수준은 구현활동을 통하여 실질적으로 구현된 대상을 표현한다. 구조 다이어그램 중에서 클래스, 객체, 패키지, 컴포넌트 복합 구조 다이어그램을 통하여 표현되는 시스템 구성 요소는 논리적 수준이다. 즉, 클래스, 객체, 패키지, 논리적 컴포넌트, 파트, 연결자는 분석/설계 단계에서의 모델링 결과이며, 실질적으로 구현되어 설치되고 동작되는 요소에 해당되지 않는다. 반면에 배치 다이어그램을 통하여 표현되는 노드와 물리적 컴포넌트는 최종적인 시스템을 구성하는 실질적인 구성 요소를 표현한다.";}i:2;i:1866;}i:97;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:2713;}i:98;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:2713;}i:99;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"ul";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:2713;}i:100;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:4;i:3;s:1:"
";}i:2;i:2713;}i:101;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2713;}i:102;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:253:"행위 다이어그램은 시스템 및 시스템을 구성하는 요소들의 동적인 행위를 표현하기 위하여 사용되는 다이어그램이다. UML 행위 다이어그램은 표현 대상과 표현 방법에 따라서 구분될 수 있다.";}i:2;i:2715;}i:103;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2969;}i:104;a:3:{i:0;s:10:"table_open";i:1;a:3:{i:0;i:3;i:1;i:8;i:2;i:2970;}i:2;i:2969;}i:105;a:3:{i:0;s:15:"tablethead_open";i:1;a:0:{}i:2;i:2969;}i:106;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:2969;}i:107;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:2969;}i:108;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:"다이어그램";}i:2;i:2971;}i:109;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:2986;}i:110;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:2986;}i:111;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"내용";}i:2;i:2987;}i:112;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:2993;}i:113;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:2993;}i:114;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"비고";}i:2;i:2994;}i:115;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:3000;}i:116;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:3001;}i:117;a:3:{i:0;s:16:"tablethead_close";i:1;a:0:{}i:2;i:3001;}i:118;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:3001;}i:119;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:3001;}i:120;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:33:" 유스케이스 다이어그램 ";}i:2;i:3003;}i:121;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:3036;}i:122;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:3036;}i:123;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:93:" 시스템의 외부 요소와 기능적 요구사항을 액터와 유스케이스로 표현 ";}i:2;i:3037;}i:124;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:3130;}i:125;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:3130;}i:126;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:" 시스템의 행위 ";}i:2;i:3131;}i:127;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:3152;}i:128;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:3153;}i:129;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:3153;}i:130;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:3153;}i:131;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:" 상태 다이어그램 ";}i:2;i:3155;}i:132;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:3179;}i:133;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:3179;}i:134;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:62:" 개별 대상의 동적 행위를 상태와 전위로 표현 ";}i:2;i:3180;}i:135;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:3242;}i:136;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:2;}i:2;i:3242;}i:137;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:32:" 개별 구성 요소의 행위 ";}i:2;i:3243;}i:138;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:3275;}i:139;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:3276;}i:140;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:3276;}i:141;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:3276;}i:142;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:" 활동 다이어그램 ";}i:2;i:3278;}i:143;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:3302;}i:144;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:3302;}i:145;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:55:" 개별 대상의 동적 행위를 활동으로 표현 ";}i:2;i:3303;}i:146;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:3358;}i:147;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:3365;}i:148;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:3365;}i:149;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:3365;}i:150;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:27:" 시퀀스 다이어그램 ";}i:2;i:3367;}i:151;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:3394;}i:152;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:3394;}i:153;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:92:" 상호작용을 구성 요소 간의 시간적 순서에 따른 메시지 전달로 표현 ";}i:2;i:3395;}i:154;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:3487;}i:155;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:4;}i:2;i:3487;}i:156;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:35:" 구성 요소 간의 상호작용 ";}i:2;i:3488;}i:157;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:3523;}i:158;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:3524;}i:159;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:3524;}i:160;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:3524;}i:161;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:" 통신 다이어그램 ";}i:2;i:3526;}i:162;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:3550;}i:163;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:3550;}i:164;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:89:" 상호작용을 구성 요소 간의 관계에 바탕을 둔 메시지 전달로 표현 ";}i:2;i:3551;}i:165;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:3640;}i:166;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:3647;}i:167;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:3647;}i:168;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:3647;}i:169;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:37:" 상호작용 개요 다이어그램 ";}i:2;i:3649;}i:170;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:3686;}i:171;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:3686;}i:172;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:61:" 여러 상호작용의 관계를 상위 수준에서 표현 ";}i:2;i:3687;}i:173;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:3748;}i:174;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:3755;}i:175;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:3755;}i:176;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:3755;}i:177;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:27:" 타이밍 다이어그램 ";}i:2;i:3757;}i:178;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:3784;}i:179;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:3784;}i:180;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:91:" 상호작용을 구성 요소의 상태 변화에 따른 구체적인 시간으로 표현 ";}i:2;i:3785;}i:181;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:3876;}i:182;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:3883;}i:183;a:3:{i:0;s:11:"table_close";i:1;a:1:{i:0;i:3883;}i:2;i:3883;}i:184;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3883;}i:185;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:435:"UML은 소프트웨어 개발의 전 과정에서 사용될 수 있다. 즉 요구사항 정의, 분석, 설계 등의 각 개발 단계에서 UML 다이어그램은 사용될 수 있다. 또한 개발 단계별로 주로 사용되는 다이어그램이 있다. 즉, 모든 다이어그램이 요구사항 정의, 분석, 설계 단계에서 사용되지는 않으며, 특정 다이어그램은 특정 개발 단계에서 사용된다.";}i:2;i:3885;}i:186;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4320;}i:187;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"ul";i:2;s:16:" class="extlist"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:4320;}i:188;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:4320;}i:189;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:4320;}i:190;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:1;i:3;s:5:"
  * ";}i:2;i:4320;}i:191;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:707:"요구사항 정의 단계에서는 유스케이스 다이어그램이 주로 사용된다. 유스케이스 다이어그램은 시스템 외부 존재를 액터로 표현하고, 시스템의 단위 기능을 유스케이스로 표현한다. 그러므로 요구사항 정의 단계에서는 시스템으로부터 도출된 기능적 요구사항을 유스케이스 다이어그램을 이용하여 표현한다. 또한 개별적인 유스케이스에 대한 상세한 정의를 시퀀스 다이어그램, 활동 다이어그램, 상태 다이어그램을 이용하여 표현할 수도 있다. 여러 유스케이스 간의 선행/후행 관계를 활동 다이어그램을 이용하여 표현하기도 한다.";}i:2;i:4325;}i:192;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:707:"요구사항 정의 단계에서는 유스케이스 다이어그램이 주로 사용된다. 유스케이스 다이어그램은 시스템 외부 존재를 액터로 표현하고, 시스템의 단위 기능을 유스케이스로 표현한다. 그러므로 요구사항 정의 단계에서는 시스템으로부터 도출된 기능적 요구사항을 유스케이스 다이어그램을 이용하여 표현한다. 또한 개별적인 유스케이스에 대한 상세한 정의를 시퀀스 다이어그램, 활동 다이어그램, 상태 다이어그램을 이용하여 표현할 수도 있다. 여러 유스케이스 간의 선행/후행 관계를 활동 다이어그램을 이용하여 표현하기도 한다.";}i:2;i:4325;}i:193;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:5032;}i:194;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:5032;}i:195;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"ul";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:5032;}i:196;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:4;i:3;s:1:"
";}i:2;i:5032;}i:197;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"ul";i:2;s:16:" class="extlist"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:5033;}i:198;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:5033;}i:199;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:5033;}i:200;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:1;i:3;s:5:"
  * ";}i:2;i:5033;}i:201;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:712:"분석 단계에서는 시스템을 구성하는 논리적 구성 요소를 도출한다. 그리고 개별 구성 요소의 동적 행위와 여러 구성 요소 간의 상호작용을 정의한다. 클래스 다이어그램, 객체 다이어그램은 시스템 구성요소로서 클래스 및 객체를 표현하는 데 사용된다. 그리고 개별적인 클래스/객체의 동적 행위는 상태 다이어그램, 활동 다이어그램을 이용하여 표현할 수 있다. 그리고 여러 클래스/객체 간의 상호작용은 시퀀스 다이어그램, 통신 다이어그램, 타이밍 다이어그램, 상호작용 개요 다이어그램 등의 상호작용 다이어그램이 사용될 수 있다.";}i:2;i:5038;}i:202;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:712:"분석 단계에서는 시스템을 구성하는 논리적 구성 요소를 도출한다. 그리고 개별 구성 요소의 동적 행위와 여러 구성 요소 간의 상호작용을 정의한다. 클래스 다이어그램, 객체 다이어그램은 시스템 구성요소로서 클래스 및 객체를 표현하는 데 사용된다. 그리고 개별적인 클래스/객체의 동적 행위는 상태 다이어그램, 활동 다이어그램을 이용하여 표현할 수 있다. 그리고 여러 클래스/객체 간의 상호작용은 시퀀스 다이어그램, 통신 다이어그램, 타이밍 다이어그램, 상호작용 개요 다이어그램 등의 상호작용 다이어그램이 사용될 수 있다.";}i:2;i:5038;}i:203;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:5750;}i:204;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:5750;}i:205;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"ul";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:5750;}i:206;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:4;i:3;s:1:"
";}i:2;i:5750;}i:207;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"ul";i:2;s:16:" class="extlist"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:5751;}i:208;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:5751;}i:209;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:5751;}i:210;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:1;i:3;s:5:"
  * ";}i:2;i:5751;}i:211;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1258:"설계 단계에서는 분석 단계에서 도출된 클래스를 바탕으로 시스템 구성 요소로서 논리적 컴포넌트를 정의하고 설계한다. 그리고 논리적 컴포넌트의 구현물인 물리적 컴포넌트를 설계한다. 또한 물리적 컴포넌트가 배치되어 수행될 노드, 그리고 노드 간의 통신 경로를 설계한다. 컴포넌트 다이어그램은 시스템을 구성하는 논리적 수준의 컴포넌트를 표현할 때 사용된다. 그리고 복합 구조 다이어그램은 컴포넌트의 내부 구성을 표현할 때 사용된다. 배치 다이어그램은 물리적 컴포넌트, 그리고 물리적 컴포넌트가 배치될 노드 및 통신 경로를 표현할 때 사용된다. 뿐만 아니라 분석 단계에서 사용되었던 클래스/객체 다이어그램과 상태/활동 다이어그램, 상호작용 다이어그램이 설계 단계에서도 사용된다. 클래스/객체 다이어그램은 컴포넌트의 구성 요소를 정의하는 데 사용될 수 있다. 그리고 상태/활동 다이어그램은 컴포넌트의 동적 행위를 표현하는 데 사용되며, 상호작용 다이어그램은 컴포넌트 간의 상호작용을 표현하는 데 사용할 수 있다.";}i:2;i:5756;}i:212;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:1258:"설계 단계에서는 분석 단계에서 도출된 클래스를 바탕으로 시스템 구성 요소로서 논리적 컴포넌트를 정의하고 설계한다. 그리고 논리적 컴포넌트의 구현물인 물리적 컴포넌트를 설계한다. 또한 물리적 컴포넌트가 배치되어 수행될 노드, 그리고 노드 간의 통신 경로를 설계한다. 컴포넌트 다이어그램은 시스템을 구성하는 논리적 수준의 컴포넌트를 표현할 때 사용된다. 그리고 복합 구조 다이어그램은 컴포넌트의 내부 구성을 표현할 때 사용된다. 배치 다이어그램은 물리적 컴포넌트, 그리고 물리적 컴포넌트가 배치될 노드 및 통신 경로를 표현할 때 사용된다. 뿐만 아니라 분석 단계에서 사용되었던 클래스/객체 다이어그램과 상태/활동 다이어그램, 상호작용 다이어그램이 설계 단계에서도 사용된다. 클래스/객체 다이어그램은 컴포넌트의 구성 요소를 정의하는 데 사용될 수 있다. 그리고 상태/활동 다이어그램은 컴포넌트의 동적 행위를 표현하는 데 사용되며, 상호작용 다이어그램은 컴포넌트 간의 상호작용을 표현하는 데 사용할 수 있다.";}i:2;i:5756;}i:213;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:7014;}i:214;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:7014;}i:215;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"ul";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:7014;}i:216;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:4;i:3;s:1:"
";}i:2;i:7014;}i:217;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"ul";i:2;s:16:" class="extlist"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:7015;}i:218;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:7015;}i:219;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:7015;}i:220;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:1;i:3;s:5:"
  * ";}i:2;i:7015;}i:221;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:764:"구현 및 테스트 단계에서는 앞 단계에서 작성된 모델을 바탕으로 세부적인 활동이 수행된다. 즉, 구현 단계는 설계 단계에서 작성된 컴포넌트 다이어그램, 복합 구조 다이어그램, 클래스 다이어그램 등을 바탕으로 컴포넌트와 클래스를 구현한다. 테스트 단계에서는 테스트 케이스를 결정할 때 UML 다이어그램이 이용될 수 있다. 시스템 테스트의 경우에는 유스케이스 다이어그램과 세부적인 유스케이스 시나리오를 바탕으로 테스트 케이스를 결정한다. 그리고 통합 테스트의 경우에는 컴포넌트 다이어그램, 시퀀스 다이어그램 등이 테스트 케이스를 결정할 때 이용될 수 있다.";}i:2;i:7020;}i:222;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:764:"구현 및 테스트 단계에서는 앞 단계에서 작성된 모델을 바탕으로 세부적인 활동이 수행된다. 즉, 구현 단계는 설계 단계에서 작성된 컴포넌트 다이어그램, 복합 구조 다이어그램, 클래스 다이어그램 등을 바탕으로 컴포넌트와 클래스를 구현한다. 테스트 단계에서는 테스트 케이스를 결정할 때 UML 다이어그램이 이용될 수 있다. 시스템 테스트의 경우에는 유스케이스 다이어그램과 세부적인 유스케이스 시나리오를 바탕으로 테스트 케이스를 결정한다. 그리고 통합 테스트의 경우에는 컴포넌트 다이어그램, 시퀀스 다이어그램 등이 테스트 케이스를 결정할 때 이용될 수 있다.";}i:2;i:7020;}i:223;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:7784;}i:224;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:7784;}i:225;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"ul";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:7784;}i:226;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:4;i:3;s:1:"
";}i:2;i:7784;}i:227;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"ul";i:2;s:16:" class="extlist"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:7785;}i:228;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:2:"li";i:2;s:0:"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:7785;}i:229;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:1;i:1;s:3:"div";i:2;s:10:"class="li"";}i:2;i:1;i:3;s:5:"
  * ";}i:2;i:7785;}i:230;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:1;i:3;s:5:"
  * ";}i:2;i:7785;}i:231;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:348:"패키지 다이어그램은 요구사항 정의, 분석, 설계 단계에서 사용될 수 있다. 요구사항 정의 단계에서는 패키지를 이용하여 많은 수의 유스케이스를 적절하게 조직화할 수 있다. 분석 및 설계 단계에서는 패키지를 이용하여 클래스, 컴포넌트 등을 조직화할 수 있다.";}i:2;i:7790;}i:232;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:3;i:3;s:348:"패키지 다이어그램은 요구사항 정의, 분석, 설계 단계에서 사용될 수 있다. 요구사항 정의 단계에서는 패키지를 이용하여 많은 수의 유스케이스를 적절하게 조직화할 수 있다. 분석 및 설계 단계에서는 패키지를 이용하여 클래스, 컴포넌트 등을 조직화할 수 있다.";}i:2;i:7790;}i:233;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:3:"div";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:8138;}i:234;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"li";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:8138;}i:235;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;a:3:{i:0;i:4;i:1;s:2:"ul";i:2;s:0:"";}i:2;i:4;i:3;s:1:"
";}i:2;i:8138;}i:236;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:7:"extlist";i:1;b:1;i:2;i:4;i:3;s:1:"
";}i:2;i:8138;}i:237;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8138;}i:238;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:8140;}i:239;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:"29P";}i:2;i:8142;}i:240;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8142;}i:241;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:8142;}i:242;a:3:{i:0;s:12:"document_end";i:1;a:0:{}i:2;i:8142;}}