
<h1 class="sectionedit1" id="장_네티로_구현한_api_서버">9장 네티로 구현한 API 서버</h1>
<div class="level1">

</div>
<!-- EDIT1 SECTION "9장 네티로 구현한 API 서버" [1-50] -->
<h2 class="sectionedit2" id="api_서버_요구사항">9.1 API 서버 요구사항</h2>
<div class="level2">

</div>
<!-- EDIT2 SECTION "9.1 API 서버 요구사항" [51-90] -->
<h3 class="sectionedit3" id="서비스_기능_정의">9.1.1 서비스 기능 정의</h3>
<div class="level3">

<p>
이제부터 작성할 <abbr title="Application Programming Interface">API</abbr> 서버는 사용자 인증 서비스를 제공하는 서버다. <abbr title="Application Programming Interface">API</abbr> 서버가 제공해야 할 기능을 서비스 이름으로 정리하면 아래와 같다.
</p>

<ul  class="extlist">
  <li><div class="li">사용자 인증 토큰 발급 서비스</div></li>
  <li><div class="li">사용자 인증 토큰 만료 서비스</div></li>
  <li><div class="li">사용자 인증 토큰 검증 서비스</div></li>
</ul>

</div>
<!-- EDIT3 SECTION "9.1.1 서비스 기능 정의" [91-452] -->
<h3 class="sectionedit4" id="restful_api_설계">9.1.2 RESTFUL API 설계</h3>
<div class="level3">

<p>
발급, 만료, 검증 서비스를 제공할 세 API를 각각 HTTP 요청으로 변환하여야 한다. 즉 세 <abbr title="Application Programming Interface">API</abbr> URL을 정의하여야 한다. 일반적인 웹 서비스에서 사용하는 방법으로 URL을 정의하면 아래와 같이 정의할 수 있다.
</p>

<ul  class="extlist">
  <li><div class="li">/token/issue</div></li>
  <li><div class="li">/token/expire</div></li>
  <li><div class="li">/token/verify</div></li>
</ul>

<p>
REST 서비스는 서비스의 종류와 행동을 하나의 URL에 모두 포함한 것이다. 
</p>

</div>
<!-- EDIT4 SECTION "9.1.2 RESTFUL API 설계" [453-906] -->
<h3 class="sectionedit5" id="인증_api_url_설계">9.1.3 인증 API URL 설계</h3>
<div class="level3">

</div>
<!-- EDIT5 SECTION "9.1.3 인증 API URL 설계" [907-944] -->
<h3 class="sectionedit6" id="인증_api_입출력_설계">9.1.4 인증 API 입출력 설계</h3>
<div class="level3">

</div>

<h4 id="사용자번호_조회_api">사용자번호 조회 API</h4>
<div class="level4">

</div>

<h4 id="인증_토큰_발급_api">인증 토큰 발급 API</h4>
<div class="level4">

</div>
<!-- EDIT6 SECTION "9.1.4 인증 API 입출력 설계" [945-1058] -->
<h3 class="sectionedit7" id="api_서버_아키텍처_구성">9.1.5 API 서버 아키텍처 구성</h3>
<div class="level3">

</div>
<!-- EDIT7 SECTION "9.1.5 API 서버 아키텍처 구성" [1059-1106] -->
<h3 class="sectionedit8" id="개발_환경_설정">9.1.6 개발 환경 설정</h3>
<div class="level3">

</div>
<!-- EDIT8 SECTION "9.1.6 개발 환경 설정" [1107-1144] -->
<h3 class="sectionedit9" id="캐시_정보_설계">9.2.2 캐시 정보 설계</h3>
<div class="level3">

<p>
생성된 인증 토큰을 임시로 저장하고 조회하기 위한 캐시 데이터 구조를 설계하자. 보통 인증 토큰을 설계하는 방법은 두 가지다. 첫 번째는 토큰을 발급한 시점의 사용자 정보 및 부가정보를 인증 토큰에 포함하는 방법이다. 두 번째는 토큰을 발급한 시점의 사용자 및 부가정보를 별도의 저장소에 저장하고 저장된 정보에 대한 키를 토큰 문자열로발급하는 방법이다. 
</p>

</div>
<!-- EDIT9 SECTION "9.2.2 캐시 정보 설계" [1145-1671] -->
<h2 class="sectionedit10" id="api_서버">9.3 API 서버</h2>
<div class="level2">

<p>
먼저 네티를 사용하여 HTTP 프로토콜을 처리하는 부분을 살펴보자.
</p>

</div>
<!-- EDIT10 SECTION "9.3 API 서버" [1672-1787] -->
<h3 class="sectionedit11" id="http_프로토콜_코덱">9.3.1 HTTP 프로토콜 코덱</h3>
<div class="level3">

</div>
<!-- EDIT11 SECTION "9.3.1 HTTP 프로토콜 코덱" [1788-1829] -->
<h3 class="sectionedit12" id="http_프로토콜_처리">9.3.2 HTTP 프로토콜 처리</h3>
<div class="level3">

<p>
클라이언트가 전송한 HTTP 프로토콜 데이터는 채널 파이프라인에 등록된 HTTP 프로토콜 코덱들을 거치고 나면 FullHttpMessage 객체로 변환되어 마지막 데이터 핸들러인 ApiRequestParser에 인바운드 이벤트로 전달된다. FullHttpMessage는 HttpMessage와 HttpContent 인터페이스를 모두 상속한다. 여기서 HttpMessaage 클래스는 HTTP 요청과 응답을 표현하는 인터페이스며 HTTP 프로토콜 버전, 요청 <abbr title="Uniform Resource Locator">URL</abbr>, HTTP 헤더 정보 등이 포함된다. HttpContent 클래스는 HTTP 요청 프로토콜에 포함된 본문 데이터가 포함된다. 
</p>

</div>
<!-- EDIT12 SECTION "9.3.2 HTTP 프로토콜 처리" [1830-2502] -->
<h3 class="sectionedit13" id="api_서비스_클래스">9.3.3 API 서비스 클래스</h3>
<div class="level3">

<p>
네티를 사용하여 HTTP 프로토콜의 처리가 완료되었다면 HTTP 프로토콜로 수신된 데이터를 사용하여 <abbr title="Application Programming Interface">API</abbr> 서비스 클래스를 호출해야 한다. 
</p>

<p>
다음으로 <abbr title="Application Programming Interface">API</abbr> 서비스 클래스 생성 클래스인 ServiceDispatcher를 살펴보자. ServiceDispatcher 클래스는 스프링을 기초로 하여 HTTP 요청의 URL과 HTTP 메서드에 해당하는 <abbr title="Application Programming Interface">API</abbr> 서비스 클래스를 생성하여 ApiRequest 인터페이스 형태로 돌려준다.
</p>

</div>
<!-- EDIT13 SECTION "9.3.3 API 서비스 클래스" [2503-3020] -->
<h3 class="sectionedit14" id="사용자번호_조회_api1">9.3.4 사용자번호 조회 API</h3>
<div class="level3">

</div>
<!-- EDIT14 SECTION "9.3.4 사용자번호 조회 API" [3021-3063] -->
<h3 class="sectionedit15" id="인증_토큰_발급_api1">9.3.5 인증 토큰 발급 API</h3>
<div class="level3">

</div>
<!-- EDIT15 SECTION "9.3.5 인증 토큰 발급 API" [3064-3104] -->
<h3 class="sectionedit16" id="인증_토큰_만료_api">9.3.6 인증 토큰 만료 API</h3>
<div class="level3">

</div>
<!-- EDIT16 SECTION "9.3.6 인증 토큰 만료 API" [3105-3146] -->
<h2 class="sectionedit17" id="api_통합_테스트">9.4 API 통합 테스트</h2>
<div class="level2">

<p>
HTTP 요청을 테스트할 수 있는 프레임워크로는 아파치 JMeter, SoapUI, 포스트맨, RESTClient 등이 있다.
</p>

<ul  class="extlist">
  <li><div class="li">JMeter
<ul  class="extlist">
  <li><div class="li">HTTP, EJB, JavaBean, <abbr title="File Transfer Protocol">FTP</abbr> 등의 부하를 포함한 다양한 부하 테스트 기능을 제공한다. UI를 사용하여 테스트 시나리오를 작성할 수 있으며 테스트 결과를 그래프로 출력할 수 있다. </div></li>
</ul>
</li>
  <li><div class="li">SoapUI
<ul  class="extlist">
  <li><div class="li">SmartBear사가 만든 HTTP <abbr title="Application Programming Interface">API</abbr> 테스팅 툴이다. 주로 복잡한 비즈니스 로직을 가진 API를 순서대로 호출하고 결과에 따라서 다음 요청을 분기하는 등의 기능을 제공한다.</div></li>
</ul>
</li>
  <li><div class="li">포스트맨</div></li>
  <li><div class="li">RESTClient</div></li>
</ul>

</div>
<!-- EDIT17 SECTION "9.4 API 통합 테스트" [3147-] -->