
<h1 class="sectionedit1" id="lecture_12_-_elements_of_programming">Lecture 1.2 - Elements of Programming</h1>
<div class="level1">

</div>
<!-- EDIT1 SECTION "Lecture 1.2 - Elements of Programming" [1-51] -->
<h2 class="sectionedit2" id="프로그래밍의_요소">프로그래밍의 요소</h2>
<div class="level2">

<p>
모든 non-trivial(자명하지 않은) 프로그래밍 언어는 다음과 같은 것들을 제공한다
</p>
<ul>
<li class="level1"><div class="li"> 원시적 표현은 간단한 요소들을 나타낸다</div>
</li>
<li class="level1"><div class="li"> 식의 합성 방법</div>
</li>
<li class="level1"><div class="li"> 식의 추상화 방법(추론 가능한 식을 미리 알려줌)</div>
</li>
</ul>

</div>
<!-- EDIT2 SECTION "프로그래밍의 요소" [52-351] -->
<h2 class="sectionedit3" id="repl_read-eval-print_loop">REPL (Read-Eval-Print Loop)</h2>
<div class="level2">

<p>
함수 프로그래밍은 계산기와 비슷하다. <br/>

REPL은 누군가 식을 쓰고 그것의 값을 확인하도록 만든다.
</p>

</div>
<!-- EDIT3 SECTION "REPL (Read-Eval-Print Loop)" [352-524] -->
<h2 class="sectionedit4" id="함수_어플리케이션_처리하기">함수 어플리케이션 처리하기</h2>
<div class="level2">

<p>
파라미터화된 함수의 어플리케이션들은 다음과 비슷한 방식으로 연산자에 의해 처리된다.
</p>
<ul>
<li class="level1"><div class="li"> 1. 왼쪽 → 오른쪽으로 인자를 처리한다.</div>
</li>
<li class="level1"><div class="li"> 2. 동시에 함수의 오른쪽부터 함수 어플리케이션을 교체시킨다.</div>
</li>
<li class="level1"><div class="li"> 3. 함수의 초기 매개변수들을 실제 인자로 교체시킨다. </div>
</li>
</ul>

</div>
<!-- EDIT4 SECTION "함수 어플리케이션 처리하기" [525-919] -->
<h2 class="sectionedit5" id="대체_모델">대체 모델</h2>
<div class="level2">

<p>
이 식처리 스키마는 대체 모델이라고 불린다.<br/>

이 모델의 내포된 생각은 모든 처리가 하는 일은 식을 값으로 바꾸며 줄여 나가는 것이다. <br/>

</p>

</div>
<!-- EDIT5 SECTION "대체 모델" [920-] -->