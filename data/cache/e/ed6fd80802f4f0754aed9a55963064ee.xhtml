
<h1 class="sectionedit1" id="항목_8_equals_메서드를_오버라이딩_할_때는_보편적_계약을_따르자">항목 8 equals 메서드를 오버라이딩 할 때는 보편적 계약을 따르자</h1>
<div class="level1">

<p>
인스턴스의 동일 여부를 판정하는 equals 메서드의 오버라이딩은 간단한 것 같지만, 잘못되는 경우가 많아서 참담한 결과를 초래할 수 있다. 그런 문제를 피하는 가장 쉬운 방법은 equals 메서드를 오버라이드 하지 않고 상속받은 그래도 사용하는 것이다. 다음 조건 중 어느 하나라도 만족하면 그렇게 하는 게 좋다.
</p>
<ul>
<li class="level1"><div class="li"> <strong>클래스의 각 인스턴스가 본래부터 유일한 경우.</strong> 인스턴스가 갖는 값보다는 활동하는 개체임을 나타내는 것이 더 중요한 스레드(Thread)와 같은 클래스가 여기에 해당된다. 그런 클래스들은 인스턴스가 갖는 값의 논리적인 비교는 의미가 없으며, 객체 참조가 같으면 동일한 것임을 알 수 있기 때문에 Object의 equals를 그냥 사용하면 된다.</div>
</li>
<li class="level1"><div class="li"> <strong>두 인스턴스가 논리적으로 같은지 검사하지 않아도 되는 클래스의 경우.</strong> 예를 들어, java.util.Random 클래스에서는 두 개의 Random 인스턴스가 같은 난수열을 만드는지 확인하기 위해 equals 메서드를 오버라이딩 할 수 있었을 것이다. 그러나 그 클래스의 설계자는 클라이언트가 그런 기능을 원한다고 생각하지 않았다. 이런 경우 Object로부터 상속받은 equals를 그냥 쓰면 된다.</div>
</li>
<li class="level1"><div class="li"> <strong>수퍼 클래스에서 equals 메서드를 이미 오버라이딩 했고, 그 메서드를 그대로 사용해도 좋은 경우. </strong> 예를 들어, Set 인터페이스를 구현하는 대부분의 클래스들은 AbstractSet에 구현된 eqauls를 상속받아 사용하며, List의 경우는 AbstractList로부터, Map의 경우는 AbstractMap에서 상속 받아 사용한다.</div>
</li>
<li class="level1"><div class="li"> <strong> private 패키지 전용 클래스라서 이 클래스의 equals 메서드가 절대 호출되지 않아야 할 경우. </strong> 우연히 호출될 수 있는 그런 상황에서는 다음과 같이 equals 메서드를 반드시 오버라이딩해서 호출되지 않도록 해야 한다</div>
</li>
</ul>

<p>
그렇다면 Object.equals를 언제 오버라이드 해야 좋을까? 객체 참조만으로 인스턴스의 동일 여부를 판단하는 것이 아니라, 인스턴스가 갖는 값을 비교하여 논리적으로 같은지 판단할 필요가 있는 클래스로써, 자신의 슈퍼클래스에서 equals 메서드를 오버라이드하지 않았을 때이다. 일반적으로 값(value) 클래스가 여기에 해당된다. 이 클래스는 하나의 값을 나타내는 클래스로써, 예를들어 Integer이나 Date 같은 것이다. equals 메서드를 사용해서 이런 클래스의 객체들을 비교하는 프로그래머의 입장에서는 같은 객체의 참조 여부는 중요하지 않고 객체가 갖는 값이 논리적으로 같은지가 관심사이다. 
</p>

<p>
equals 메서드를 오버라이드 할 필요가 없는 값 클래스가 있다. 그 중 하나는 각 값 당 최대 하나의 객체만 존재하도록 인스턴스 제어를 사용하는 클래스이다. 열거형이 그런류에 속하는데, 그런 클래스들의 경우는 논리적인 일치와 객체 참조 일치가 동일한 의미가 된다. 따라서 Object의 equals메서드가 논리적인 equals메서드의 기능을 하는 셈이다.
</p>

</div>
