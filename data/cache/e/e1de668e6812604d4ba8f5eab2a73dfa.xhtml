
<h1 class="sectionedit1" id="chapter_2_객체의_생성과_소멸">CHAPTER 2 객체의 생성과 소멸</h1>
<div class="level1">

</div>
<!-- EDIT1 SECTION "CHAPTER 2 객체의 생성과 소멸" [1-51] -->
<h2 class="sectionedit2" id="항목1_생성자_대신_static_팩토리_factory_메소드_사용을_고려하자">항목1 생성자 대신 static 팩토리(factory) 메소드 사용을 고려하자</h2>
<div class="level2">

<p>
클래스에서는 생성자를 대신하거나, 또는 생성자에 부가하여 static 팩토리 메서드를 가질 수 있다. public 생성자 대신에 static 팩토리 메서드를 제공하면 다음과 같은 장단점이 있다. Static 팩토리 메서드의 한 가지 장점은, 생성자와 달리 자기 나름의 이름을 가질 수 있다는 것이다. Static 팩토리 메서서드의 두 번째 장점은, 생성자와 달리 호출될 때마다 매번 새로운 객체를 생성할 필요가 없다는 것이다. 따라서 immutable 클래스의 경우 이미 생성된 인스턴스를 다시 사용할 수 있으며, 불필요하게 중복된 인스턴스들이 생성되는 것을 방지하기 위해 이미 생성된 인스턴스들을 저장했다가 반복 사용할 수 있다.
</p>

<p>
static 팩토리 메서드는 여러 번 호출되더라도 이미 생성된 동일 객체를 반환할 수 있으므로, 클래스에서는 언제든지 인스턴스들의 존재를 직접 제어할 수 있다. 이런 일을 하는 클래스를 인스턴스 제어(instance-controlled) 클래스라고 한다. 인스턴스를 제어하면 싱글톤 또는 인스턴스 생성불가 클래스로 만들 수 있다. 
</p>

<p>
자신의 클래스 인스턴스만 반환하는 생성자와 달리, static 팩토리 메서드는 자신이 반환하는 타입의 어떤 서브타입 객체도 반환할 수 있다는 것이 세 번째 장점이다. 따라서 반환되는 객체의 클래스를 선택해야 할 때 뛰어난 유연성을 제공한다. 심지어 static 팩토리 메서드를 갖는 클래스를 작성하는 시점에 그 메서드로부터 반환되는 객체의 클래스가 존재하지 않아도 된다. 이처럼 유연한 static 팩토리 메서드는 JDBC와 같은 서비스 제공자 프레임워크의 근간이 된다.
</p>

<p>
서비스 제공자 프레임워크는 세 가지 핵심 컴포넌트로 구성된다. 첫 번째는, 제공자가 구현하는 서비스 인터페이스이며, 두 번째는 프레임워크 시스템에서 구현체를 등록하는데 사용하는 제공자 등록 API이다. 그리고 세번째로, 서비스 인스턴스를 얻기 위해 클라이언트가 사용하는 서비스 접근 API가 있다. 네 번째째 컴포넌트는 서비스 제공자 인터페이스로써, 제공자가 자신의 서비스 구현체 인스턴스를 생성하기 위해 구현한다. 서비스 제공자 인터페이스가 없을 때는 클래스 이름으로 구현체가 등록되고 인스턴스가 생성된다. 
</p>

<p>
static 팩토리 메서드의 네 번째 장점은, 매개변수화 타입(parameterized type)의 인스턴스를 생성하는 코드를 간결하게 해준다는 것이다. 매개변수화 클래스의 생성자를 호출할 때는 타입 매개변수(type parameter)를 지정해야 한다. 따라서 다음 예와 같이 타입 매개변수를 연달아 두 번 주어야 한다.
</p>
<pre class="code">Map&lt;String, List&lt;String&gt;&gt; m = new HashMap&lt;String, List&lt;String&gt;&gt;();</pre>

<p>
이런 식으로 중복 지정하면 타입 매개변수가 늘어나는 경우 타이핑할 분량이 많아지고 복잡해져서 매우 힘들어진다. 그러나 static 팩토리를 사용하면 컴파일러가 타입 매개변수를 해결하도록 할 수 있다. 이것을 타입추론(type inference)이라고 한다. 예를 들어, HashMap에서 다음의 static 팩토리 메서드를 제공하다고 가정해보자.
</p>
<pre class="code">public static &lt;K,V&gt; HashMap&lt;K,V&gt; newInstance(){
	return new HashMap&lt;K,V&gt;();
}</pre>

<p>
위에서 선언한 메서드를 다음과 같이 간결한 형태로 사용할 수 있다.
</p>
<pre class="code">Map&lt;String, List&lt;String&gt; m = HashMap.newInstance();</pre>

<p>
Static 팩토리 메서드의 가장 큰 단점은, 인스턴스 생성을 위해 static 팩토리 메서드만 갖고 있으면서 public이나 protected 생성자가 없는 클래스의 경우는 서브 클래스를 가질 수 없다는 것이다. public static 팩토리 메서드에서 반환하는 객체의 클래스가 public이 아닌 경우도 마찬가지이다. 예를 들어, 자바 표준 컬렉션 프레임워크에 구현된 클래스의 어느 것도 서브 클래스를 가질 수 없다. 하지만 이런 단점이 장점이 될 수도 있다. 프로그래머들이 상속(inheritance) 대신 컴포지션(composition)을 사용하게끔 해 주기 때문이다.
</p>

<p>
Static 팩토리의 두 번째 단점은, 다른 static 메서드와 쉽게 구별할 수 없다는 것이다. <abbr title="Application Programming Interface">API</abbr> 문서에서 생성자는 별도로 표시되어 금방 알아볼 수 있지만, static 팩토리 메서드는 다른 메서드와 섞여 있어 잘 구분되지 않는다. 따라서 생성자 대신 static 팩토리 메서드를 제공하는 클래스의 경우는 인스턴스를 어떻게 생성하는지 알기 어려울 수 있다.
</p>

</div>
<!-- EDIT2 SECTION "항목1 생성자 대신 static 팩토리(factory) 메소드 사용을 고려하자" [52-4947] -->
<h2 class="sectionedit3" id="항목2_생성자의_매개변수가_많을_때는_빌더를_고려하자">항목2 생성자의 매개변수가 많을 때는 빌더를 고려하자</h2>
<div class="level2">

<p>
Static 팩토리 메서드와 생성자는 공통적인 제약이 있다. 선택 가능한 매개변수가 많아질 경우 신축성 있게 처리하지 못한다는 것이다. 애련 클래스의 경우에 생성자나 static 팩토리 메서드를 어떻게 만들어야 할까? 이제까지 프로그래머들은 텔레스코핑 생성자(telescoping constructor) 패턴을 사용했다. 즉, 필수 매개변수들만 갖는 생성자, 필수 매개변수들과 선택 매개변수 하나를 갖는 생성자, 필수 매개변수들과 선택 매개변수 두 개를 갖는 생성자 등의 형태로 모든 선택 매개변수를 생성자가 가질 수 있도록 여러 개의 생성자를 겹겹이 만드는 것이다. 
</p>

<p>
일반적으로 이런 식의 생성자 호출은 우리가 원하지 않는 매개변수에도 초깃값을 주어야 한다. 매개변수의 수가 증가한다면 무척 번거로워진다. 텔레스코핑 생성자 패턴은 그런대로 쓸만하지만, 매개변수가 많을 때는 클라이언트 코드 작성이 힘들고 코드의 가독성도 떨어진다. 
</p>

<p>
매개변수가 많은 생성자의 두 번째 대안으로 자바빈즈(JavaBeans) 패턴이 있다. 이 패턴에서는 매개변수가 없는 생성자를 호출해서 객체를 생성한 후 세터(setter) 메서드를 호출해서 각각의 필수 필드와 선택 필드 값을 지정한다. 이 패턴은 텔레스코핑 생성자 패턴과 같은 단점을 전혀 갖지 않으며, 코드가 조금 길어지기는 하지만 인스턴스 생성이 간단하고 코드의 가독성도 좋다.
</p>

<p>
하지만 자바빈즈 패턴은 심각한 단점을 갖고 있다. 여러 번의 메서드 호출로 나누어져 인스턴스가 생성되므로, 생성 과정을 거치는 동안 자바빈(JavaBean) 객체가 일관된 상태를 유지하지 못할 수 있다. 생성자 매개변수의 유효성을 검사하여 일관성을 유지하도록 하는 옵션조차도 클래스에 없기 때문이다. 또한 일관성 없는 상태의 객체를 사용하려 한다면 결함을 찾기 어려운 문제를 야기시킬 수 있다. 이와 연관해서 자바빈즈 패턴은 불변(immutable) 클래스를 만들 수 있는 가능성을 배제하므로 스레드(thread)에서 안전성을 유지하려면 프로그래머의 추가적인 노력이 필요하다는 단점이 있다.
</p>

<p>
객체 생성이 완전하게 끝났을 때 그 객체를 동결(freezing)하고 완전하게 되기 전까지는 사용할 수 없도록 함으로써 그런 단점을 줄일 수 있다. 그러나 이런 방법은 적용이 어려워서 실제로는 거의 사요되지 않으며, 더욱이 런타임 에러를 유발할 수도 있다. 동결시키는 메서드를 객체 사용 전에 프로그래머가 호출했는지 컴파일러가 확인할 수 없기 때문이다.
</p>

<p>
다행스럽게도 텔레스코핑 생성자 패턴의 안전성과 자바빈즈 패턴의 가독성을 결합한 세 번째 방법이 있는데 그것이 빌더패턴의 형태이다. 빌더 패턴은 원하는 객체를 바로 생성하는 대신 클라이언트는 모든 필수 매개변수를 갖는 생성자를 호출하여 빌더 객체를 얻는다. 그 다음에 빌더 객체의 세터 메서드를 호출하여 필요한 선택 매개변수들의 값을 설정한다. 마지막으로, 클라이언트는 매개변수가 없는 build 메서드를 호출하여 불변 객체르 생성한다. (불변 객체는 생성 후에 상태가 변하지 않는다. 멤버 변수의 값을 변경하는 세터 메서드를 갖지 않기 때문이다. String이 대표적인 예이다.) 빌더는 자신이 생성하는 객체의 클래스에 포함된 static 멤버 클래스이다. 빌더는 자신이 생성하는 객체의 클래스에 포함된 static 멤버 클래스이다. 
</p>
<dl class="file">
<dt><a href="/dokuwiki/doku.php?do=export_code&amp;id=chapter_2_%EA%B0%9D%EC%B2%B4%EC%9D%98_%EC%83%9D%EC%84%B1%EA%B3%BC_%EC%86%8C%EB%A9%B8&amp;codeblock=0" title="조각 다운로드" class="mediafile mf_java">NutritionFacts.java</a></dt>
<dd><pre class="code file java"><span class="kw1">public</span> <span class="kw1">class</span> NutritionFacts<span class="br0">&#123;</span>
	<span class="kw1">private</span> <span class="kw1">final</span> <span class="kw4">int</span> servingSize<span class="sy0">;</span>
	<span class="kw1">private</span> <span class="kw1">final</span> <span class="kw4">int</span> servings<span class="sy0">;</span>
	<span class="kw1">private</span> <span class="kw1">final</span> <span class="kw4">int</span> calories<span class="sy0">;</span>
	<span class="kw1">private</span> <span class="kw1">final</span> <span class="kw4">int</span> fat<span class="sy0">;</span>
	<span class="kw1">private</span> <span class="kw1">final</span> <span class="kw4">int</span> sodium<span class="sy0">;</span>
	<span class="kw1">private</span> <span class="kw1">final</span> <span class="kw4">int</span> carbohydrate<span class="sy0">;</span>
&nbsp;
	<span class="kw1">public</span> <span class="kw1">static</span> <span class="kw1">class</span> Builder<span class="br0">&#123;</span>
		<span class="co1">// 필수 매개변수들</span>
		<span class="kw1">private</span> <span class="kw1">final</span> <span class="kw4">int</span> servingSize<span class="sy0">;</span>
		<span class="kw1">private</span> <span class="kw1">final</span> <span class="kw4">int</span> servings<span class="sy0">;</span>
&nbsp;
		<span class="co1">// 선택 매개변수들 - 디폴트 값으로 초기화한다</span>
		<span class="kw1">private</span> <span class="kw4">int</span> calories <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
		<span class="kw1">private</span> <span class="kw4">int</span> fat <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
		<span class="kw1">private</span> <span class="kw4">int</span> carbohydrate <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
		<span class="kw1">private</span> <span class="kw4">int</span> sodium <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
&nbsp;
		<span class="kw1">public</span> Builder<span class="br0">&#40;</span><span class="kw4">int</span> servingSize, <span class="kw4">int</span> servings<span class="br0">&#41;</span><span class="br0">&#123;</span>
			<span class="kw1">this</span>.<span class="me1">servingSize</span> <span class="sy0">=</span> servingSize<span class="sy0">;</span>
			<span class="kw1">this</span>.<span class="me1">servings</span> <span class="sy0">=</span> servings<span class="sy0">;</span>
		<span class="br0">&#125;</span>
&nbsp;
		<span class="kw1">public</span> Builder calories<span class="br0">&#40;</span><span class="kw4">int</span> val<span class="br0">&#41;</span><span class="br0">&#123;</span>
			calories <span class="sy0">=</span> val<span class="sy0">;</span>
			<span class="kw1">return</span> <span class="kw1">this</span><span class="sy0">;</span>
		<span class="br0">&#125;</span>
&nbsp;
		<span class="kw1">public</span> Builder fat<span class="br0">&#40;</span><span class="kw4">int</span> val<span class="br0">&#41;</span><span class="br0">&#123;</span>
			fat <span class="sy0">=</span> val<span class="sy0">;</span>
			<span class="kw1">return</span> <span class="kw1">this</span><span class="sy0">;</span>
		<span class="br0">&#125;</span>
&nbsp;
		<span class="kw1">public</span> Builder carbohydrate<span class="br0">&#40;</span><span class="kw4">int</span> val<span class="br0">&#41;</span><span class="br0">&#123;</span>
			carbohydrate <span class="sy0">=</span> val<span class="sy0">;</span>
			<span class="kw1">return</span> <span class="kw1">this</span><span class="sy0">;</span>
		<span class="br0">&#125;</span>
&nbsp;
		<span class="kw1">public</span> Builder sodium<span class="br0">&#40;</span><span class="kw4">int</span> val<span class="br0">&#41;</span><span class="br0">&#123;</span>
			sodium <span class="sy0">=</span> val<span class="sy0">;</span>
			<span class="kw1">return</span> <span class="kw1">this</span><span class="sy0">;</span>
		<span class="br0">&#125;</span>
&nbsp;
		<span class="kw1">public</span> NutritionFacts build<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
			<span class="kw1">return</span> <span class="kw1">new</span> NutritionFacts<span class="br0">&#40;</span><span class="kw1">this</span><span class="br0">&#41;</span><span class="sy0">;</span>
		<span class="br0">&#125;</span>
	<span class="br0">&#125;</span>
	<span class="kw1">private</span> NutritionFacts<span class="br0">&#40;</span>Builder builder<span class="br0">&#41;</span><span class="br0">&#123;</span>
		servingSize <span class="sy0">=</span> builder.<span class="me1">servingSize</span><span class="sy0">;</span>
		servings <span class="sy0">=</span> builder.<span class="me1">servings</span><span class="sy0">;</span>
		calories <span class="sy0">=</span> builder.<span class="me1">calories</span><span class="sy0">;</span>
		fat <span class="sy0">=</span> builder.<span class="me1">fat</span><span class="sy0">;</span>
		sodium <span class="sy0">=</span> builder.<span class="me1">sodium</span><span class="sy0">;</span>
		carbohydrate <span class="sy0">=</span> builder.<span class="me1">carbohydrate</span><span class="sy0">;</span>
&nbsp;
	<span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre>
</dd></dl>

<p>
NutritionFacts는 불변 클래스이며, 모든 매개변수의 디폴트 값을 한군데에 모아 둔다는 것에 주목하자. 빌더의 세터 메서드들은 연속적으로 여러 번 호출될 수 있도록 빌더 자신의 객체를 반환한다. 
</p>
<pre class="code">NutritionFacts cocaCola = new NutritionFacts.Builder(240,8).calories(100).sodium(35).carbohydrate(27).build();</pre>

<p>
이런 클라이언트 코드는 작성이 쉽고, 더 중요한 것은 가독성이 좋다는 것이다. 생성자처럼 빌더는 자신의 매개변수에 불변 규칙을 적용할 수 있고, build 메서드는 그런 불변 규칙을 검사할 수 있다. 중요한 것은, 매개변수들의 값이 빌더로부터 객체에 복사된 후 빌더의 필드가 아닌 객체의 필드에 대해 불변 규칙 검사가 수행되는 것이다. 만일 어떤 불변 규칙이라도 위배되면, build 메서드에서 IllegalStateException 예외를 발생시키며, 이 예외 관련 메서드에서는 어떤 불변 규칙이 위배되었는지 알려주어야 한다.
</p>

<p>
복수 개의 매개변수에 불변 규칙을 적용시키는 또 다른 방법은 모든 그룹의 매개변수를 받는 세터 메서드들을 두는 것이다. 그리고 만일 불변 규칙이 충족되지 않으면, 세터 메서드에서 IllegalArgumentException 예외를 발생시킨다. 이렇게 하면 build 메서드가 호출될 때까지 기다릴 필요가 없고, 부적합한 매개변수가 전달되는 즉시 불변 규칙의 이상 유무를 검출할 수 있다는 장점이 있다.
</p>

<p>
생성자 대비 빌더의 또 다른 장점은, 여러 개의 가변인자(varargs) 매개변수를 가질 수 있다는 것이다. 일반 메서드처럼 생성자는 하나의 가변인자만 매개변수로 가질 수 있다. 빌더는 각 매개변수에 대해 별도의 세터 메서드를 사용하므로, 우리가 필요한 만큼 많은 가변인자를 가질 수 있다.
</p>

<p>
매개변수들의 값이 설정된 빌더는 훌륭한 추상 팩토리를 만든다. 즉, 클라이언트 코드에서는 그런 빌더를 메서드로 전달하여 그 메서드에서 하나 이상의 객체를 생성하게 할 수 있다. 단, 이렇게 하려면 빌더를 나타내는 타입(type)이 필요하다.
</p>
<pre class="code">// 제네릭 타입이 T인 빌더
public interface Builder&lt;T&gt;{
  public T build();
}</pre>

<p>
앞에 나온 NutritionFacts.Builder 클래스에서 Builder&lt;NutritionFacts&gt; 인터페이스를 구현하게끔 할 수 있다는 것에 주목하자. 특정 빌더 인스턴스를 매개변수로 받는 메서드에서는 빌더의 타입 매개변수로 바운드 와일드카드 타입을 사용한다. 예를 들어, 이진 트리를 만드는 메서드는 다음과 같아. 이 메서드에서는 클라이언트 코드에서 제공하는 빌더 인스턴스를 사용해서 각 노드를 생성하는 트리를 만든다.
</p>
<pre class="code">Tree buildTree(Builder&lt;? extends Node&gt; nodeBuilder){ ... }</pre>

<p>
자바에서는 Class란 이름을 갖는 클래스가 추상 팩토리 패턴을 구현하고 있는데, 이 클래스의 newInstance메서드에서 빌드 메서드의 역할을 수행한다.
</p>

<p>
요약하면, 생성자나 static 팩토리 메서드에서 많은 매개변수를 갖게 될 클래스를 설계할대는 빌더 패턴이 좋은 선택이다. 특히 선택 매개변수가 대부분인 경우가 그렇다.
</p>

</div>
<!-- EDIT3 SECTION "항목2 생성자의 매개변수가 많을 때는 빌더를 고려하자" [4948-13528] -->
<h2 class="sectionedit4" id="항목3_private_생성자나_enum_타입을_사용해서_싱글턴의_특성을_유지하자">항목3 private 생성자나 enum 타입을 사용해서 싱글턴의 특성을 유지하자</h2>
<div class="level2">

<p>
싱글턴(singleton)은 정확히 하나의 인스턴스만 생성되는 클래스이다. 싱글턴은 본질적으로 유일한 시스템 컴포넌트를 나타낸다. 예를 들면, 윈도우 매니저나 파일 시스템 등이다. 자바 1.5 버전 이전에는 싱글톤을 구현하는 방법이 두 가지 있었으며, 두 방법 모두 생성자를 private으로 하고, 유일한 인스턴스에 접근할 수 있도록 public static 멤버를 외부에 제공한다. 그 중 한가지 방법에서는 다음 예와 같이 멤버가 final 필드이다.
</p>
<pre class="code">// public final 필드를 갖는 싱글턴
public class Elvis{
	public static final Elvis INSTANCE = new Elvis();
	private Elvis(){
		...
	}
	public void leaveTheBuilding(){
		...
	}
}</pre>

<p>
private 생성자는 딱 한번만 호출되어 public static final 필드인 Elvis.INSTANCE를 초기화한다. public이나 protected 생성자가 없으므로, “한 명의 엘비스 프레슬리”만 존재하는 세계를 보장한다. 즉, 클래스가 최초 한번 초기화될 때 정확히 하나의 인스턴스만 생길 것이다. 따라서 클라이언트는 이것을 변경할 수 있는 방법이 없다. 한 가지 예외가 있다면, 허가된 클라이언트가 AccessibleObject.setAccessible 메서드를 사용해서 private 생성자를 재귀적으로 호출할 수 있다는 것이다. 하지만 만일 이런 호출을 막을 필요가 있다면, 두 번째 인스턴스를 생성하는 요청이 올때 예외를 발생시키도록 생성자를 수정하면 된다.
</p>

<p>
싱글턴을 구현하는 두 번째 방법은 다음과 같이 static 팩토리 메서드를 public 멤버로 두는 것이다.
</p>
<pre class="code">// static 팩토리 메서드를 갖는 싱글턴
public class Elvis{
	private static final Elvis INSTANCE = new Elvis();
	private Elvis(){
		...
	}
	public static Elvis getInstance(){
		return INSTANCE;
	}
	
	public void leaveTheBuilding(){
		...
	}
}</pre>

<p>
몇 번이 호출되건 Elvis.getInstance에서는 항상 같은 객체 참조를 반환하며, 또 다른 Elivs 인스턴스는 절대 생성되지 않는다. 앞으로 얘기한 AccessibleObject.setAccessible 메서드를 사용해도 마찬가지다.
</p>

<p>
이에 비해 팩토리 메서드 방법의 한 가지 장점은, 클래스의 API를 변경하지 않고 클래스에서 반환하는 싱글턴 인스턴스의 형태를 바꿀 수 있는 유연성을 제공한다는 것이다. 예를 들어, 팩토리 메서드에서는 오직 하나의 인스턴스를 반환하지만, 이 메서드를 호출하는 각 스레드(thread)마다 하나씩의 인스턴스를 반환하도록 쉽게 수정할 수 있다. 두 번째 장점은, 제네릭 타입에 관한 것이다. 하지만 이런 장점들은 그다지 유용하지는 않으며, final 필드를 이용한 방법이 더 간단하다.
</p>

<p>
앞의 두 가지 방법으로 구현된 싱글턴 클래스를 직렬화 가능하도록 하려면 어떻게 해야 할까? 우선, 다른 클래스처럼 클래스 선언부에 implements Serializable을 추가해야 한다. 그리고 싱글턴을 보장하기 위해 모든 인스턴스 필드를 transient로 선언해야 하며, readResolve 메서드를 추가해야 한다. 그렇지 않으면, 직렬화된 인스턴스가 역직렬화 될 때마다 새로운 인스턴스가 생성된다. 앞의 예로 보면 가짜 Elvis들이 출현하는 것이다. 이것을 막기 위해 Elvis 클래스에 readResolve 메서드를 추가한다.
</p>
<pre class="code">// 싱글턴의 특성 보존을 위한 readResolve 메서드
private Object readResolbe(){
	// 하나의 진짜 Elvis를 반환하고
	// 가비지 컬렉터(garbage collector)가 
	// 가짜 Elvis를 처리하도록 한다.
	return INSTANCE;
}</pre>

<p>
자바 1.5 이후 버전에서는 싱글턴을 구현하는 세 번재 방법이 있다. 하나의 요소를 갖는 열거형 (enum) 타입을 만들면 된다.
</p>
<pre class="code">// 열거형(Enum) 싱글턴
public enum Elvis{
	INSTANCE;
	public void leaveTheBuilding(){
		...
	}
}</pre>

<p>
이 방법은 public 필드 방법과 기능적으로 동일하지만 더 간단하다. 그리고 복잡한 직렬화나 리플렉션 상황에서도 직렬화가 자동으로 지원되고, 인스턴스가 여러 개 생기지 않도록 확실하게 보장해준다. 이 방법은 아직 널리 적용되지 않았지만 싱글턴을 구현하는 가장 좋은 방법이다.
</p>

</div>
<!-- EDIT4 SECTION "항목3 private 생성자나 enum 타입을 사용해서 싱글턴의 특성을 유지하자" [13529-18024] -->
<h2 class="sectionedit5" id="항목4_private_생성자를_사용해서_인스턴스_생성을_못하게_하자">항목4 private 생성자를 사용해서 인스턴스 생성을 못하게 하자</h2>
<div class="level2">

<p>
static 메서드와 static 필드만을 모아놓고 사용하는 유틸리티 클래스들은 인스턴스를 생성하지 못하게 설계되었다. 인스턴스 생성이 무의미하기 때문이다. 그러나 그런 클래스일지라고 명시적으로 지정한 생성자가 없을 때는 컴퓨터가 디폴트 생성자를 만들어준다. 이 경우 클래스 사용자 입장에서는 이 생성자가 다른 것과 차이가 없으므로 인스턴스 생성이 가능한 클래스로 오인될 수 있다. 그러므로 생성자 호출을 통한 인스턴스 생성을 방지하고 API문서에도 나타나지 않도록 할 수 있는 방법이 필요하다.
</p>

<p>
추상(Abstract)클래스로 만들어서 인스턴스 생성을 불가능하게 하려는 것은 잘못된 생각이다. 추상 클래스는 서브 클래스를 만들 수 있고, 그 서브 클래스는 인스턴스 생성이 가능하다. 게다가 추상 클래스가 상속을 위해 설계된 것처럼 잘못 알게 한다. 그렇다면 어떠한 방법이 있을까? 인스턴스를 생성할 수 없게 해주는 간단한 이디엄이 있다. private 생성자를 정의하면 인스턴스 생성이 불가능한 클래스를 만들 수 있다. 물론 <abbr title="Application Programming Interface">API</abbr> 문서에도 안 나타나게 할 수 있다.
</p>
<pre class="code">// 인스턴스 생성이 불가능한 유틸리티 클래스
public class UtilityClass{
	// 디폴트 생성자가 자동으로 생기는 것을 방지한다.
	private UtilityClass(){
		throw new AssertionError();
	}
	... 
}</pre>

<p>
명시적으로 정의한 생성자가 private이므로 이 클래스 외부에서는 생성자 호출이 불가능하다. 여기서 AssertionError 예외는 꼭 필요하지 않지만, 이 생성자가 클래스 내부에서 우연히 잘못 호출될 경우를 대비해서 둔 것이다. 이렇게 하면 어떤 상황에서든 이 클래스의 인스턴스를 생성할 수 없을 것이다. 하지만 이 코드를 봐서는 생성자를 호출할 수 없도록 일부러 한 것인지 알기 어렵다. 따라서 주석을 추가하는 것이 좋다.
</p>

</div>
<!-- EDIT5 SECTION "항목4 private 생성자를 사용해서 인스턴스 생성을 못하게 하자" [18025-20197] -->
<h2 class="sectionedit6" id="항목5_불필요한_객체의_생성을_피하자">항목5 불필요한 객체의 생성을 피하자</h2>
<div class="level2">

<p>
기능적으로 동일한 객체를, 필요할 때마다 매번 새로 생성하기보다는 하나의 객체를 재사용하는 것이 좋을 때가 많다. 재사용을 하면 객체 생성에 소요되는 비용(시간과 자원)이 절감되므로 실행 속도가 더 빨라지고 코드도 보기 좋게 작성할 수 있다. 불변(immutable) 객체는 항상 재사용 가능하다.
</p>

<p>
불변 클래스의 불필요한 객체 생성을 막으려면 생성자보다는 static 팩토리 메서드를 사용하는 것이 좋다. 예를 들어, 생성자인 Boolean(String)보다 static 팩토리 메서드인 Boolean.valueOf(String)을 사용하는 것이 항상 더 바람직하다. 생성자는 호출될 때마다 새 객체를 만드는 반면, static 팩토리 메서드는 결코 그럴 필요가 없고 실제로 그렇게 하지도 않는다.
</p>

<p>
불변 객체의 재사용에 덧붙여, 객체(의 상태)가 변경되지 않는다면 가변(mutable)객체도 재사용 가능하다. 
</p>

</div>
<!-- EDIT6 SECTION "항목5 불필요한 객체의 생성을 피하자" [20198-21255] -->
<h2 class="sectionedit7" id="항목6_쓸모없는_객체_참조를_제거하자">항목6 쓸모없는 객체 참조를 제거하자</h2>
<div class="level2">

<p>
자바와 같이 가비지 컬렉션을 자동으로 해주는 언어를 사용하게 되면 우리가 메모리 관리를 고려하지 않다도 된다는 생각을 가질 수 있다. 그러나 그것은 사실이 아니다. 객체가 사용하지 않는 메모리를 자동으로 회수하는 가비지 컬렉션이 지원되는 프로그래밍 언어에서 생기는 메모리 누출은 우리가 모르는 사이에 진행된다. 만일 가비지 컬렉션 되어야 할 특정 객체 참조가 의도하지 않게 계속 유지된다면, 그 객체는 물론이고 그 객체가 참조하는 모든 다른 객체까지도 가비지 컬렉션 대상에서 제외된다. 따라서 단지 몇 개의 객체 참조만 의도하지 않게 유지되더라도, 수없이 많은 객체들이 가비지 컬렉션 되지 않을 수 있으므로 성능에 심각한 영향을 줄 수 있다. 
이런 부류의 문제에 대한 해결책은 해결책은 간단하다. 즉, 쓸모 없은 참조를 null로 만든느 것이다.
</p>

<p>
메모리 누출이 흔히 생기는 또 다른 근원은 캐시(cache)이다. 객체 참조를 캐시에 저장하면 저장햇다는 것을 잊어버리고 객체가 더 이상 필요 없을 때까지 내버려 두기 쉽다. 만일 외부에 캐시의 키에 대한 참조가 있을 동안만 캐시에 저장된 항목이 유효한 그런 캐시를 구현하는 것으로 충분하다면, WeakHashMap을 캐시로 사용하자. 그러면 키로 저장된 객체가 더 이상 참조되지 않을 때 해당 항목이 자동으로 삭제될 것이다(가비지 컬렉터가 해준다). 캐시에 저장된 항목들의 생명주기가 각 항목의 키(값이 아닌)에 대한 외부 참조에 의해 결정되도록 할 때에만 WeakHashMap이 유용하다는 것을 기억하자.
</p>

<p>
메모리 누출의 세 번째 근원은 리스너와 콜백이다. 만일 클라이언트가 콜백을 등록하되 말소는 하지 않는 API를 구현한다면 우리가 뭔가 조치를 취하지 않는한 콜백은 계속 누적될 것이다. 콜백이 신속하게 가비지 컬렉션 되도록 하는 가장 좋은 방법은 약한 참조만을 저장 유지하는 것이다.
</p>

</div>
<!-- EDIT7 SECTION "항목6 쓸모없는 객체 참조를 제거하자" [21256-23511] -->
<h2 class="sectionedit8" id="항목7_파이널라이저_finalizer_의_사용을_피하자">항목7 파이널라이저(finalizer)의 사용을 피하자</h2>
<div class="level2">

<p>
파이널라이저의 한 가지 단점은 신속하게 실행된다는 보장이 없다는 것이다. 그렇다면 파이널라이저는 어떤 경우에 사용하면 좋을까? 한가지는 생성된 객체를 갖고 있는 코드에서 그 객체의 종료 메서드 호출을 빠뜨렸을 경우의 “안전망”역할을 하는 것이다. 두 번째 적합한 용도는 네이티브 피어객체와 관련이 있다. 네이티브 피어는 네이티브 메서드를 통해 일반 자바 객체가 자신의 일을 위임하는 네이티브 객체이다. 네이티브 피어는 일반 자바 객체가 아니므로, 그것과 연관된 자바 피어 객체가 소멸되면 가비지 컬렉터가 알지 못하며 재활용 할 수도 없다. 
</p>

</div>
<!-- EDIT8 SECTION "항목7 파이널라이저(finalizer)의 사용을 피하자" [23512-] -->