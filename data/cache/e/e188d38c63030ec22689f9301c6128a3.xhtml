
<h1 class="sectionedit1" id="프로그래밍_일반_규칙">01 프로그래밍 일반 규칙</h1>
<div class="level1">

</div>
<!-- EDIT1 SECTION "01 프로그래밍 일반 규칙" [1-47] -->
<h2 class="sectionedit2" id="뒤죽박죽_증감변수">1-1 뒤죽박죽 증감변수</h2>
<div class="level2">

<p>
지나치게 짧아서 의미를 알 수 없는 변수명은 피한다.
</p>

</div>
<!-- EDIT2 SECTION "1-1 뒤죽박죽 증감변수" [48-161] -->
<h2 class="sectionedit3" id="연관된_조건문은_하나로_통합한다">1-2 연관된 조건문은 하나로 통합한다</h2>
<div class="level2">

<p>
컴파일 오류와 런타임 오류
</p>
<div class="table sectionedit4"><table class="inline">
	<thead>
	<tr class="row0">
		<th class="col0">컴파일 오류 </th><th class="col1"> 런타임 오류 </th>
	</tr>
	</thead>
	<tr class="row1">
		<td class="col0"> 컴파일 오류란 소스코드를 .class 파일로 컴파일 하는 과정에서 JVM이 던지는 오류로서, 대부분 소스코드 자체의 문법적 오류로 인해 발생하는 경우가 대부분이며, 프로그램 자체에서 처리할 방법은 없다. 그러므로 프로그램이 만들어지려면 이런 오류를 반드시 수정해야 한다. </td><td class="col1"> 런타임 오류란 문법적인 오류가 없어서 컴파일 시에는 정상적으로 프로그램이 만들어졌지만 프로그램을 실행하는 과정에서 발생하는 오류를 의미한다. 컴파일 오류와 달리 무조건 잘못된 오류는 아니다. </td>
	</tr>
	<tr class="row2">
		<td class="col0"> 컴파일 오류의 예 : ClassNotFoundException, Illegal AccessException, NoSuchMethodException </td><td class="col1"> 런타임 오류의 예 : NullPointerException, ArithmeticException, IndexOutOfBoundException </td>
	</tr>
</table></div>
<!-- EDIT4 TABLE [262-1138] -->
</div>
<!-- EDIT3 SECTION "1-2 연관된 조건문은 하나로 통합한다" [162-1139] -->
<h2 class="sectionedit5" id="아무것도_하지_않는_if문은_제거한다">1-3 아무것도 하지 않는 if문은 제거한다</h2>
<div class="level2">

<p>
JUnit을 이용하여 특정 모의 상황을 설정해 개발자가 원하는 프로세스의 흐름을 테스트해 볼 수 있다.
</p>

</div>
<!-- EDIT5 SECTION "1-3 아무것도 하지 않는 if문은 제거한다" [1140-1338] -->
<h2 class="sectionedit6" id="잘못된_null_조건_비교">1-4 잘못된 null 조건 비교</h2>
<div class="level2">

</div>
<!-- EDIT6 SECTION "1-4 잘못된 null 조건 비교" [1339-1384] -->
<h2 class="sectionedit7" id="잘못된_위치의_null_비교">1-5 잘못된 위치의 null 비교</h2>
<div class="level2">

</div>
<!-- EDIT7 SECTION "1-5 잘못된 위치의 null 비교" [1385-1433] -->
<h2 class="sectionedit8" id="for_문에서는_절대_float를_증감변수로_사용하지_않는다">1-7 for 문에서는 절대 float를 증감변수로 사용하지 않는다</h2>
<div class="level2">

</div>
<!-- EDIT8 SECTION "1-7 for 문에서는 절대 float를 증감변수로 사용하지 않는다" [1434-1522] -->
<h2 class="sectionedit9" id="반복문_끝에는_분기문을_두지_않는다">1-8 반복문 끝에는 분기문을 두지 않는다</h2>
<div class="level2">

</div>
<!-- EDIT9 SECTION "1-8 반복문 끝에는 분기문을 두지 않는다" [1523-1589] -->
<h2 class="sectionedit10" id="boolean_객체의_사용법">1-9 Boolean 객체의 사용법</h2>
<div class="level2">

<p>
Boolean 객체는 불필요한 인스턴스화를 방지하기 위해 static 필드로 TRUE와 FALSE를 포함하고 있으며, 아래와 같은 식으로 불필요한 인스턴스의 생성을 방지할 수 있다.
</p>
<pre class="code">Boolean bool = Boolean.TRUE;
Boolean bool = Boolean.FALSE;</pre>

</div>
<!-- EDIT10 SECTION "1-9 Boolean 객체의 사용법" [1590-1915] -->
<h2 class="sectionedit11" id="biginteger_객체의_사용법">1-10 BigInteger 객체의 사용법</h2>
<div class="level2">

<p>
자주 사용되는 값들은 미리 상수로 정의되어 있으므로 불필요한 인B스턴스화를 할 필요가 없다.
</p>

</div>
<!-- EDIT11 SECTION "1-10 BigInteger 객체의 사용법" [1916-2092] -->
<h2 class="sectionedit12" id="bigdecimal의_함정">1-11 BigDecimal의 함정</h2>
<div class="level2">

<p>
BigDecimal을 선언할때 실수를 직접 사용해선 안된다(근사치로 정의됨)
</p>

</div>
<!-- EDIT12 SECTION "1-11 BigDecimal의 함정" [2093-2222] -->
<h2 class="sectionedit13" id="진수_값은_사용하지_않는다">1-12 8진수 값은 사용하지 않는다</h2>
<div class="level2">

<p>
10진수로 오인할 가능성이 높음
</p>

</div>
<!-- EDIT13 SECTION "1-12 8진수 값은 사용하지 않는다" [2223-2320] -->
<h2 class="sectionedit14" id="잘못_하드코딩된_ip는_위험하다">1-13 잘못 하드코딩된 IP는 위험하다</h2>
<div class="level2">

<p>
서버 프로그램을 개발할 때 서버의 IP를 자바 소스코드에 하드코딩하는 습관은 바람직하지 않다. 이러한 코딩 스타일은 유지보수와 보안상 매우 위험한 코딩 스타일이다. 이와 관련해서 다음과 같은 두 가지 대표적인 예가 있다.
</p>

<p>
첫째, IP는 관리적인 측면과 보안상의 이유로 유동적으로 변경될 수 있다는 점을 명심해야 한다. IP가 바뀔때마다 불필요한 소스 수정과 재컴파일이 필요하다.
</p>

<p>
둘째, 자바 소스는 디컴파일이 가능하다. 
</p>

</div>
<!-- EDIT14 SECTION "1-13 잘못 하드코딩된 IP는 위험하다" [2321-2950] -->
<h2 class="sectionedit15" id="올바른_toarray_메서드_사용법">1-14 올바른 toArray 메서드 사용법</h2>
<div class="level2">

</div>
<!-- EDIT15 SECTION "1-14 올바른 toArray 메서드 사용법" [2951-] -->