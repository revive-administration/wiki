a:2:{s:7:"current";a:8:{s:4:"date";a:2:{s:7:"created";i:1445323393;s:8:"modified";i:1445323393;}s:7:"creator";s:6:"벨몽";s:4:"user";s:7:"velmont";s:11:"last_change";a:7:{s:4:"date";i:1445323393;s:2:"ip";s:13:"110.10.34.159";s:4:"type";s:1:"C";s:2:"id";s:66:"intro._to_software_engineering_and_object-oriented_programming_2_2";s:4:"user";s:7:"velmont";s:3:"sum";s:6:"만듦";s:5:"extra";s:0:"";}s:5:"title";s:67:"Intro to software engineering and object-oriented programming (2/2)";s:11:"description";a:2:{s:15:"tableofcontents";a:12:{i:0;a:4:{s:3:"hid";s:65:"intro_to_software_engineering_and_object-oriented_programming_2_2";s:5:"title";s:67:"Intro to software engineering and object-oriented programming (2/2)";s:4:"type";s:2:"ul";s:5:"level";i:1;}i:1;a:4:{s:3:"hid";s:3:"oop";s:5:"title";s:3:"OOP";s:4:"type";s:2:"ul";s:5:"level";i:2;}i:2;a:4:{s:3:"hid";s:12:"oop_concepts";s:5:"title";s:12:"OOP concepts";s:4:"type";s:2:"ul";s:5:"level";i:2;}i:3;a:4:{s:3:"hid";s:22:"adt_abstract_data_type";s:5:"title";s:23:"ADT(Abstract Data Type)";s:4:"type";s:2:"ul";s:5:"level";i:2;}i:4;a:4:{s:3:"hid";s:5:"class";s:5:"title";s:5:"class";s:4:"type";s:2:"ul";s:5:"level";i:2;}i:5;a:4:{s:3:"hid";s:6:"object";s:5:"title";s:6:"Object";s:4:"type";s:2:"ul";s:5:"level";i:2;}i:6;a:4:{s:3:"hid";s:32:"information_hiding_encapsulation";s:5:"title";s:32:"Information Hiding/Encapsulation";s:4:"type";s:2:"ul";s:5:"level";i:2;}i:7;a:4:{s:3:"hid";s:15:"class_vs_object";s:5:"title";s:15:"Class vs Object";s:4:"type";s:2:"ul";s:5:"level";i:2;}i:8;a:4:{s:3:"hid";s:11:"inheritance";s:5:"title";s:11:"Inheritance";s:4:"type";s:2:"ul";s:5:"level";i:2;}i:9;a:4:{s:3:"hid";s:12:"polymorphism";s:5:"title";s:12:"Polymorphism";s:4:"type";s:2:"ul";s:5:"level";i:2;}i:10;a:4:{s:3:"hid";s:15:"dynamic_binding";s:5:"title";s:15:"Dynamic Binding";s:4:"type";s:2:"ul";s:5:"level";i:2;}i:11;a:4:{s:3:"hid";s:24:"benefits_of_object_model";s:5:"title";s:24:"Benefits of Object Model";s:4:"type";s:2:"ul";s:5:"level";i:2;}}s:8:"abstract";s:309:"Intro to software engineering and object-oriented programming (2/2)

OOP
What is problem?Traditional structured programming is not sufficient for large software maintenance and reuseSolution? OOPImprove reusabilitySW reliability is increased using reusable modules which are already well-tested and error-free";}s:8:"internal";a:2:{s:5:"cache";b:1;s:3:"toc";b:1;}s:8:"relation";a:1:{s:10:"firstimage";s:0:"";}}s:10:"persistent";a:4:{s:4:"date";a:1:{s:7:"created";i:1445323393;}s:7:"creator";s:6:"벨몽";s:4:"user";s:7:"velmont";s:11:"last_change";a:7:{s:4:"date";i:1445323393;s:2:"ip";s:13:"110.10.34.159";s:4:"type";s:1:"C";s:2:"id";s:66:"intro._to_software_engineering_and_object-oriented_programming_2_2";s:4:"user";s:7:"velmont";s:3:"sum";s:6:"만듦";s:5:"extra";s:0:"";}}}