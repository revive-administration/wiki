a:2:{s:7:"current";a:9:{s:4:"date";a:2:{s:7:"created";i:1421461037;s:8:"modified";i:1421466960;}s:7:"creator";s:6:"벨몽";s:4:"user";s:7:"velmont";s:11:"last_change";a:7:{s:4:"date";i:1421466960;s:2:"ip";s:13:"211.187.32.51";s:4:"type";s:1:"E";s:2:"id";s:36:"lecture_2.1_-_higher-order_functinos";s:4:"user";s:7:"velmont";s:3:"sum";s:0:"";s:5:"extra";s:0:"";}s:11:"contributor";a:1:{s:7:"velmont";s:6:"벨몽";}s:5:"title";s:36:"Lecture 2.1 - Higher-Order functions";s:11:"description";a:2:{s:15:"tableofcontents";a:1:{i:0;a:4:{s:3:"hid";s:35:"lecture_21_-_higher-order_functions";s:5:"title";s:36:"Lecture 2.1 - Higher-Order functions";s:4:"type";s:2:"ul";s:5:"level";i:1;}}s:8:"abstract";s:253:"Lecture 2.1 - Higher-Order functions

Functional languager treat functions as first-class values.

This means that, like any other value, a function can be passed as a parameter and returned as aresult.

This provides a flexible way to compose programs.";}s:8:"internal";a:2:{s:5:"cache";b:1;s:3:"toc";b:1;}s:8:"relation";a:1:{s:10:"firstimage";s:0:"";}}s:10:"persistent";a:5:{s:4:"date";a:2:{s:7:"created";i:1421461037;s:8:"modified";i:1421466960;}s:7:"creator";s:6:"벨몽";s:4:"user";s:7:"velmont";s:11:"last_change";a:7:{s:4:"date";i:1421466960;s:2:"ip";s:13:"211.187.32.51";s:4:"type";s:1:"E";s:2:"id";s:36:"lecture_2.1_-_higher-order_functinos";s:4:"user";s:7:"velmont";s:3:"sum";s:0:"";s:5:"extra";s:0:"";}s:11:"contributor";a:1:{s:7:"velmont";s:6:"벨몽";}}}