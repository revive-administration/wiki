a:2:{s:7:"current";a:8:{s:4:"date";a:2:{s:7:"created";i:1409634283;s:8:"modified";i:1409634283;}s:7:"creator";s:6:"벨몽";s:4:"user";s:7:"velmont";s:11:"last_change";a:7:{s:4:"date";i:1409634283;s:2:"ip";s:14:"165.194.94.225";s:4:"type";s:1:"C";s:2:"id";s:33:"chapter_10_데코레이터_패턴";s:4:"user";s:7:"velmont";s:3:"sum";s:6:"만듦";s:5:"extra";s:0:"";}s:5:"title";s:33:"Chapter 10 데코레이터 패턴";s:11:"description";a:2:{s:15:"tableofcontents";a:3:{i:0;a:4:{s:3:"hid";s:33:"chapter_10_데코레이터_패턴";s:5:"title";s:33:"Chapter 10 데코레이터 패턴";s:4:"type";s:2:"ul";s:5:"level";i:1;}i:1;a:4:{s:3:"hid";s:9:"해결책";s:5:"title";s:14:"10.3 해결책";s:4:"type";s:2:"ul";s:5:"level";i:2;}i:2;a:4:{s:3:"hid";s:22:"데코레이터_패턴";s:5:"title";s:27:"10.4 데코레이터 패턴";s:4:"type";s:2:"ul";s:5:"level";i:2;}}s:8:"abstract";s:270:"Chapter 10 데코레이터 패턴

10.3 해결책

조합 수가 늘어나는 문제를 해결할 수 있는 설계를 하려면 각 추가 기능별로 개별적인 클래스를 설계하고 기능을 조합할 때 각 클래스의 객체 조합을 이용하면 된다.";}s:8:"internal";a:2:{s:5:"cache";b:1;s:3:"toc";b:1;}s:8:"relation";a:1:{s:10:"firstimage";s:0:"";}}s:10:"persistent";a:4:{s:4:"date";a:1:{s:7:"created";i:1409634283;}s:7:"creator";s:6:"벨몽";s:4:"user";s:7:"velmont";s:11:"last_change";a:7:{s:4:"date";i:1409634283;s:2:"ip";s:14:"165.194.94.225";s:4:"type";s:1:"C";s:2:"id";s:33:"chapter_10_데코레이터_패턴";s:4:"user";s:7:"velmont";s:3:"sum";s:6:"만듦";s:5:"extra";s:0:"";}}}