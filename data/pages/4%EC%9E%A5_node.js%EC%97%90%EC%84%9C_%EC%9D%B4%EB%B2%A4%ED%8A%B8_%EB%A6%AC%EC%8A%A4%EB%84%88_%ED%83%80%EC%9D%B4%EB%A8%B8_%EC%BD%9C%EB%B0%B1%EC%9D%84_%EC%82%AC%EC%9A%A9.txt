====== 4장 Node.js에서 이벤트, 리스너, 타이머, 콜백을 사용 ======
이번 장에서는 이벤트 기반 모델과 대부분의 웹 서버에서 사용하는 방식인 스레드 기반 모델의 차이점을 알아본다. 이벤트 모델을 이해하면 Node.js의 성능을 증대시킬 수 있는 애플리케이션을 디자인할 수 있다.

===== Node.js 이벤트 모델 이해 =====
==== 이벤트 콜백 방식과 스레드 방식 비교 ====
전통적인 스레드 기반 웹 모델에서는 요청이 웹 서버로 도착하면 가능한 스레드로 작업이 할당된다. 해당 요청에 대한 처리는 완료 및 응답을 보낼 때까지 동일한 스레드에서 지속된다.

Node.js는 이벤트 큐에 작업을 추가한다. 단일 스레드가 이벤트 루프를 돌며 최상위 이벤트를 골라내어 수행 후 다음 아이템을 선택한다. 수행중인 코드가 오랜 기간 지속되거나 블로킹 I/O를 가지고 있다면 이벤트 루프에서 직접 처리하지 않고 콜백 함수와 함께 이벤트 큐에 추가한다. Node.js 이벤트 큐에 모든 이벤트가 처리된 후에는 Node.js 애플리케이션이 종료된다.

==== Node.js의 블로킹 I/O ====
블로킹 I/O는 현재 스레드의 수행을 중단시키고 지속적으로 응답을 기다린다. 블로킹 I/O의 종류는 다음과 같다.
  * 파일 읽기
  * 데이터베이스 질의
  * 소켓 요청
  * 원격 서비스 접속

Node.js는 블로킹 I/O로 인한 지연을 피하고자 이벤트 콜백을 사용한다. 그래서 블로킹 I/O를 수행한 어떤 요청이든 백그라운드의 다른 스레드에서 수행된다. Node.js는 백그라운드에서 스레드 풀을 구현했다. 이벤트 큐에서 이벤트나 블록 I/O 이벤트가 얻어지면 Node.js는, 메인 이벤트에서 루프 스레드가 아닌, 스레드 풀에서 스레드 한 개를 꺼내어 해당 함수를 수행한다. 이런 구조로 인해 이벤트 큐 내에 모든 잔여 이벤트들의 블로킹 I/O를 방지할 수 있다.