====== 4. Requirements engineering ======
  * The process of establishing
    * the services that the customer requires from a system
    * and the constraints under which it operates and is developed.
==== What is a requirement? ====
  * It may range
    * from a high-level abstract statement of a service or of a system constraints
    * to a detailed mathematical functional specification
  * This is inevitable as requirements may serve a dual function
    * May be the basis for a bid for a contract
      * abstract enough to be open various solution
    * May be the basis for the contract itself
      * must be defined in detail
    * Both these statements may be called requirements
====Types of requirement ====
  * User requirements
    * Statements in a natural language plus diagrams of the service the system provides and its operational contstraints
    * Written for customers
  * System requirements
    * A structured document setting out detailed descriptions of the system services
    * Written as a contract between client and contractor

===== 4.1 Functional and non-functional requirements =====
  * Functional requirements
    * Statements of services the system should provide, how the system should react to particular inputs and how the system should behave in particular situations
    * May state what the system should not do
  * Non-functional requirements
    * Constraints on the services or functions offered by the system such as timing constraints, constraints on the development process, standard, etc.
    * Often apply to the system as a whole rather than individual features or services.
    * 비기능 요구사항은 시스템과 관련된 다양한 요구사항을 표현한다
    * 성능, 정확성, 이식성, 재사용성, 관리용이성, 상호운영성, 용량, 보안성, 가용성 등..
    * 비기능 요구사항들은 시스템의 동작 방식에 제약을 두는 경우가 많음
    * 몇 가지 제약사항은 현실적으로 테스트하기 힘들다거나 테스트하는 것이 의미가 없을 수 있음

==== 4.1.2 Non-functional requirements ====
=== Non-functional classifications ===
  * Product requirements
    * Specify that the delivered product must behave in a particular way
  * Organisational requirements
    * Consequence of organisational policies and procedures
   * External requirements
     * External to the system and its development process
==== 4.1.3 Goals and requirements ====
  * Difficult to state precisely
  * Imprecise requirements
  * Goal : A general intention of the user
  * Verifiable non-functional requirement

===== 4.2 The software requirements document =====

==== Software Requirements Specification (SRS) ====
  * The requirements document is the official statement of what is required of the system developers
  * Should include both
    * User requirements and
    * System requirements
  * It is NOT A design document
    * It should set of WHAT the system should do rather than HOW it should do it

===== 4.3 Requirements specification =====
  * Definition 
    * The process of writing down the user and system requirements in a requirements document
  * Poperties
    * User requirements have to be understandable by end-users and customers who do not have a technical background
    * System requirements are more detailed requirements and may include more technical information
    * The requirements may be part of a contract for the system development

==== Ways of writing system requirements specification ====
  * Natural language sentences
    * The requirements are written using numbered sentences in natural language. Each sentence should express one requirement
    * Problem
     * Lack of clarity
     * Requirements confusion
     * Requirements amalgamation(섞임)
  * Structured natural language
  * Design description languages
  * Graphical notations
  * Mathematical specifications

==== 4.3.1 Guidelines for writing requirements ====
  * Invent a standard format and use it for all requirements
  * Use language in a consistent way. Use shall for mandatory requirements, should for desirable requirements.
  * Use text highlighting to identify key parts of the requirements
  * Avoid the use of computer jargon

==== 4.3.2 Structured specification ====
  * Restrictions over natural language
    * Template
      * Uses predefined template for requirements
    * Standardization
      * All requirements are written in a standard way
    * Limited terminology
      * The terminology used in the description may be limited
  * Adavantages
    * Expressiveness of natural language is maintained
    * Uniformity is imposed on the specification
===== 4.4 Requirements Engineering Process =====
==== 4.4.1 Feasibility studies ====
  * A feasibility study decides whether or not the proposed system is worthwhile
  * A short focused study that checks
    * If the system contributes to organisational objectives
    * If the system can be engineered using current technology and within budget
    * If the system can be integrated with other systems that are used
  * Questions in the organisation
    * What if the system wasn't implemented?
    * What are current process problems?
    * How will the proposed system help?
===== 4.5 Elicitation(도출) and analysis =====
  * Sometimes called requirements elicitation or requirements discovery
  * Involves technical staff working with customers to find out about the application domain, the service that system should provide and the system's operational constraints.
==== 4.5.1 Requirements discovery ====
  * The process of 
    * gathering information about the systems and
    * distilling(추출하다) the user/system requirements
  * Sources of information include
    * documentation
    * system stakeholder
    * specifications of similar systems

=== Viewpoints ===
  * a way of structuring the requirements to represent the perspectives of different stakeholder
  * Stakeholders may be classified under different viewpoints
  * The multi-perspective analysis is important
    * there is no single correct way to analyse system requirements
=== Types of viewpoint ===
  * Interactor viewpoints 
    * 시스템을 직접 쓰는 사람들의 관점에서 요구사항을 나타낸 것
  * Indirect viewpoints 
    * 직접 쓰진 않지만 영향이 있는 사람들의 관점에서 나타낸것 (PPT의 경우 의료계 관련 종사자)
  * Domain viewpoints
    * 도메인 특성와 요구사항에 영향을 끼치는 그 제약들을 전문가의 관점에서 나타낸 것

==== 4.5.4 Use cases ====
  * Use-cases are a kind of a scenario that are included in the UML
  * Use cases identify the actors in an interaction and which describe the interaction itself
  * A set of use cases should describe all possible interactions with the system.
  * High-level graphical model supplemented by more detailed tabular description
  * UML sequence diagrams may be used to add detail to use-cases by showing the sequence of event processing in the system.

===== 4.6 Requirements validation =====
  * Concerned with demonstrating that
    * the requirements define the system that the customer really wants
  * Requirements error costs are high

==== Requirements checking ====
  * Validity : Does the system provide the functions which best support the customer's needs?
  * Consistency : Are there any requirements conflicts?
  * Completeness : Are all functions required by the customer included?
  * Realism : Can the requirements be implemented given available budget and technology?
  * Verifiability : Can the requirements be checked?

==== Requirements validation techniques ====
  * Requirements reviews
    * Systematic manual analysis of the requirements
    * Checks Verifiability, Comprehensibility, Traceability, Adaptability
  * Prototyping
    * Using an executable model of the system to check requirements
  * Test-case generation
    * Developing tests for requirements to check testablility

===== 4.7 Requirements management =====
  * Requirements management
    * The process of managing changing requirements during the requirements engineering process and system development
  * Requirements Change
    * The priority of requirements from different viewpoints changes during the development process.
    * System customers may specify requirements from a business perspective that conflict with end-user requirements
    * The business and technical environment of the system changes during its development
==== 4.7.1 Requirements management planning ====
  * Requirement identification
    * Each requirements must be uniquely identified
  * A change management process
    * The set of activities that assess the impact and cost of changes
  * Traceability policies
    * The relationship between requirements, and between the requirements and the system design
    * How these records should be maintained
  * CASE tool support
    * The tool support required to help manage requirements change; ranges from spreadsheet to database system
=== Traceability ===
  * Traceability is concerned with relationships between requirements, their sources and the system design
  * Source traceability
    * Links from requirements to stakeholders who proposed these requirements
  * Requirements traceability
    * Links between dependent requirements 
  * Design traceability
    * Links from the requirements to the design

=== CASE tool support ===
  * Requirements storage
    * Requirements should be managed in a secure, managed data store.
  * Change management
    * The process of change management is a workflow process whose stages can be defined and information flow between these stages partially automated
  * Traceability management
    * Automated retrieval of the links between requirements.