====== 1장 소개 ======
=====1.1 변수 =====
변수는 데이터를 표현하는 저장소이다. 

=====1.2 데이터형 =====
프로그래밍 언어에서 데이터형은 미리 정해진 특성을 가진 값들의 집합이다. 데이터형은 정수, 부동 소수점 숫자, 문자, 문자열 등이 있다. 어떤 문제를 풀기 위해 프로그램을 작성할 대 0과 1로만 답을 제시하기가 무척 어렵기 때문에 사용자를 돕기 위해 프로그래밍 언어와 컴파일러는 데이터형을 제공한다. 예를들어 정수는 2바이트, 실수는 4바이트를 차지한다. 이 말은 결국 메모리에서는 2바이트를 붙여서 정수라고 부른다는 것이다. 마찬가지로 4바이트를 붙여 실수라고 부른다. 데이터는 크게 나누어 두 가지 종류가 있다.

  * 시스템 정의 데이터형(원시 데이터형이라고도 불린다)
  * 사용자 정의 데이터형

==== 시스템 정의 데이터형(원시 데이터형) ====
시스템에 의해 정의된 데이터형을 원시 데이터형이라고 부른다. 많은 프로그래밍 언어에서 제공되는 원시 데이터형에는 int, float, char, double, bool 등이 있다. 
==== 사용자 정의 데이터형 ====
시스템 정의 데이터형으로 충분하지 않을 때 대부분의 프로그래밍 언어는 사용자가 직접 데이터형을 정의할 수 있게 해준다. 사용자 정의 데이터형의 좋은 예는 C/C++의 구조체와 Java의 클래스이다. 

=====1.3 데이터 구조 =====
앞의 논의에 의어서, 변수에 데이터를 담았다면 그 데이터를 이용해서 문제를 풀기 위한 기법이 필요해진다. 데이터 구조는 효율적으로 데이터를 저장하고 정리하는 특별한 방법이다. 

항목을 정리하는 방법에 따라 데이터 구조는 두 가지 종류로 나뉜다.

  * 1) 선형 데이터 구조 : 항목들이 순차적 차례에 따라 접근되지만 순차적으로 저장되어야 하는 것은 아니다. 
    * 예) 연결 리스트, 스택, 큐
  * 2) 비선형 데이터 구조 : 항목들이 비선형의 차례로 저장/접근된다
    * 예) 트리, 그래프

===== 1.4 추상 데이터형 =====

문제를 푸는 과정을 단순화시키기 위해 데이터 구조와 연산을 합쳐 놓을 것을 추상 데이터형이라고 하는데, ADT는 두 부분으로 구성된다.

  * 1. 데이터의 선언
  * 2. 연산의 선언

===== 1.5 알고리즘이란 무엇인가? =====
** 알고리즘은 주어진 문제를 풀기 위한 단계별 지시사항들이다. **

===== 1.6 왜 알고리즘을 분석하는가? =====
알고리즘 분석은 시간과 공간적으로 어느 것이 가장 효율적인지 알 수 있게 해준다.
===== 1.8 수행 시간 분석이란 무엇인가? ====
문제의 크기(입력의 크기)가 증가함에 따라 처리 시간이 얼마나 증가하는지를 분석하는 것이다. 입력 크기는 입력되는 항목의 개수인데 문제의 종류에 따라 입력의 종류도 달라진다. 일반적으로 다음과 같은 종류의 입력들을 볼 수 있다.

  * 배열의 크기
  * 다항식의 차수
  * 행렬의 항목 개수
  * 이진으로 표현된 입력의 비트 수
  * 그래프에서의 정점과 간선

===== 1.13 점근적 표기법 =====
최선, 평균, 최악의 경우에 대한 수식이 있을 때, 이 세 개의 경우 모두에 대해 상한과 하한을 찾아야 한다. 이러한 상한과 하한을 표현하기 위해 필요한 문법을 알아보자. 주어진 알고리즘이 함수 f(n)의 형태로 표현된다고 하자.

===== 1.14 빅-오 표기법 =====
이 표기법은 주어진 함수에 대해 엄밀한(tight) 상한을 찾게 해준다. 

  O(g(n)) = { f(n) : n >= n0 인 모든 n에 대해 0<=f(n)<=cg(n)을 만족하는 양의 상수 c와 n0이 존재한다 }

g(n)은 f(n)의 엄밀한 점근적 상한이다. 이 때 우리의 목적은 주어진 알고리즘의 증가율 f(n)과 크거나 같은 최소의 증가율 g(n)을 찾는 것이다. 

===== 1.15 오메가 표기법 =====
이 표기법은 주어진 알고리즘에 대해 엄밀한 하한을 찾게 해주며 f(n) = 오메가(g(n))으로 표현된다.


===== 1.16 세타 표기법 =====
이 표기법은 주어진 함수 (알고리즘)의 상한과 하한이 같은지 아닌지를 결정한다. 알고리즘의 평균 수행 시간은 항상 하한과 상한 사이에 존재한다.