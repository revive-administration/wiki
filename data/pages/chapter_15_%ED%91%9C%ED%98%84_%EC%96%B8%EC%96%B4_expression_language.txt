====== Chapter 15 표현 언어 (Expression Language) ======

===== 01 표현 언어란? =====
표현 언어(Expression Language)는 JSTL(JSP Standard Tag Library) 1.0 규약에 소개된 내용으로서 JSP 2.0 버전부터 표현 언어가 포함되었고, JSP 2.1 버전부터 표현 언어와 관련된 규약을 별도 문서로 제공하고 있다. 

표현 언어는 이름에서 알 수 있듯이 값을 표현하는데 사용되는 새로운 스크립트 언어로서 JSP의 기본 문법을 보오나하는 역할을 한다. 표현 언어는 다음과 같은 기능을 제공하고 있다.
  * JSP의 네 가지 기본 객체가 제공하는 영역의 속성 사용
  * 집합 객체에 대한 접근 방법 제공
  * 수치 연산, 관계 연산, 논리 연산자 제공
  * 자바 클래스 메서드 호출 기능 제공
  * 표현 언어만의 기본 객체 제공

==== 1.1 표현 언어의 기본 문법 ====
표현 언어는 다음과 같이 $와 표현식 그리고 괄호 ('{' 와 '}')를 사용하여 값을 표현한다.
  ${expr}
  
expr 부분에는 표현 언어가 정의한 문법에 따라 값을 표현하는 식이 온다. 표현 언어는 액션 태그나 18장에서 배울 커스텀 태그의 속성 값으로 사용할 수 있다. 예를 들어, 다음과 같은 형태로 사용이 가능하다.

  <jsp:include page="/module/${skin.id}/header.jsp" flush="true"/>

액션 태그나 커스텀 태그뿐만 아니라 비스크립트 요소 부분에서도 표현식처럼 값을 출력하기 위해 사용할 수 있다.

  <b>${sessionScope.member.id}</b>님 환영합니다.
  
표현 언어는 JSP의 스크립트 요소(스크립틀릿, 표현식, 선언부)를 제외한 나머지 부분에서 사용될 수 있으며, 표현 언어를 통해서 표현식보다 편리하게 값을 출력할 수 있다.

JSP 2.1 버전부터는 ${expr} 형식뿐만 아니라 #{expr}구문ㅇ르 새롭게 지원하고 있다. #{expr}형식은 JSF(JavaServer Faces)에서 사용되던 표현 언어 구문으로 JSP 2.1 버전에 새롭게 추가되었다. #{expr}과 ${expr}의 가장 큰 차이점은 실제로 EL의 값을 언제 생성하느냐에 있다.

${expr} 형식의 EL은 ${expr} 구문을 분석할 때 곧바로 값을 계산한다. 예를 들어, 아래 코드를 보자.

	<%
		Member m = new Member();
		m.setName("이름1");
	%>

	<c:set var="m" value="<%=m%>">
	<c:set var="name" value="${m.name}" /><%-- 이 시점에 바로 값 계산 --%>
	<% m.setName("이름2"); %>
	${name} <%-- name의 값은 "이름1" --%>

아직 배우진 않았지만 <c:set> JSTL 태그는 EL 변수를 생성해주는 기능을 제공한다. 위 코드에서 name EL 변수의 값으로 ${m.name}을 지정했는데, m.name을 계산한 결과인(즉, m.getName()의 결과인) "이름1"을 name의 값으로 할당한다. 따라서, 그 뒤에 m.setName()으로 값을 변경하더라도 name 변수의 값을 변경되지 않는다.

반면에 #{expr} 형식의 구문은 실제로 값이 사용될 때 값을 계산한다.

===== 02 표현 언어의 기본 객체 =====
JSP는 웹 어플리케이션을 구현하는데 필요한 정보를 담고 있는 요청, 응답, 세션 등에 쉽게 접근할 수 있도록 request, session 등의 기본 객체를 제공하고 있다. EL(표현 언어)도 이와 마찬가지로 11개의 기본 객체를 제공함으로써 요청 파라미터나 세션 속성 값 등을 표현식에서 쉽게 사용할 수 있도록 하고 있다. EL이 제공하는 11개의 기본객체는 다음과 같다.

^기본 객체^설명^
|pageContext| JSP의 page 기본 객체와 동일하다.|
|pageScope| pageContext 기본 객체에 저장된 속성의 <속성,값> 매핑을 저장한 Map 객체|
|requestScope | request 기본 객체에 저장된 속성의 <속성,값> 매핑을 저장한 Map 객체|
|sessionScope | session 기본 객체에 저장된 속성의 <속성,값> 매핑을 저장한 Map 객체|
|applicationScope|application 기본 객체에 저장된 속성의 <속성,값> 매핑을 저장한 Map 객체|
|param | 요청 파라미터의 <파라미터이름, 값> 매핑을 저장한 Map 객체, 파라미터 값을 타입은 String으로서, request.getParameter(이름)의 결과와 동일하다|
|paramValues|요청 파라미터의 <파라미터이름, 값배열> 매핑을 저장한 Map 객체. 값의 타입은 String[]|
|header|요청 정보의 <헤더이름, 값> 매핑을 저장한 Map 객체. request.getHeader(이름)의 결과와 동일하다.|
|headerValues| 요청 정보의 <헤더이름, 값 배열> 매핑을 저장한 Map 객체. request.getHeaders(이름)의 결과와 동일하다.|
|cookie|<쿠키 이름, Cookie> 매핑을 저장한 Map 객체. request.getCookies()로 구한 Cookie 배열로부터 매핑을 생성한다.|
|initParam| 초기화 파라미터의<이름, 값> 매핑을 저장한 Map 객체, application.getInitParameter(이름)의 결과와 동일하다.|

===== 03 표현 언어의 기본 =====
EL도 일종의 스크립트 언어로서 자료 타입, 수치 연산자, 논리 연산자, 비교 연산자 등을 제공하고 있다. EL의 언어적인 측면과 규칙들을 숙지하지 않으면, 나중에 EL을 사용할 때 버그나 논리적인 오류들을 쉽게 찾을 수 없게 되므로 익히도록 하자.
==== 3.1 EL의 데이터 타입 ==== 
EL은 불리언 타입, 정수 타입, 실수 타입, 문자열 타입, 그리고 널 타입의 5가지 타입을 제공하고 있으며 각각의 표현 방식은 다음과 같다.
  * 불리언 타입
  * 정수 타입
  * 실수 타입
  * 문자열 타입
  * 널 타입
==== 3.2 객체에 접근하기 ====
==== 3.3 객체의 탐색 ====

==== 3.4 수치 연산자 ====
==== 3.5 비교 연산자 ====
===== 04 표현 언어에서 객체의 메서드 호출 =====
===== 05 표현 언어에서 클래스 정적 메서드 호출하기 =====
