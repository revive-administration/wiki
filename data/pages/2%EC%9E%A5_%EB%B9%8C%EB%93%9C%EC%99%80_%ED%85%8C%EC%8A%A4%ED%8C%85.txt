====== 2장 빌드와 테스팅 ======
===== 샘플 애플리케이션 소개 =====
==== 문제 도메인에 익숙해지기 ====
샘플 애플리케이션의 목적은 프로젝트와 백로그, 스프린트와 스프린트 백로그, 할일, 진행 차트 등의 스크럼 산출물을 관리해 팀을 도와주는 것이다. 이 애플리케이션은 사용자와 프로젝트를 설정하는 관리자 기능도 역시 지원한다.
==== 기술 스택 ====
==== 영구 저장소 ====
=== 몽고 DB ===
    * 문서는 JSON 스타일의 데이터 형식(바이너리 JSON)
    * 자바스크립트나 익숙한 JSO 문법으로 데이터 질의와 조작이 가능하다
    * JSON 형식의 데이터를 REST 엔드포인트로 주고받을 수 있다.

=== MongoLab ===
=== 서버 측 환경 ===
node.js
=== 서드파티 자바스크립트 라이브러리 ===
=== 부트스트랩 CSS ===

===== 빌드 시스템 =====
자바스크립트와 css 파일이 운영 서버에 배포되기 전에 여러 번의 검증과 변환 과정을 거치며, 이런 변환 과정에는 다음과 같은 것들이 있다.
  * 자바스크립트 소스코드는 jslint(http://www.jslint.com/)나 jshint(http://www.jshint.com/) 혹은 비슷한 도구로코딩 표준을 준수하는지 검사해야 한다.
  * 테스트 스위트를 가능한 한 자주, 최소한 빌드할 때마다 시행해야 한다. 이러한 테스트 도구와 테스트 과정은 빌드 시스템과 반드시 강하게 통합되어야 한다.
  * 템플릿으로 css 파일을 만드는 LESS 처럼 특정 파일은 생성해야 한다.
  * 브라우저 성능 향상을 위해 특정 파일을 합치거나 최소화해야 한다.

==== 빌드 시스템 원칙 ====
==== 도구 ====
=== Grunt.js ===
grunt.js를 한 줄로 표현하면 다음과 같다.
  "자바스크립트 프로젝트를 위한 작업 기반의 커맨드라인 빌드 도구"
grunt.js 빌드 스크립트는 자바스크립트로 작성되었으며 node.js 플랫폼에서 실행된다. 샘플 애플리케이션을 빌드하고 시행하는 데 같은 프로그래밍 언어와 같은 플랫폼을 사용할 수 있으니 매우 좋다. 

=== 테스트 라이브러리와 도구 ===
AngularJS는 자동화된 테스트를 사용하며 이를 강력히 추천한다. AngularJS로 작성된 코드가 테스트하기 쉬운 이유는 Angular팀이 테스트를 매우 진지하게 생각하고 있기 때문이다. 자세한 것은 Jasmine을 참조하자.

=== Jasmine ===
Jasmine은 행위주도 개발에 기반을 둔 자바스크립트 테스트 프레임워크이다. AngularJS는 매일 테스트를 수행하고 쉽게 사용할 수 있는 Jasmine 확장 기능과 다양한 목(mock) 객체도 구현했다.

=== Karma 실행기 ===
Karma 실행기를 사용하면 자바스크립트 테스트를 쉽게 수행할 수 있다. Karma 실행기는 자바스크립트와 node.js 기반의 JS TestDriver라는 유명한 테스트 실행기를 대체하기 위해 만들어졌다. Karma 실행기는 실행 중인 브라우저 인스턴스에 소스와 테스트 코드를 적용해 테스트를 실행하고 각 테스트 결과를 모은 후 보고서로 만들어진다. 즉, 테스트를 실행하기 위해 실제 브라우저를 사용한다. 

===== 파일과 폴더 구조 =====
==== 루트 폴더 ====
다음은 고수준의 디렉토리 구조를 만드는 기본적인 가정이다.
  * 애플리케이션 소스코드에 연관된 테스트 코드는 반드시 분리해야 한다. 보통 소스코드와 테스트 코드를 빌드하기 위한 여러 빌드 작업이 있기 때문에 이를 분리함으로써 빌드 시스템을 좀 더 쉽게 유지 보수할 수 있다.
  * 내부 코드와 외부 라이브러리는 반드시 분리해야 한다. 외부 라이브러리는 우리가 제품을 배포하는 것과 다른 주기로 변경될 수 있기 때문에 외부 라이브러리를 언제든 쉽게 변경할 수 있어야 한다. 내부 소스와 섞여 있으면 외부 라이브러리를 변경하는 작업이 힘들고 시간을 많이 소비하는 일이 된다.
  * 빌드 관련 스크립트는 소스코드와 섞이지 않게 따로 분리해야 한다.
  * 빌드 산출물은 별개의 폴더에 저장해야 한다. 그리고 빌드 결과의 산출물과 구조는 실제 운영 서버에 배포할 수 있는 형태와 동일해야 한다. 단순히 빌드 산출물을 가져다가 배포하기만 하면 되도록 배포 과정이 쉬워야 하기 때문이다.
  * 기본 가정들을 조합해 나온 최상위 디렉토리
    * src : 애플리케이션의 소스코드
    * test : 테스트 코드
    * vendor : 외부 라이브러리
    * build : 빌드 스크립트
    * dist : 바로 배포 가능한 빌드 산출물
    * .gitignore
    * LICENSE : MIT 라이센스 약관
    * grunt.js : 빌드 환경 설정 파일
    * package.json : node.js 애플리케이션의 패키지 정보
==== 소스코드 내부 ====
  
