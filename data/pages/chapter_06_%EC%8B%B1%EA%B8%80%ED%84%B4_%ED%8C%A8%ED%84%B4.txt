====== Chapter 06 싱글턴 패턴 ======
===== 6.1 프린터 관리자 만들기 =====
Printer 클래스의 생성자를 private으로 선언하면 외부에서는 new Printer()를 더 사용할 수 없게 된다. 그러나 하나의 인스턴스는 만들어야 되는 상황이므로 이 인스턴스를 만들어 외부에 제공해줄 메서드가 필요하다.
===== 6.2 문제점 =====
** 경합 조건(race condition) ** : 메모리와 같은 동일한 자원을 2개 이상의 스레드가 이용하려고 경합하려는 현상

===== 6.3 해결책 =====
다중 스레드 애플리케이션에서 발생하는 문제를 해결하는 방법 2가지를 설명한다.

  * 정적 변수에 인스턴스를 만들어 바로 초기화하는 방법
  * 인스턴스를 만드는 메서드에 동기화하는 방법

===== 6.4 싱글턴 패턴 =====
싱글턴 패턴은 인스턴스가 오직 하나만 생성되는 것을 보장하고 어디에서든 이 인스턴스에 접근할 수 있도록 하는 디자인 패턴이다. 원래 싱글턴이라는 단어는 '단 하나의 원소만을 가진 집합'이라는 수학 이론에서 유래되었다.

=====6.5 싱글턴 패턴과 정적 클래스=====
실제로 굳이 싱글턴 패턴을 사용하지 않고 정적 메서드로만 이루어진 정적 클래스를 사용해도 동일한 효과를 얻을 수 있다.

정적 클래스를 이용하는 방법이 싱글턴 패턴을 이용하는 방법과 가장 차이가 나는 점은 객체를 전혀 생성하지 않고 메서드를 사용한다는 점이다. 더욱이 정적 메서드를 사용하므로 성능 면에서 더 우수하다. 그러나 인터페이스를 구현해야 하는 경우 정적 메서드는 인터페이스에서 사용할 수 없다.