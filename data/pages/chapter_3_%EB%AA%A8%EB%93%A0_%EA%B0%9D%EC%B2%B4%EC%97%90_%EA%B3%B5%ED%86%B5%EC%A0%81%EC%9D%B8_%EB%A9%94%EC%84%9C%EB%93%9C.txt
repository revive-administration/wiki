====== CHAPTER 3 모든 객체에 공통적인 메서드 ======
Object은 실제 클래스(concrete class)지만 원래 상속을 목적으로 설꼐되었다. 
  * [[ 항목 8 equals 메서드를 오버라이딩 할 때는 보편적 계약을 따르자 ]]

====== 항목 9 equals 메서드를 호버라이드 할 때는 hashcode 메서드도 항상 같이 오버라이드 하자 ======
hashCode 메서드를 제대로 오버라이드 하지 않아 코드 결함이 생기는 경우가 흔하다. equals 메서드를 오버라이드 하는 모든 클래스에는 반드시 hashCode 메서드도 오버라이드 해야 한다. 그렇게 하지 않으면, Object.hashCode 메서드의 보편적 계약을 위반하게 되므로, HashMap과 HashSet 및 Hashtable을 포함하는 모든 해시 기반의 컬렉션들과 우리 클래스를 같이 사용할 때 우리 클래스가 올바르게 동작하지 않을 것이다.

자바 API 문서의 Object.hashCode 메서드 명세에서 가져온 계약 사항은 다음과 같다
  * 애플리케이션 실행 중에 같은 객체에 대해 한 번 이상 호출되더라도 hashCode 메서드는 같은 정수를 일관성 있게 반환해야 한다.(equals 메서드에서 비교하는 객체의 값이 변경되지 않는다면). 단, 이 정수 값은 애플리케이션이 매번 다시 실행될 때마다 일관되게 같을 필요는 없다.
  * equals(Object) 메서드 호출 결과 두 객체가 동일하다면, 두 객체 각각에 대해 hashCode 메서드를 호출했을 대 같은 정수 값이 나와야 한다.
  * equals(Object) 메서드 호출 결과 두 객체가 다르다고 해서 두 객체 각각에 대해 hashCode 메서드를 호출했을 때 반드시 다른 정수 값이 나올 필요는 없다. 하지만 일관된 정숫값 반환은 해시 컬렉션의 성능을 향상시킬 수 있음을 알아야 한다.

hashCode의 오버라이딩에 실패했을 때 위배되는 주요 조항은 두 번째 것으로써, 동일한 객체들은 같은 해시코드 값을 가져야 한다는 것이다. 일반적인 클래스의 equals 메서드에서는 두 개의 서로 다른 인스턴스들이 논리적으로 동일할 수 있다. 그러나 Object의 hashCode 메서드에서는 그것들이 단지 두 개의 객체일 뿐 논리적으로 같다는 것을 알 수 없다. 따라서 Object의 hashCode 메서드에서는 두 개의 같은 수 (hashCode 계약에서 요구하는) 대신 임의의 수 두 개를 반환한다