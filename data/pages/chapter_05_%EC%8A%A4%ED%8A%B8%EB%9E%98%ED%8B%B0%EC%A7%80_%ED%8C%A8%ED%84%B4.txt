======Chapter 05 스트래티지 패턴======
=====5.1 로봇 만들기 =====
=====5.2 문제점 =====
====5.2.1 기존 로봇의 공격과 이동 방법을 수정하는 경우 =====
====5.2.2 새로운 로봇에 공격/이동 방법을 추가/수정하는 경우====
=====5.3 해결책 =====

=====5.4 스트래티지 패턴 =====
스트래티지 패턴(Strategy Pattern)은 전략을 쉽게 바꿀 수 있도록 해주는 디자인 패턴이다. 여기서 전략이란 어떤 목적을 달성하기 위해 일을 수행하는 방식, 비즈니스 규칙, 문제를 해결하는 알고리즘 등으로 이해할 수 있다. 프로그램에서 전략을 실행할 때는 쉽게 전략을 바꿔야 할 필요가 있는 경우가 많이 발생한다. 특히 게임 프로그래밍에서 게임 캐릭터가 자신이 처한 상황에 따라 공격이나 행동하는 방식을 바꾸고 싶을 때 스트래티지 패턴은 매우 유용하다.

**KeyPoint_** 스트래티지 패턴은 같은 문제를 해결하는 여러 알고리즘이 클래스별로 캡슐화되어 있고 이들이 필요할 때 교체할 수 있도록 함으로써 동일한 문제를 다른 알고리즘으로 해결할 수 있게 하는 디자인 패턴이다.

