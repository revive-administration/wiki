====== 5. System modeling ======
  * System modeling
    * the process of developing abstract models of a system
    * each model presents a different view or perspective
    * understanding the functionality of the system
    * communication with customers
  * Unified Modeling Language (UML)

==== Usage of models ====
  * Models of the existing system
    * help clarify(명확하게 하다) what the existing system does
    * can be used as a basis for discussing its strengths and weaknesses
  * Models of the new system
    * help explain the proposed requirements to other system stakeholders
    * Engineers use these models to discuss design proposals and to document the system for implementation
  * MDE (model-driven engineering)
    * generate a complete or partial system implementation from the system model
==== System perspectives ====
  * External perspective
    * model the context or environment of the system.
  * Interaction perspective
    * model the interactions between a system and its environment, or between the components of a system
  * Structural perspective
    * model the organization of a system or the structure of the data
  * Behavioral perspective
    * model the dynamic behavior of the system and how it responds to events

==== UML diagram types ====
  * Activity diagrams 
    * show the activities involved in a process or in data processing
  * Use case diagrams
    * show the interactions between a system and its environment
  * Sequence diagrams
    * show interactions between actors and the system and between system components
  * Class diagrams
    * show the object classes in the system and the associations between these classes
  * State diagrams 
    * show how the system reacts to internal and external events

===== 5.1 Context models =====
  * Context models
    * illustrate the operational context of a system - they show what lies outside the system boundaries
    * In Architectural design, the models show the system and its relationship with other systems.
==== System boundaries ====
  * System boundaries
    * are established to define what is inside and what is outside the system
    * They show other systems that are used or depend or the system being developed
    * have a profound effect on the system requirements
  * Defining a system boundary is a political(정략적인) judgment
    * There may be pressure to develop system boundaries that increase/decrease the influence or workload(업무량) of different parts of an organization

==== Process perspective ====
  * Context models
    * simply show the other systems in the environment
    * not how the system being developed is used in that environment
  * Process models
    * reveal how the system being developed in used in broader business processes
    * UML activity diagrams may be used to define business process models.

===== 5.2 Interaction models =====
  * Modeling user interation
    * important as it helps to identify user requirements
  * System-to-system interaction
    * highlights the communication problems that may arise
  * Component interaction
    * helps us understand if a proposed system structure is likely to deliver the required system performance and dependability
  * Use case diagrams and sequence diagrams

==== 5.2.1 Use case modeling ====
  * Use case
    * represents a discrete(별개의) task that involves external interaction with a system
  * Actors
    * may be people or other systems
  * Represented graphically

==== 5.2.2 Sequence diagrams ====
  * Sequence diagrams
    * model the interactions between the actors and the objects within a system
    * show the sequence of interactions that take place during a particular use case or use case instance
    * The objects and actors involved are listed along the top of the diagram, with a dotted line drawn vertically from these
    * Interactions between objects are indicated by annotated arrows.

===== 5.3 Structural models =====
  * Structural models of software
    * display the organization of a system in terms of the components that make up that system and their relationships
    * Static models
      * show the structure of the system design, or dynamic models, which show the organization of the system when it is executing
    * Your create structural models of a system when you are discussing and designing the system architecture.
==== 5.3.1 Class diagrams ====
  * Used when developing an object-oriented system model
    * to show the classes in a system and the associations between these classes
  * An object class
    * a general definition of one kind of system object
  * An association
    * link between classes that indicated that there is some relationship between these classes.

==== 5.3.2 Generalization ====
  * Generalization manages complexity
    * Rather than learn the detailed characteristics of every entity that we experience, we place these entities in more general classes and learn the characteristics of these classes.
    * This allows us to infer that different members of these classes have some common characteristics e.g. squirrels and rats are rodents
  * In modeling systems
    * useful to examine the classes in a system to see if there is scope for generalization
    * if changes are proposed, you don't have to look at all classes in the system to see if they are affected by the change
  * Generalization is implements using the class inheritance

==== 5.3.3 Aggregation, Association, Composition ====
  * 참조 링크 : http://velmont.cafe24.com/xe/g_umlxml/10592

  * Association
    * represents the ability of one instance to send a message to another instance
    * This is typically implemented with a pointer or reference instance variable, although it might also be implemented as a mothod argument, or the creation of a local variable
  * Aggregation (구성) - 차와 탑승자의 관계 (차가 없어도 탑승객이라는 사람 자체는 존재함)
    * typical whole/part relationship
    * This is exactly the same as an association with the exception that instances cannot have cyclic aggregation relationships(a part cannot contain its whole)
  * Composition (포함) - 차와 엔진의 관계 (차가 없으면 엔진도 없다)
    * like Aggregation except that the lifetime of the part is controlled by the whole
    * This control may be directive or transitive(이행성). That is, the 'whole' may take direct responsibility for creating or destroying the 'part', or it may accept an already created part, and later pass it on to some other whole that assumes responsibility for it.

===== 5.4 Behavioral models =====
  * Models of the dynamic behavior of a system
  * Show what happens when a system responds to a stimulus(자극)
  * Stimulus types
    * Data
      * some data arrives that has to be processed by the system
    * Events
      * some event happens that triggers system processing
      * Events may have associated data, although this is not always the case

==== 5.4.1 Data-driven modeling ====
  * Business systems
    * data-processing systems that are primarily driven by data
    * controlled by the data input to the system, with relatively little external event processing
  * Data-driven models
    * show the sequence of actions involved in processing input data and generating an associated output
    * particularly useful during the analysis of requirements as they can be used to show end-to-end processing in a system

==== 5.4.2 Event-driven modeling ====
  * Real-time systems
    * often event-driven, with minimal data processing
    * For example, a landline phone switching system responds to events such as 'receiver off hook' by generating a dial tone.
  * Event-driven modeling
    * shows how a system responds to external and internal events
    * based on the assumption that a system has a finite number of states and that events (stimuli) may cause a transition from one state to another.

=== State machine models ===
  * State machine models
    * model the behaviour of the system in response to external and internal events.
    * show the systems's responses to stimuli so are often used for modelling real-time systems
    * show system states as nodes and events as arcs between these nodes.
    * When an event occurs, the system moves from one state to another
  * Statechart
    * UML diagram for state machine models

===== 5.5 Model-driven engineering
  * Models are principal(주요한) outputs of the development process
    * rather than programs
    * From the models the programs that execute on a hardware/software platform are generated automatically
  * Raising level of abstraction
    * engineers no longer have to be concerned with programming language details or the specifics of execution platforms

==== Usage of model-driven engineering ====
  * Model-driven engineering is still at an early stage of development
    * unclear whether or not it will have a significant effect on software engineering practice
  * Pros
    * Allow systems to be considered at higher levels of abstraction
    * Generating code automatically means that it is cheaper to adapt systems to new platforms
  * Cons
    * Models for abstraction and not necessarily right for implementation
    * Savings from generating code may be outweighed(더 중요하다) by the costs of developing translators for new platforms.

==== Model Driven Architecture (MDA) ====
  * MDA
    * a model-focused approach to software design and implementation
    * uses a subset of UML models to describe a system
  * Models
    * A computation independent model (CIM)
    * A platform independent model (PIM)
    * Platform specific model (PSM)

==== Adoption of MDA ====
  * Specialized tool support is required
  * The arguments for platform-independence are only valid for large, long-lifetime systems.