====== 다이나믹 프로그래밍 ======
===== 다이나믹 프로그래밍 =====
==== 개관 ====
  * 큰 문제를 작은 문제로 나누어 푸는 알고리즘
  * 두 가지 속성을 만족해야 다이나믹 프로그래밍으로 문제를 풀 수 있다.
    * 1. Overlapping Subproblem
    * 2. Optimal(최적의) Substructure

==== Optimal Substructure ====
  * 문제의 정답을 작은 정답에서 구할 수 있다.
  * Optimal Substructure을 만족하기 때문에 같은 문제는 구할 때마다 정답이 같다.
  * 따라서 정답을 한번 구했으면 정답을 메모해놓는다.
  * Memoization이라고 한다.

==== 다이나믹 프로그래밍의 풀이 ====
  * 1. Top-down
  * 2. Bottom-up

==== Top-down ====
  * 1. 문제를 작은 문제로 나눈다.
  * 2. 작은 문제를 푼다.
  * 3. 작은 문제를 풀었으니 문제를 푼다.
  * 재귀 호출

==== Bottom-up ====
  * 1. 문제를 크기가 작은 문제부터 차례대로 푼다.
  * 2. 문제의 크기를 조금씩 크게 만들면서 문제를 점점 푼다.
  * 3. 작은 문제를 풀면서 왔기 때문에 큰 문제는 항상 풀 수 있다.
  * 4. 그러다보면, 언젠간 풀어야 하는 문제를 풀 수 있다.

===== 문제 풀이 전략 =====
==== 다이나믹 문제 풀이 전략 ====
  * 문제에서 구하려고 하는 답을 문장으로 나타낸다.
  * 예) N번째 피보나치 수
  * 이제 그 문장에 나와있는 변수의 개수만큼 메모하는 배열을 만든다.
  * 문제를 작은 문제로 나누고, 수식을 이용해서 문제를 표현해야 한다.

===== 문제 풀이 =====
  * 1로 만들기
  * 2xn 타일링
  * 1,2,3 더하기
  * 쉬운 계단 수
  * 오르막 수
  * 스티커
  * 포도주 시식
  * 가장 긴 증가하는 부분수열
  * 가장 큰 증가하는 부분수열
  * 가장 긴 감소하는 부분수열
  * 가장 긴 바이토닉 부분수열
  * 연속합 1,2
  * 계단 오르기
  * 제곱수의 합
  * 타일 채우기
  * 파도반 수열
  * 합분해
  * 암호코드