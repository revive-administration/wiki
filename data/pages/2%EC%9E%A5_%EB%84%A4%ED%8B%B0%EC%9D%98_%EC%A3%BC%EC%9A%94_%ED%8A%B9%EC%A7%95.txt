====== 2장 네티의 주요 특징 ======
네티는 비동기 이벤트 기반 네트워크 애플리케이션 프레임워크로써 유지보수를 고려한 고성능 프로토콜 서버와 클라이언트를 빠르게 개발할 수 있다.
===== 2.1 동기와 비동기 =====
====2.1.1 정의 ====
  * 동기 [통신망]
    * 주기적인 운동을 하는 개체들이 서로 영향을 주고받거나 받게 됨으로써, 동일한 주기를 갖게 되는 것, 그러한 현상을 동기 현상이라고 하고, 동기된 상태를 동기화되었다고 한다. 통신에서는 주로 다른 시스템이나 네트워크 클럭 주파수나 비트, 프레임, 워드 등을 일치시키는 데 사용된다.
  * 비동기식 [데이터 통신]
    * 송수신 간에 신호를 주고받으며 작업을 수행하는 방식. 비동기식은 시작/정지 방식과 단계적 시작/정지 방식이 있다. 시작/정지 방식은 송신하는 각 문자의 전후에 시작 신호와 정지 신호를 붙여 송수신 간의 동기를 취하는 방식이며, 저속 전송에 사용되고 있다. 단계적 시작 정지 방식은 시작 신호와 정지 신호가 일정하게 정해진 간격에서 일어나는 동기 방식이다.

동기식 호출은 쉬운 디버깅과, 직관적인 흐름 추적이 가능하다는 장점이 있다. 비동기식은 호출자가 비록 인증 요청에 대한 결과를 수신하지 못했음에도 인증 요청이 완료되었기 때문에 인증 요청 결과를 기다리는 시간에 다른 작업을 수행할 수 있고 필요한 시기에 서비스로부터 발행된 티켓을 사용하여 요청한 인증 처리가 완료되었는지 확인할 수 있다.

===== 2.2 블로킹과 논블로킹 =====
블로킹은 요청한 작업이 성공하거나 에러가 발생하기 전까지는 응답을 돌려주지 않는 것을 말하며, 논블로킹은 요청한 작업의 성공 여부와 상관없이 바로 결과를 돌려주는 것을 말한다.

====2.2.1 블로킹 소켓 ====
블로킹 소켓은 데이터 입출력에서 스레드의 블로킹이 발생하기 때문에 동시에 여러 클라이언트에 대한 처리가 불가능하게 된다. 블로킹 모드의 소켓을 사용하는 서버가 다중 클라이언트의 접속처리를 하지 못하는 문제점을 해결하기 위해서 등장한 모델은 연결된 클라이언트별로 각각 스레드를 할당하는 방법이다. 

클라이언트가 서버에 접속하면 서버 소켓의 accept 메서드를 통해서 연결된 클라이언트 소켓을 얻어온다. 이 때 블로킹 소켓은 I/O 처리에 블로킹이 발생하기 때문에 새로운 스레드를 하나 생성하고 그 스레드에게 클라이언트 소켓에 대한 I/O 처리를 넘겨주게 된다. 이로써 서버 소켓이 동작하는 스레드는 다음 클라이언트의 연결을 처리할 수 있게 된다.

서버소켓의 accpet 메서드는 단위 시간에 하나의 연결만을 처리하는 블로킹 모드로 동작하기 때문에 여러 클라이언트가 동시에 접속 요청을 하는 상황에서 대기시간이 길어진다는 단점이 있다. 또한 접속할 클라이언트 수가 정해져 있지 않은 상황에서도 문제가 있을 수 있다. 자바의 힙 메모리 부족으로 인한 OOM 현상을 방지하려면 서버에서 생성되는 스레드 수를 제한하는 방법인 스레드 풀링을 사용하기도 한다.

====2.2.2 논 블로킹 소켓 ====
논 블로킹 소켓은 데이터를 일곡 쓰는 부분의 로직이 완전히 분리되어 있어 블로킹 소켓 예제에 비해 코드의 복잡도가 높다. 구조적으로 소켓으로부터 읽은 데이터를 바로 소켓에 쓸 수가 없다. 이를 위해서 각 이벤트가 공유하는 데이터 객체를 생성하고 그 객체를 통해서 각 소켓 채널로 데이터를 전송한다.

=====2.3 이벤트 기반 프로그래밍 =====
이벤트 기반 프로그래밍이란 이벤트를 먼저 정의해두고 발생한 이벤트에 따라서 코드가 실행되도록 프로그램을 작성하는 것을 말한다. 앞에서 살펴본 논블로킹 소켓의 Selector를 사용한 I/O 이벤트 감시 역시 이벤트 기반 프로그램의 한 종류다.

이벤트 프로그래밍에서 빼놓을 수 없는 부분으로 추상화 수준이 있다. 이벤트 추상화가 너무 고수준이면 세부적인 제어가 힘들어진다. 반대로 너무 저수준이면 한 동작에 대해서 너무 많은 이벤트가 발생하여 애플리케이션 성능에 악영향을 미치게 된다. 

====2.3.1 이벤트 기반 네트워크 프로그래밍 ====
네트워크 프로그램에서 이벤트가 발생하는 주체는 소켓이다. 그리고 발생하는 이벤트는 크게 소켓 연결, 데이터 송수신으로 나눌 수 있다.

소켓이란 데이터 송수신을 위한 네트워크 추상화 단위이데, 일반적으로 네트워크 프로그램에서 소켓은 IP 주소와 포트를 가지고 있으며 양방향 네트워크 통신이 가능한 객체다.
