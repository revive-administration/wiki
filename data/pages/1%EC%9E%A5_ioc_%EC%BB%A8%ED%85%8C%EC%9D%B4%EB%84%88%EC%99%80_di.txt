====== 1장 IoC 컨테이너와 DI ======
===== 1.1 IoC 컨테이너 : 빈 팩토리와 애플리케이션 컨텍스트 =====
스프링 애플리케이션에서는 오브젝트의 생성과 관계 설정, 사용, 제거 등의 작업을 애플리케이션 코드 대신 독립된 컨테이너가 담당한다. 
==== 1.1.1 IoC 컨테이너를 이용해 애플리케이션 만들기 ====
이렇게 만들어진 컨테이너가 본격적인 IoC 컨테이너로서 동작하려면 두 가지가 필요하다. POJO 클래스와 설정 메타정보다.
=== POJO 클래스 ===
먼저 애플리케이션의 핵심 코드를 담고 있는 POJO 클래스를 준비해야 한다. 
=== 설정 메타정보 ===
두 번째 필요한 것은 앞에서 만든 POJO 클래스들 중에 애플리케이션에서 사용할 것을 선정하고 이를 IoC 컨테이너가 제어할 수 있도록 적절한 메타정보를 만들어 제공하는 작업이다.

IoC 컨테이너의 가장 기초적인 역할은 오브젝트를 생성하고 이를 관리하는 것이다. 스프링 컨테이너가 관리하는 이런 오브젝트는 빈이라고 부른다. IoC 컨테이너가 필요로 하는 설정 메타정보는 바로 이 빈을 어떻게 만들고 어떻게 동작하게 할 것인가에 관한 정보다.

스프링의 설정 메타정보는 BeanDefinition 인터페이스로 표현되는 순수한 추상 정보다. 스프링 IoC컨테이너, 즉 애플리케이션 컨텍스트는 바로 이 메타정보의 내용을 표현한것이 있다면 무엇이든 사용 가능하다. BeanDefinitionReader가 있으면 된다. BeanDefinition 인터페이스로 정의되는, 빈 메타정보는 대략 다음과 같다.

  * 빈 아이디, 이름, 별칭 : 빈 오브젝트를 구분할 수 있는 식별자
  * 클래스 또는 클래스 이름 : 빈으로 만들 POJO 클래스 또는 서비스 클래스 정보
  * 스코프 : 싱글톤, 프로토타입과 같은 빈의 생성 방식과 존재 범위
  * 프로퍼티 값 또는 참조 : DI에 사용할 프로퍼티 이름과 값 또는 참조하는 빈의 이름
  * 생성자 파라미터 값 또는 참조 : DI에 사용할 생성자 파라미터 이름과 값 또는 참조할 빈의 이름
  * 지연된 로딩 여부, 우선 빈 여부, 자동 와이어링 여부, 부모 빈 정보, 빈 팩토리 이름 등

스프링 IoC 컨테이너는 각 빈에 대한 정보를 담은 설정 메타정보를 읽어들인 뒤에, 이름 참고해서 빈 오브젝트를 생성하고 프로퍼티나 생성자를 통해 의존 오브젝트를 주입해주는 DI 작업을 수행한다. 이 작업을 통해 만들어지고, DI로 연결되는 오브젝트들이 모여서 하나의 애플리케이션을 구성하고 동작하게 된다. IoC 컨테이너의 역할은 바로 이것이다. 

  메타정보 리소스 -> 메타정보 리더 -> 설정 메타 정보  -->  IOC 컨테이너              --> DI로 된 빈 오브젝트로 이루어진
                                    POJO클래스     -->  (애플리케이션 컨텍스트)    --> 어플리케이션
                                    
결국 스프링 애플리케이션이란 POJO 클래스와 설정 메타정보를 이용해 IoC 컨테이너가 만들어주는 오브젝트의 조합이라고 할 수 있다. 일반적으로 설정 메타정보는 XML 파일이나 애노테이션 같은 외부 리소스를 전용 리더가 읽어서 BeanDefinition 타입의 오브젝트로 만들어 사용한다. 원한다면 직접 BeanDefinition 메타정보를 생성할 수도 있다.

IoC 컨테이너가 관리하는 빈은 오브젝트 단위지 클래스 단위가 아니라는 사실을 기억해야 한다. 경우에 따라서 하나의 클래스를 여러 개의 빈으로 등록하기도 한다. 

  StaticApplicationContext ac = new StaticApplicationContext();
  ac.registerSingleton("hello1", Hello.class);
  Hello hello1 = ac.getBean("hello1", Hello.class);
  
  BeanDefinition helloDef = new RootBeanDefinition(Hello.class);
  helloDef.getPropertyValues().addPropertyValue("name", "Spring");
  ac.registerBeanDefinition("hello2", helloDef);
  
IoC 컨테이너는 빈 설정 메타정보를 담은 BeanDefinition을 이용해 오브젝트를 생성하고 DI 작업을 진행한 뒤에 빈으로 사용할 수 있도록 등록해준다. 이때 BeanDefinition의 클래스, 프로퍼티, 빈 아이디 등의 정보가 활용된다. IoC 컨테이너에서 등록된 빈 설정 메타정보를 가져올 수도 있다.

빈에 DI되는 프로퍼티는 스트링이나 숫자 등의 값과, 다른 빈 오브젝트를 가리키는 레퍼런스로 구분할 수 있다. 레퍼런스로 지정된 프로퍼티는 다른 빈 오브젝트를 주입해서 오브젝트 사이의 관계를 만들어내는 데 사용된다. Hello 클래스와 StringPrinter 클래스는 아주 느슨하고 간접적인 관계를 맺고 있을 뿐이다.

이번에는 Hello 타입의 빈과 StringPrinter 타입의 빈을 hello와 printer라는 빈 이름으로 생성하고 printer빈이 hello 빈에게 DI 되도록 만들어 보자. 

==== 1.1.2 IoC 컨테이너의 종류와 사용 방법 ====
=== StaticApplicationContext ===
StaticApplicationContext는 코드를 통해 빈 메타정보를 등록하기 위해 사용한다. 스프링의 기능에 대한 학습 테스트를 만들 때를 제외하면 실제로 사용되지 않는다. 그럼에도 이 클래스를 사용하는 코드를 살펴본 이유는 스프링 IoC컨테이너는 파일 폼새이나 리소스 종류에 독립적이며 오브젝트로 표현되는 순수한 메타정보를 사용한다는걸 보여주기 위해서였다. 
=== GenericApplicationContext ===
GenericApplicationContext는 가장 일반적인 애플리케이션 컨텍스트의 구현 클래스다. StaticApplicationContext와는 달리 XML 파일과 같은 외부의 리소스에 있는 빈 설정 메타정보를 리더를 통해 읽어들여서 메타정보로 전환해서 사용한다. 

==== 1.2.2 빈 등록 방법 ====
빈 등록은 빈 메타정보를 작성해서 컨테이너에게 건네주면 된다. 가장 직접적이고 원시적인 방법은 BeanDefinition 구현 오브젝트를 직접 생성하는 것이다. 하지만 스프링을 확장해서 프레임워크를 만들거나 스프링의 내부 동작원리를 학습하려는 게 목적이 아니라면 이 방법은 무리가 있다.

그래서 보통 XML 문서, 프로퍼티 파일, 소스코드 애노테이션과 같은 외부 리소스로 빈 메타정보를 작성하고 이를 적절한 리더나 변환기를 통해 애플리케이션 컨텍스트가 사용할 수 있는 정보로 변환해주는 방법을 사용한다.

스프링에서 자주 사용되는 빈의 등록 방법은 크게 다섯 가지가 있다.

  * XML : <bean> 태그
  * XML : 네임스페이스와 전용 태그

=== 자동인식을 이용한 빈 등록 : 스테레오타입 애노테이션과 빈 스캐너 ===
XML 문서와 같이 한곳에 명시적으로 선언하지 않고도 스프링 빈을 등록하는 방법이 있다. 빈으로 사용될 클래스에 특별한 애노테이션ㅇ르 부여해주면 이런 클래스를 자동으로 찾아서 빈으로 등록해주게 할 수 있다. 이렇게 특정 애노테이션이 붙은 클래스를 자동으로 찾아서 빈으로 등록해주는 방식을 빈 스캐닝을 통한 자동인식 빈 등록 기능이라고 하고, 이런 스캐닝 작업을 담당하는 오브젝트를 빈 스캐너라고 한다.

스프링의 빈 스캐너는 지정된 클래스패스 아래에 있는 모든 패키지의 클래스를 대상으로 필터를 적용해서 빈 등록을 위한 클래스들을 선별해낸다. 빈 스캐너에 내장된 디폴트 필터는 @Component 애노테이션 또는 @Component를 메타 애노테이션으로 가진 애노테이션이 부여된 클래스를 선택하도록 되어 있다. 이를 이용하면 @Component 등의 애노테이션을 지정하는 것만으로도 빈 등록이 가능하다. @Component를 포함해 디폴트 필터에 적용되는 애노테이션을 스프링에서는 스테레오 타입 애노테이션이라고 부른다.

개발 중에는 생산성을 위해 빈 스캐닝 기능을 사용해서 빈을 등록하지만, 개발이 어느 정도 마무리되고 세밀한 관리와 제어가 필요한 운영 시점이 되면 다시 XML 형태의 빈 선언을 적용하는 것도 좋은 전략이다. 빈 등록을 위한 스캐닝 작업은 지정된 클래스패스 안의 모든 클래스에 대해 필터를 적용하는 방법으로 진행된다. 이때 빈 스캐너의 필터를 변경하거나 정규식 같은 이름 패턴을 이용해서 빈으로 등록할 클래스를 선정하게 할 수 있다. 자동인식을 통한 빈 등록을 사용하려면 다음 두 가지 방법 중 하나를 쓰면 도니다.

  * XML을 이용한 빈 스캐너 등록
  * 빈 스캐너를 내장한 애플리케이션 컨텍스트 사용