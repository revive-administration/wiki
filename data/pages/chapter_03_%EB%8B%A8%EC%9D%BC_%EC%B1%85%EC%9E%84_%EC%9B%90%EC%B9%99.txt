====== Chapter 03 SOLID 원칙 ======
=====3.1 단일 책임 원칙 =====
소프트웨어 설계 첫 번째 원칙으로 SRP(Single Responsibility Principle)라는 단일 책임 원칙이 있다. 말 그대로 해석하자면 단 하나의 책임만을 가져야 한다는 의미다. 실제 3장에서 소개할 설계 원칙 5가지는 반드시 객체지향 소프트웨어 설계에만 한정되는 것이 아니며, 절차적 프로그래밍 기법에도 적용할 수 있다.

====3.1.1 책임의 의미 ====
  책임 = 해야 하는 것
  책임 = 할 수 있는 것
  책임 = 해야 하는 것을 잘 할 수 있는 것
  
  
====3.1.2 변경 ====
좋은 설계란 기본적을 시스템에 새로운 요구사항이나 변경이 있을 때 가능한 한 영향 받는 부분을 줄이는 것이다. 가령 어떤 클래스가 설계되었는지를 판단하려면 언제 변경되어야 하는지를 물어보는 것이 좋다.

  책임 = 변경 이유
  
또한 책임을 많이 질수록 클래스 내부에서 서로 다른 역할을 수행하는 코드끼리 강하게 결합될 가능성이 높아진다. 이런 경우 어떠한 코드의 기능 변화가 다른 코드의 기능 변화를 불러 일으킬 수도 있다.

====3.1.3 책임 분리 ====
어떤 클래스에 변경사항이 생기면 해당 클래스를 직접 또는 간접적으로 사용하는 모든 코드를 다시 테스트해야 한다. 이와 같이 어떤 변화가 있을 때 해당 변화가 기존 시스템의 기능에 영향을 주는지 평가하는 테스트를 회귀(regression) 테스트라고 한다.

모든 코드를 테스트하는 문제를 해결하려면 한 클래스에 너무 많은 책임을 부여하지 말고 단 하나의 책임만 수행하도록 해 변경 사유가 될 수 있는 것을 하나로 만들어야 한다. 이를 책임 분리라 한다.

====3.1.4 산탄총 수술 ====
하나의 책임이 여러개의 클래스들로 분산되어 있는 경우에도 단일 책임 원칙에 입각해 설계를 변경해야 하는 경우도 있다. 이때 산탄총 수술(shotgun surgery)라는 용어를 사용한다. 어떤 변경이 있을 때 하나가 아닌 여러 클래스를 변경해야 하는 경우에 사용되는 용어이다. 클래스 하나하나를 모두 변경하지 않으면 프로그램이 정상적으로 동작하지 않고 에러가 발생한다. 특히 로깅, 보안 트랭잭션과 같은 횡단 관심으로 분류할 수 있는 기능이 대표적이다.

이를 해결하는 방법은 이러한 부가 기능을 별개의 클래스로 분리해 책임을 담당하게 하는 것이다. 즉 여러 곳에 흩어진 공통책임을 한곳에 모으면서 응집도를 높인다. 그러나 이런 독립 클래스를 구현하더라도 구현된 기능들을 호출하고 사용하는 코드는 해당 기능을 사용하는 코드 어딘가에 포함될 수밖에 없다.

====3.1.5 관심지향 프로그래밍과 횡단 관심 문제 ====
앞에서 설명한 횡단 관심 문제를 해결하는 방법으로 관심지향 프로그래밍(Aspect-Oriented Programming, AOP) 기법이 있다. AOP는 횡단 관심을 수행하는 코드를 애스펙트(aspect)라는 특별한 객체로 모듈화하고 위빙(weaving)이라는 작업을 통해 모듈화한 코드를 핵심 기능에 끼워넣을 수 있다. 이를 통해 기존의 코드를 전혀 변경하지 않고도 시스템 핵심 기능에서 필요한 부가 기능을 효과적으로 이용할 수 있다. 만약 횡단 관심에 변경이 생긴다면 해당 애스펙트만 수정하면 된다.

역할 관계의 역할 이름은 연관된 클래스의 객체들이 서로를 참조할 수 있는 속성의 이름으로 활용할 수 있다. 
  
SRP와 고전적 설계 개념인 응집도와 결합도의 관계는 다음과 같다. 응집도란 한 프로그램 요소(절차지향 관점에서는 프로그램 함수나 프로시저, 객체지향적 관점에서는 클래스나 메서드)가 얼마나 뭉쳐 있는가를 나타내는 척도다. 가령 프로시저 하나가 단일 기능을 실행하도록 문장이나 자료구저가 구성되었다면 해당 기능을 실행하기 위해 해당 구성 요소 어떤 것도 빠뜨리지 못할 것이다. 말 그대로 구성 요소들 사이의 응집력이 강하다. 이에 반해 프로시저가 여러 기능을 실행하도록 구성되어 있다면 각각의 기능을 실행하는 데 필요한 구성요소들 사이는 서로 별다른 연관이 없을 것이다. 이런 경우에 SRP를 따르면 응집도는 자연스럽게 높아진다.

결합도는 프로그램 구성 요소들 사이가 얼마나 의존적인지를 나타내는 척도다. 가령 프로그램 안 프로시저 하나의 자료구조가 다른 형태로 변경되었을 때 이 프로시저를 사용하는 곳도 변경되어야 한다면 이 두 프로시저는 결합도가 높다고 말한다. 그러나 아무런 영향을 미치지 않는다면 결합도는 낮다고 말한다.

설계할 때의 기본 원칙은 응집도는 높고 결합도는 낮게 하는 것으로 세우면 좋다. 응집도가 높으면 관련 기능이 한 곳에 모여있게 되는데, 이는 재사용과 유지 보수가 쉬워진다는 의미이다. 결합도가 낮아야 하는 이유는 결합도가 높을 때 어떤 문제가 발생할지 생각해보면 알 수 있다. 가령 결합도가 높은 시스템의 한 부분이 변경이 되면 이에 연관된 부분들도 같이 변경하거나 회귀 테스트를 실행해야 한다. 더군다나 변경하려는 부분을 독립적으로 떼어놓기 어렵기 때문에 재사용성이 낮으며 이해하기도 쉽지 않다.

응집도와 결합도는 서로 독립적인 개념이 아니라 밀접한 관계가 있는 개념으로, 고나련된 것들을 한곳에 두어 응집도를 높이면 자연스럽게 결합도는 낮아진다. 따라서 한 클래스로 하여금 단일 책임을 갖게 하는 SRP에 따른 설계를 하면 응집도는 높아지고 더불어 결합도는 낮아진다.

AOP 관련 용어

** 조인포인트 ** : 애플리케이션 실행 중의 특정한 지점을 의미한다. 전형적인 조인포인트의 예로는 메서드 호출, 메서드 실행 자체, 클래스 초기화, 객체 생성 시점 등이 있다. 조인포인트는 AOP의 핵심 개념이며 애플리케이션의 어떤 지점에서 AOP를 사용해 추가적인 로직을 삽입할지를 정의한다.

** 어드바이스 ** : 특정 조인포인트에 실행하는 코드를 말한다. 조인포인트 이전에 실행하는 Before 어드바이스(advice)와  이후에 실행하는 After 어드바이스를 비롯한 여러 종류의 어드바이스가 있다.

** 포인트컷 ** : 여러 조인포인트의 집합체로 언제 어드바이스를 실행할지 정의할 때 사용한다. 포인트컷을 만들면 애플리케이션 구성 요소에 어떻게 적용할지 상세하게 제어할 수 있다. 앞서 언급했듯이 가장 일반적으로 사용하는 조인포인트는 메서드 호출이다. 따라서 가장 일반적인 포인트컷은 특정 클래스에 있는 모든 메서드 호출로 구성된다. 종종 어드바이스 실행 지점을 좀 더 다양하게 제어할 필요가 있을 때는 복잡한 형태로 포인트컷을 구성할 수도 있다.

** 애스펙트 ** : 어드바이스와 포인트컷을 조합한 조합물이다. 즉, 애플리케이션이 가져야 할 로직과 그것을 실행해야 하는 지점을 정의한 것이라고 할 수 있다.

** 위빙 ** : 애플리케이션 코드의 해당 지점에 애스펙트(aspect)를 실제로 주입하는 과정을 말한다. 당연히 컴파일 시점 AOP 솔루션은 이 작업을 컴파일 시점에 하며 빌드 중에 별도의 과정을 거친다. 마찬가지로 실행 시점 AOP 솔루션은 실행 중에 동적으로 위빙(weaving)이 일어난다.

=====3.2 개방-폐쇄 원칙 =====

개방-폐쇄 원칙은 기존의 코드를 변경하지 않으면서 기능을 추가할 수 있도록 설계가 되어야 한다는 뜻이다.

모의 객체는 테스트 더블의 한 종류로 '무엇'인가를 대신하는 가짜라는 뜻이다. 단위 테스트에서는 여러 가지 이유로 다음과 같은 테스트 더블을 사용한다.

  * 더미 객체 : 테스트할 때 객체만 필요하고 해당 객체의 기능까지는 필요하지 않은 경우에 사용한다. 더미 객체의 메서드가 호출되는 경우에는 정상 동작을 실행하지 않고 예외가 발생한다.
  * 테스트 스텁 : 더미 객체에 단순한 기능을 추가한다. 객체의 특정 상태를 가정해서 작성하며 특정한 값을 반환하거나 특정한 메시지를 출력하게 한다.
  * 테스트 스파이 : 주로 테스트 대상 클래스가 의존하는 클래스로의 출력을 검증하는 데 사용한다. 대상 클래스가 실행되는 동안 특정 의존 클래스로의 호출을 잡아내며 대상 클래스의 실행이 끝난 후에는 원하는 대로 호출되었는지 검사한다.
  * 가짜 객체 : 실제 의존 클래스의 기능을 대체해야 할 경우에 사용하며 실제 의존 클래스의 기능 중 전체나 일부를 훨씬 단순하게 구현한다. 실제 의존 클래스가 구현되지 않았거나 너무 느리거나, 테스트 환경에서 사용할 수 없을 때 가짜 객체를 사용한다.
  * 목 객체 : 미리 정의한 기대 값과 실제 호출은 단언문으로 비교해 문제가 있으면 테스트 메서드를 대신해 모의 객체가 테스트를 실패하게 한다. 목 객체는 테스트 더블의 모든 형태들을 포함하는 의미로 사용되기도 한다.

=====3.3 리스코프 치환 원칙 =====
리스코프 치환 원칙(Listkov Substitution Principle, LSP)은 MIT 컴퓨터 공학과 리스코프 교수가 1987년에 제안한 원칙이다. 단순하게 풀어보면 LSP는 일반화 관계에 대한 이야기이며 자식 클래스는 최소한 자신의 부모 클래스에서 가능한 행위는 수행할 수 있어야 한다는 뜻이다. LSP를 만족하면 프로그램에서 부모 클래스의 인스턴스 대신에 자식 클래스의 인스턴스로 대체해도 프로그램의 의미는 변화하지 않는다. 

  LSP는 부모 클래스와 자식 클래스 사이의 행위가 일관성이 있어야 한다는 의미다.
  
객체지향 관점에서 "is a kind of 관계"는 부모 클래스의 인스턴스 대신에 자식 클래스의 인스턴스를 별다른 변경 없이 그대로 사용할 수 있을때 성립한다.

  LSP를 만족시키는 간단한 방법은 재정의하지 않는 것이다.
  
===== 3.4 의존 역전 원칙 =====
객체 사이에 서로 도움을 주고받으면 의존 관계가 발생한다. 의존 역전 원칙(Dependency Inversion Principle, DIP)은 그러한 의존 관계를 맺을 때의 가이드라인에 해당한다. 누군가의 도움을 받을 때는 무조건 도움을 받으려고 여기저기 손을 내밀 게 아니라 나름대로의 원칙을 가지고 도움을 청해야 효과적인 도움을 받을 수 있다.

  DIP는 의존 관계를 맺을 때 변화하기 쉬운 것 또는 자주 변화하는 것보다는 변화하기 어려운 것, 거의 변화가 없는 것에 의존하라는 원칙이다. 
  
DIP를 만족하려면 어떤 클래스가 도움을 받을 때 구체적인 클래스보다는 인터페이스나 추상 클래스와 의존 관계를 맺도록 설계해야 한다. DIP를 만족하는 설계는 변화에 유연한 시스템이 된다. DIP를 만족하면 의존성 주입(dependency injection)이라는 기술로 변화를 쉽게 수용할 수 있는 코드를 작성할 수 있다. 의존성 주입이란 말 그대로 클래스 외부에서 의존되는 것을 대상 객체의 인스턴스 변수에 주입하는 기술이다. 의존성 주입을 이용하면 대상 객체를 변경하지 않고도 외부에서 대상 객체의 외부 의존 객체를 바꿀 수 있다.

<file java 코드 3-5.java>
public class Kid{
	private Toy toy;
	public void setToy(Toy toy){
		this.toy = toy;
	}
	public void play(){
		System.out.println(toy.toString());
	}
}
</file>

Kid클래스에서 setToy메서드로 아이가 가지고 노는 장난감을 바꿀 수 있다. 만약 로봇 장난감을 가지고 놀고 싶다면 코드 3-6과 3-7이 그 일을 해줄 것이다.

<file java 코드 3-6.java>
public class Robot extends Toy{
	public String toString(){
		return "Robot";
	}
}
</file>

<file java 코드 3-7.java>
public class Main{
	public static void main(String[] args){
		Toy t = new Robot();
		Kid k = new Kid();
		k.setToy(t);
		k.play();
	}
}
</file>

아이가 마음이 바뀌에 레고를 가지고 놀고 싶다면 기존의 코드에 전혀 영향을 받지 않고도 장난감을 바꿀 수 있다.

=====3.5 인터페이스 분리 원칙 =====
인터페이스 분리 원칙(Interface Segregation Principle, ISP)은 방금 전에 소개한 예의 간점(클라이언트의 관점에서 바라는)에서 생긴 객체지향 설계 원칙에는 클라이언트 자신이 이용하지 않는 기능에는 영향을 받지 않아야 한다는 내용이 담겨 있다.

복합기를 생각해 보자

복합기 기능을 제공하는 클래스는 매우 비대해질 가능성이 크다. 하지만 이 비대한 클래스의 모든 기능을 클라이언트가 동시에 사용하는 경우는 거의 없다. 따라서 프린터 기능만 이용하는 클라이언트가 팩스 기능의 변경으로 인해 발생하는 문제의 영향을 받지 않도록 해야 한다. 클라이언트와 무관하게 발생한 변화로 클라이언트 자신이 영향을 받지 않으려면 범용의 인터페이스보다는 클라이언트에 특화된 인터페이스를 사용해야 한다. 즉, ISP를 다르게 설명하면 말 그대로 인터페이스를 클라이언트에 특화되도록 분리시키라는 설계 원칙이라고도 할 수 있다.

