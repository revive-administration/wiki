====== 1장 오브젝트와 의존관계 ======
===== 1.1 초난감 DAO =====
  * DAO : DB를 사용해 데이터를 조회하거나 조작하는 기능을 전담하도록 만든 오브젝트를 말한다.
==== 1.1.1 User======
  * JavaBean : 원래 비주얼 툴에서 조작 가능한 컴포넌트를 말한다. 자바의 주력 개발 플랫폼이 웹 기반의 엔터프라이 방식으로 바뀌면서 비주얼 컴포넌트로서의 자바빈은 인기를 잃어 갔지만 몇 가지 코딩 관례는 자바빈 스타일의 오브젝트를 사용하는 오픈소스 기술을 통해 계속 이어져 왔다. 다음 두 가지 관례를 따라 만들어진 오브젝트를 가리킨다. 
    * 디폴트 생성자 : 자바빈은 파라미터가 없는 디폴트 생성자를 갖고 있어야 한다. 툴이나 프레임워크에서 리플렉션을 이용해 오브젝트를 생성하기 때문에 필요하다. 
    * 프로퍼티 : 자바빈이 노출하는 이름을 가진 속성을 말한다. getter setter로 불리는 수정자/접근자 메서드를 통해 조회할 수 있다.
    * (참고)리플렉션 : 정의된 것을 찾는 행위로서 동적 언어의 특징이다. 클래스나 메서드는 컴파일 되어 메모리에 올라가 프로그램 입장에서는 그것을 호출하거나 사용할 수만 있는데 리플렉션을 지원하는 언어는 그것 뿐 아니라 아예 정의 자체를 찾아와 조작하는 기능까지 제공한다.

==== 1.1.2 UserDao =====
==== 1.1.3 main()을 이용한 DAO 테스트 코드 =====
===== 1.2 DAO의 분리 ====
==== 1.2.1 관심사의 분리 =====
  * 관심사의 분리(Separation of Concerns) : 관심이 같은 것끼리는 하나의 객체 안으로 또는 친한 객체로 모이게 하고, 관심이 다른 것은 가능한 한 따로 떨어져서 서로 영향을 주지 않도록 분리하는 것
==== 1.2.2 커넥션 만들기의 추출 =====
=== UserDao의 관심사항 ===
  * 첫째는 DB와 연결을 위한 커넥션을 어떻게 가져올까라는 관심이다. 더 세분화해서 어떤 DB를 쓰고, 어떤 드라이버를 사용할 것이고, 어떤 로그인 정보를 쓰는데, 그 커넥션을 생성하는 방법은 또 어떤 것이다라는 것까지 구분해서 볼 수도 있다. 
  * 둘째는 사용자 등록을 위해 DB에 보낼 SQL 문장을 담은 Statement를 만들고 실행하는 것이다. 여기서의 관심은 파리미터로 넘어온 사용자 정보를 Statement에 바인딩 시키고, Statement에 담긴 SQL을 DB를 통해 실행시키는 방법이다. 
  * 셋째는 작업이 끝나면 사용한 리소스인 Statement와 Connection 오브젝트를 닫아줘서 소중한 공유 리소스를 시스템에 돌려주는 것이다.
=== 중복 코드의 메서드 추출 ===
똑같은 코드를 2번이상 사용할 경우 메서드로 추출하는 것을 고려해 본다.
=== 변경사항에 대한 검증 : 리팩토링과 테스트 ===
  * 리팩토링 : 기존의 코드를 외부의 동작방식에는 변화 없이 내부 구조를 변경해서 재구성하는 작업 또는 기술을 말한다. 
==== 1.2.3 DB 커넥션 만들기의 독립 ====
UserDao 소스코드를 N사와 D사에 제공해주지 않고도 고객 스스로 원하는 DB 커넥션 생성 방식을 적용해 가면서 UserDao를 사용하게 할 수 있을까?
=== 상속을 통한 확장 ===
기존 UserDao 코드를 한 단계 더 분리하면 된다. UserDao에서 메서드의 구현 코드를 제거하고 getConnection을 추상 메서드로 만들어 놓는다. UserDao를 구입한 포털사들은 UserDao클래스를 상속해서 각각의 서브 클래스를 만든다. 이렇게 슈퍼클래스에 기본적인 로직의 흐름을 만들고, 그 기능의 일부를 추상 메서드나 오버라이딩이 가능한 protected 메서드 등으로 만든 뒤 서브 클래스에서 이런 메서드를 필요에 맞게 구현해서 사용하도록 하는 방법을 디자인 패턴에서 템플릿 메서드 패턴이라고 한다. 하지만 이 방법은 상속을 사용했다는 단점이 있다. 다중상속 문제가 걸릴 수 있으며 상속을 통한 상하위 클래스의 관계는 생각보다 밀접하다. 확장된 기능인 DB 커넥션을 생성하는 코드를 다른 DAO 클래스에 적용할 수 없다는 것도 큰 단점이다.

===== 1.3 DAO의 확장 =====
==== 1.3.1 클래스의 분리 ====
이번에는 상속관계가 아닌 완전히 독립적인 클래스로 만들어 보자
==== 1.3.2 인터페이스의 도입 ====
추상화란 어떤 것들의 공통적인 성격을 뽑아내어 이를 따로 분리해내는 작업이다. 인터페이스는 어떤 일을 하겠다는 기능만 정의해놓은 것이다. 
==== 1.3.3 관계설정 책임의 분리 ====
UserDao의 클라이언트에서 UserDao를 사용하기 전에, 먼저 UserDao가 어떤 ConnectionMaker의 구현 클래스를 사용할지를 결정하도록 만들어보자.
==== 1.3.4 원칙과 패턴 ====
=== 개방 폐쇄 원칙 ====
클래스나 모듈은 확장에는 열려 있어야 하고 변경에는 닫혀 있어야 한다.
=== 높은 응집도와 낮은 결합도 ===
=== 전략 패턴 ===
자신의 기능 맥락에서 필요에 따라 변경이 필요한 알고리즘을 인터페이스를 통해 통째로 외부로 분리시키고, 이를 구현한 구체적인 알고리즘 클래스를 필요에 따라 바꿔서 사용할 수 있게 하는 디자인 패턴
===== 1.4 제어의 역전(IoC)=====
==== 1.4.1 오브젝트 팩토리 ====
=== 팩토리 ===
=== 설계도로서의 팩토리 ===
==== 1.4.2 오브젝트 팩토리의 활용 ====
==== 1.4.3 제어권의 이전을 통한 제어관계 역전 ====
===== 1.5 스프링의 IoC =====
==== 1.5.1 오브젝트 팩토리를 이용한 스프링 IoC ====
=== 어플리케이션 컨텍스트와 설정정보 ===
  * 스프링에서의 빈 : 스프링이 제어권을 가지고 직접 만들고 관계를 부여하는 오브젝트
  * 스프링 빈 : 스프링 컨테이너가 생성과 관계설정, 사용 등을 제어해주는 제어의 역전이 적용된 오브젝트
  * 빈 팩토리 : 빈의 생성과 관계설정 같은 제어를 담당하는 IoC 오브젝트
  * 어플리케이션 컨텍스트 : IoC 방식을 따라 만들어진 일종의 빈 팩토리, 별도의 정보를 참고해서 빈의 생성, 관계설정 등의 제어 작업을 총괄한다.
=== DaoFactory를 사용하는 애플리케이션 컨텍스트 ===
DaoFactory를 스프링의 빈 팩토리가 사용할 수있는 본격적인 설정정보로 만들어 보자. 먼저 스프링이 빈 팩토리를 위한 오브젝트 설정을 담당하는 클래스라고 인식할 수 있도록 @Configuration이라는 애노테이션을 추가한다. 또한 오브젝트를 만들어주는 메서드에는 @Bean이라는 애노테이션을 붙여준다.

이제 DaoFactory를 설정정보로 사용하는 애플리케이션 컨텍스트를 만들어보자. 애플리케이션 컨텍스트는 ApplicationContext 타입의 오브젝트다. ApplicationContext를 구현한 클래스는 여러 가지가 있는데 Dao처럼 @Configuration이 붙은 자바 코드를 설정정보로 사용하려면 AnnotationConfigApplicationContext를 이용하면 된다. 애플리케이션 컨텍스트를 만들 때 생성자 파라미터로 DaoFactory 클래스를 넣어준다. 이제 이렇게 준비된 ApplicationContext의 getBean()이라는 메서드를 이용해 UserDao의 오브젝트를 가져올 수 있다.