====== 10장. 병렬 프로그래밍 ======
===== 10.1 병행 태스크 =====
  * Note : 프로그램이 마짐가 출력 후에 약간 대기한다. 프로그램은 스레드 풀에서 나온 스레드가 잠시 유휴상태에 있어서 실행자가 종료시킬 때 종료된다.

==== 10.1.2 퓨처와 실행자 서비스 ====
서브태스크는 각각 부분 결과를 계산하여 태스크가 완료되면 결과들을 결합하려고 한다. 서브태스크에 Callable 인터페이스를 사용할 수 있다. Callable의 call 메서드는 run 메서드와 달리 값을 반환한다.

Callable을 실행하려면 Executor의 서브인터페이스인 ExecutorService 인터페이스의 인스턴스가 필요하다. Executors 클래스의 newCachedThreadPool과 newFixedThreadPool 메서드가 ExecutorService 객체를 돌려준다.

태스크를 제출하면 퓨처(future) 객체를 얻게 되는데, 퓨처 객체는 언젠간 결과를 얻게되는 계산을 표현한다. future의 get 메서드는 결과를 얻게 되거나 타임아웃에 이를 때까지 블록한다. 그런 다음 계산된 값을 반환하거나, call 메서드에서 예외를 던졌을 때 해당 예외를 감싸고 있는 ExecutionException을 던진다.

===== 10.2 스레드 안정성 =====
최적화(optimization)는 동시 메모리 접근이 없다고 가정한다. 동시 메모리 접근이 있을 때는 가상머신이 알아야 한다. 그래야 가상 머신이 부적절한 재배치를 금지하는 프로세서 명령어를 만들 수 있다. 변수 업데이트가 보이게 보장하는 방법은 다음과 같다.

  * 1. final 변수의 값은 초기화 후에 보인다.
  * 2. static 변수의 초깃값은 정적 초기화(initialization) 후에 보인다.
  * 3. volatile 변수의 변경은 보인다.
  * 4. 잠금을 해제하기 전에 일어나는 변경은 같은 잠금을 획득하는 쪽에 보인다.

==== 10.2.2 경쟁 조건 ====
count++ 업데이트는 원자적(atomic)이지 않다. count + 1 값을 count 변수에 다시 저장하기 전에 스레드가 선점되면 인터럽트될 수 있다. 이런 오류는 공유변수를 업데이트하는 경쟁에서 승리하는 스레드에 의존하므로 경쟁조건이라고 한다. 

이 문제를 해결하는 방법은 잠금을 이용하여 임계적인 연산을 원자적으로 만드는 것이다. 하지만 병행성 문제를 해결하는 데 잠금은 일반적인 해결책이 될 수 없다. 적절하게 이용하기 어려워 퍼포먼스를 현저하게 떨어뜨리거나, 교착상태(deadlock)를 야기하는 실수를 저지르기 쉽다.

==== 10.2.3 안전한 병행성을 실현하는 전략 ====


===== 10.4 스레드 안전 자료 구조 =====
==== 10.4.1 병행 해시맵 ====
ConcurrentHashMap은 스레드가 안전한 연산을 할 수 있게 해주는 해시맵이다. 스레드가 동시에 해당 맵에 연산을 수행할 때 아무리 많은 스레드가 연산을 수행해도 내부가 손상되지 않는다. 

==== 10.4.2 블로킹 큐 ====
블로킹 큐(blocking queue)는 태스크 사이에서 작업을 조율하는 데 사용한다. 

===== 10.5 원잣값 =====
java.util.concurrent.atomic 패키지에는 스레드에 안전한 방식으로 공유 카운터를 업데이트하기 위한 클래스가 있다. 이 클래스들은 안전하고 효율적인 머신 수준 명령어를 이용해서 정수, long, boolean 값, 객체 참조, 배열에 작용하는 연산의 원자성을 보장한다. 잠금 대신에 원잣값(atomic value)을 이용하는 시점을 결정할 수 있으려면 상당한 지식이 필요하다. 

===== 10.6 잠금 =====
==== 10.6.1 재진입 가능 잠금 ====
공유 변수가 손상되는 것을 피하려면 한 번에 한 스레드에서만 새로운 값을 계산하고 설정할 수 있게 해야 한다. 인터럽션 없이 온전히 실행해야 하는 코드를 임계 영역(critical section)이라고 한다. 임계 영역은 잠금(lock)을 이용해서 구현할 수 있다. 