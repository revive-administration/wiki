====== 4장 채널 파이프라인과 코덱 ======
채널 파이프라인은 채널에서 발생한 이벤트가 이동하는 통로다. 이 통로를 통해서 이동하는 이벤트를 처리하는 클래스를 이벤트 핸들러라고 하며 이벤트 핸들러를 상속받아서 구현한 구현체들을 코덱이라고 한다.

===== 4.1 이벤트 실행 =====
===== 4.2 채널 파이프라인 =====
==== 4.2.1 채널 파이프라인의 구조 ====
채널은 일반적인 소켓 프로그래밍에서 말하는 소켓과 같다고 보는데 이 소켓에서 발생한 이벤트는 채널 파이프라인을 따라 흐른다. 채널에서 발생한 이벤트들을 수신하고 처리하는 기능은 이벤트 핸들러가 수행한다. 

==== 4.2.2 채널 파이프라인의 동작 ====
initChannel 메서드는 클라이언트 소켓 채널이 생성될 때 자동으로 호출되는데 이때 채널 파이프라인의 설정을 수행한다. 부트스트랩에 설정한 ChannelInitializer 클래스의 initChannel 메서드 본체는 부트스트랩이 초기화될 때 수행되며 이때 서버 소켓 채널과 채널 파이프라인이 연결된다. 

=====4.3 이벤트 핸들러 =====
네티는 비동기 호출을 지원하는 두 가지 패턴을 제공한다. 첫 번째는 퓨처 패턴이며 두 번째는 리액터 패턴의 구현체인 이벤트 핸들러다. 이벤트 핸들러는 네티의 소켓 채널에서 발생한 이벤트를 처리하는 인터페이스다. 소켓 채널의 이벤트를 인터페이스로 정의하고 이 인터페이스를 상속받은 이벤트 핸들러를 작성하여 채널 파이프라인에 등록한다. 채널 파이프라인으로 입력되는 이벤트를 이벤트 루프가 가로채어 이벤트에 해당하는 메서드를 수행하는 구조다. 

==== 4.3.1 채널 인바운드 이벤트 ====
네티는 소켓 채널에서 발생하는 이벤트를 인바운드 이벤트와 아웃바운드 이벤트로 추상화한다. 인바운드 이벤트는 소켓 채널에서 발생한 이벤트 중에서 연결 상대방이 어떤 동작을 취했을 때 발생한다. 예를들면 채널 활성화, 데이터 수신 등의 이벤트가 이에 해당한다.

=== channelRegistered 이벤트 ===
채널이 이벤트 루프에 등록되었을 때 발생한다. 이벤트 루프는 네티가 이벤트를 실행하는 스레드로써 부트 스트랩에 설정한 이벤트 루프다.

=== channelActive 이벤트 ===
channelRegistered 이벤트 이후에 발생한다. 이는 채널이 생성되고 이벤트 루프에 등록된 이후에 네티 API를 사용하여 채널 입출력을 수행할 상태가 되었음을 알려주는 이벤트다. 서버 또는 클라이언트가 상대방에 연결한 직후에 한 번 수행할 작업을 처리하기에 적합하다.

=== channelRead 이벤트 ===
데이터가 수신되었음을 알려준다. 수신된 데이터는 네티의 ByteBuf 객체에 저장되어 있으며 이벤트 메서드의 두 번째 인자인 msg를 통해서 접근할 수 있다. 

=== channelReadComplete 이벤트 ===
데이터 수신이 완료되었음을 알려준다. channelRead 이벤트는 채널에 데이터가 있을 때 발생하고 채널의 데이터를다 읽어서 더 이상 데이터가 없을 때 channelReadComplete 이벤트가 발생한다. 

=== channelInactive 이벤트 ===
채널이 비활성화 되었을 때 발생한다. 이후 입출력 작업을 수행할 수 없다.

=== channelUnregistered 이벤트 ===
채널이 이벤트 루프에서 제거되었을 때 발생한다. 이후 이벤트를 처리할 수 없다.

====4.2.3 아웃바운드 이벤트 ====
소켓 채널에서 발생한 이벤트 중에서 네티 사용자가 요청한 동작에 해당하는 이벤트를 말하며 연결 요청, 데이터 전송, 소켓 닫기 등이 이에 해당한다. 
=== bind 이벤트 ===
서버 소켓 채널이 클라이언트의 연결을 대기하는 IP 포트가 설정되었을 때 발생한다. bind 이벤트에서는 서버 소켓 채널이 사용중인 SocketAddress 객체가 인수로 입력된다. 즉 서버 소켓 채널이 사용하는 IP와 포트정보를 확인할 수 있다.

=== connect 이벤트 ===
클라이언트와 소켓 채널이 서버에 연결되었을 때 발생한다. connect이벤트에서는 원격지의 SocketAddress 정보와 로컬 SocketAddress 정보가 인수로 입력된다. 

=== disconnect 이벤트 ===
클라이언트 소켓 채널의 연결이 끊어졌을 때 발생한다.

=== close 이벤트 ===
클라이언트 소켓 채널의 연결이 닫혔을 때 발생한다.

=== write 이벤트 ===
소켓 채널에 데이터가 기록되었을 때 발생한다.

=== flush 이벤트 ===
소켓 채널에 대한 flush 메서드가 호출되었을 때 발생한다.

==== 4.3.3 이벤트 이동 경로와 이벤트 메서드 실행 ====
ChannelHandlerContext 인터페이스의 fireChannelRead 메서드를 호출하면 네티는 채널 파이프라인에 channelRead 이벤트를 발생시킨다. 

==== 4.3.4 코덱 ====
네티에서 인코더는 전송할 데이터를 전송 프로토콜에 맞추어 변환 작업을 수행하고 디코더는 반대의 작업을 수행한다.

===== 4.4 코덱의 구조 =====
==== 4.4.1 코덱의 실행 과정 ====
네티의 코덱은 템플릿 메서드 패턴으로 구현되어있다. 

===== 4.5 기본 제공 코덱 =====
==== base64 코덱 ====
Base 64 인코딩 데이터에 대한 송수신을 지원하는 코덱이다. Base64란 '8비트 이진 데이터'를 '문자 코드에 영향을 받지 않는 공통 ASCII 영역의 문자로 이루어진 일련의 문자열'로 바꾸는 인코딩을 말한다.

==== bytes 코덱 ====
바이트 배열 데이터에 대한 송수신을 지원하는 코덱이다.

====compression 코덱 ====
송수신 데이터의 압축을 지원하는 코덱이다. 

==== http 코덱 ====
HTTP 프로토콜을 지원하는 코덱으로서 하위 패키지에서 다양한 송수신 방법을 지원한다.

==== marshalling 코덱 ====
마샬링이란 객체를 네트워크를 통해서 송신 가능한 형태로 변환하는 과정이다. 

==== protobuf 코덱 ====
구글의 프로토콜 버퍼를 사용한 데이터 송수신을 지원하는 코덱이다.

==== rtsp 코덱 ====
RTSP는 오디오와 비디오 같은 실시간 데이터의 전달을 위해서 특수하게 만들어진 애플리케이션 레벨의 프로토콜이다.

==== SCTP 코덱 ====
tcp가 아닌 sctp 전송 계층을 사용하는 코덱이다.

====SPDY 코덱 ====
구글의 SPDY 프로토콜을 지원하는 코덱이다. 

==== string 코덱 ====
문자열의 송수신을 지원하는 코덱이다.

==== serialization 코덱 ====
자바의 객체를 네트워크로 전송할 수 있도록 직렬화와 역직렬화를 지원하는 코덱이다.

===== 4.6 사용자 정의 코덱 =====
