====== 9장. 그래프 알고리즘 ======
===== 플로이드 워샬 알고리즘 =====
    * d(k,i,j) : 정점 집합 {1,2,...k}에 속하는 정점들만을 중간 정점으로 거쳐서 i에서 j에 이르는 최단거리
    * 관계식
<file c c.c>
       d(k,i,j)
          if(k=0)
	    w(i,j)
          if(k>=1)
	    min{ d(k-1,i,j), d(k-1,i,k)+d(k-1,k,j) }
</file>
    * 이렇게 정리할 수 있는 논리적 근거를 살펴보자. d(k,i,j)는 정의에 따라 정점 집합 {1,2,...,k}에 속하는 정점만을 거쳐서 i에서 j에 이르는 최단거리다. 경로 p를 이러한 최단경로라고 하자.
        * 만약 경로 p에 정점 k가 포함되어 있지 않으면 이 경로는 정점 집합 {1,2,...,k-1}에 속하는 정점만을 사용한다. 즉 d(k,i,j) = d(k-1,i,j)이다.
        * 만약 경로 p에 정점 k가 포함되어 있다면 정점 k를 중심으로 경로 i -> k와 경로 k -> j로 나누어 보자. 최단 경로상에 싸이클은 존재할 수 없으므로 두 경로의 중간에 정점 k는 더이상 나타나지 않는다. 즉, 이 두 경로는 각각 정점 집합 {1,2,...,k-1}에 속하는 정점만을 거치는 최단경로 i->k와 정점 집합 {1,2,...,k-1}에 속하는 정점만을 거치는 최단 경로 k->j가 되어 각가의 길이는 d(k-1,i,k)와 d(k-1,k,j)가 된다.

  * 즉 경로 i->j를 위한 위의 두 경우 작은 것이 d(k,i,j)가 된다.